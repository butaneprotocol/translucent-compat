{"version":3,"file":"index.es.js","sources":["../src/core/core.ts","../src/utils/cost_model.ts","../src/misc/bip39.ts","../src/misc/crc8.ts","../src/plutus/time.ts","../src/plutus/data.ts","../src/utils/to.ts","../src/utils/utils.ts","../src/translucent/tx_signed.ts","../src/translucent/tx_complete.ts","../src/translucent/tx.ts","../src/misc/sign_data.ts","../src/translucent/message.ts","../src/provider/emulator.ts","../src/wallets/wallet_connector.ts","../src/wallets/private_key.ts","../src/misc/wallet.ts","../src/wallets/seed.ts","../src/wallets/public_wallet.ts","../src/translucent/translucent.ts","../src/provider/kupmios.ts","../src/provider/kupmiosv5.ts","../src/provider/maestro.ts","../src/wallets/abstract.ts","../src/wallets/chained.ts"],"sourcesContent":["type CModule = typeof import(\"@dcspark/cardano-multiplatform-lib-nodejs\");\ntype UModule = typeof import(\"uplc-node\");\ntype MModule = typeof import(\"@emurgo/cardano-message-signing-nodejs\");\n\nlet C: CModule;\nlet U: UModule;\nlet M: MModule;\n\nasync function loadModule() {\n  if (process.browser) {\n    C = await import(\"@dcspark/cardano-multiplatform-lib-browser\");\n    U = await import(\"uplc-web\");\n    M = await import(\"@emurgo/cardano-message-signing-browser\");\n  } else {\n    C = await import(\"@dcspark/cardano-multiplatform-lib-nodejs\");\n    U = await import(\"uplc-node\");\n    M = await import(\"@emurgo/cardano-message-signing-nodejs\");\n  }\n}\n\nexport type {\n  Address as CAddress,\n  ByronAddress as CByronAddress,\n  Value as CValue,\n  ScriptRef as CScriptRef,\n  TransactionUnspentOutput as CTransactionUnspentOutput,\n  NativeScript as CNativeScript,\n  Transaction as CTransaction,\n  TransactionWitnessSet as CTransactionWitnessSet,\n  TransactionBuilderConfig as CTransactionBuilderConfig,\n  TransactionUnspentOutputs as CTransactionUnspentOutputs,\n  PoolRegistration as CPoolRegistration,\n  PlutusScript as CPlutusScript,\n  PlutusV2Script as CPlutusV2Script,\n  PrivateKey as CPrivateKey,\n  Ed25519KeyHash as CEd25519KeyHash,\n  TransactionBuilder as CTransactionBuilder,\n  InputBuilderResult as CInputBuilderResult,\n  MintBuilderResult as CMintBuilderResult,\n  CertificateBuilderResult as CCertificateBuilderResult,\n  WithdrawalBuilderResult as CWithdrawalBuilderResult,\n  Redeemer as CRedeemer,\n  BigNum as CBigNum,\n  Ed25519KeyHashes as CEd25519KeyHashes,\n  PlutusData as CPlutusData,\n} from \"@dcspark/cardano-multiplatform-lib-nodejs\";\n\nexport { C, U, M, loadModule };\n\ndeclare global {\n  namespace NodeJS {\n    interface Process {\n      browser: boolean;\n    }\n  }\n}\n","import { C } from \"../core/mod\";\nimport type { CostModels } from \"../mod\";\nimport type { ProtocolParameters } from \"../types/types\";\n\nexport function createCostModels(costModels: CostModels) {\n  const costmdls = C.Costmdls.new();\n\n  // add plutus v1\n  const costmdlV1 = C.CostModel.empty_model(C.Language.new_plutus_v1());\n  Object.values(costModels.PlutusV1).forEach((cost, index) => {\n    costmdlV1.set(index, C.Int.new(C.BigNum.from_str(cost.toString())));\n  });\n  costmdls.insert(costmdlV1);\n\n  // add plutus v2\n  const costmdlV2 = C.CostModel.empty_model(C.Language.new_plutus_v2());\n  Object.values(costModels.PlutusV2 || []).forEach((cost, index) => {\n    costmdlV2.set(index, C.Int.new(C.BigNum.from_str(cost.toString())));\n  });\n  costmdls.insert(costmdlV2);\n\n  return costmdls;\n}\n\nexport const PROTOCOL_PARAMETERS_DEFAULT: ProtocolParameters = {\n  minFeeA: 44,\n  minFeeB: 155381,\n  maxTxSize: 16384,\n  maxValSize: 5000,\n  keyDeposit: 2000000n,\n  poolDeposit: 500000000n,\n  priceMem: [577n, 10000n],\n  priceStep: [721n, 10_000_000n],\n  maxTxExMem: 14000000n,\n  maxTxExSteps: 10000000000n,\n  coinsPerUtxoByte: 4310n,\n  collateralPercentage: 150,\n  maxCollateralInputs: 3,\n  costModels: {\n    PlutusV1: {\n      \"addInteger-cpu-arguments-intercept\": 205665,\n      \"addInteger-cpu-arguments-slope\": 812,\n      \"addInteger-memory-arguments-intercept\": 1,\n      \"addInteger-memory-arguments-slope\": 1,\n      \"appendByteString-cpu-arguments-intercept\": 1000,\n      \"appendByteString-cpu-arguments-slope\": 571,\n      \"appendByteString-memory-arguments-intercept\": 0,\n      \"appendByteString-memory-arguments-slope\": 1,\n      \"appendString-cpu-arguments-intercept\": 1000,\n      \"appendString-cpu-arguments-slope\": 24177,\n      \"appendString-memory-arguments-intercept\": 4,\n      \"appendString-memory-arguments-slope\": 1,\n      \"bData-cpu-arguments\": 1000,\n      \"bData-memory-arguments\": 32,\n      \"blake2b_256-cpu-arguments-intercept\": 117366,\n      \"blake2b_256-cpu-arguments-slope\": 10475,\n      \"blake2b_256-memory-arguments\": 4,\n      \"cekApplyCost-exBudgetCPU\": 23000,\n      \"cekApplyCost-exBudgetMemory\": 100,\n      \"cekBuiltinCost-exBudgetCPU\": 23000,\n      \"cekBuiltinCost-exBudgetMemory\": 100,\n      \"cekConstCost-exBudgetCPU\": 23000,\n      \"cekConstCost-exBudgetMemory\": 100,\n      \"cekDelayCost-exBudgetCPU\": 23000,\n      \"cekDelayCost-exBudgetMemory\": 100,\n      \"cekForceCost-exBudgetCPU\": 23000,\n      \"cekForceCost-exBudgetMemory\": 100,\n      \"cekLamCost-exBudgetCPU\": 23000,\n      \"cekLamCost-exBudgetMemory\": 100,\n      \"cekStartupCost-exBudgetCPU\": 100,\n      \"cekStartupCost-exBudgetMemory\": 100,\n      \"cekVarCost-exBudgetCPU\": 23000,\n      \"cekVarCost-exBudgetMemory\": 100,\n      \"chooseData-cpu-arguments\": 19537,\n      \"chooseData-memory-arguments\": 32,\n      \"chooseList-cpu-arguments\": 175354,\n      \"chooseList-memory-arguments\": 32,\n      \"chooseUnit-cpu-arguments\": 46417,\n      \"chooseUnit-memory-arguments\": 4,\n      \"consByteString-cpu-arguments-intercept\": 221973,\n      \"consByteString-cpu-arguments-slope\": 511,\n      \"consByteString-memory-arguments-intercept\": 0,\n      \"consByteString-memory-arguments-slope\": 1,\n      \"constrData-cpu-arguments\": 89141,\n      \"constrData-memory-arguments\": 32,\n      \"decodeUtf8-cpu-arguments-intercept\": 497525,\n      \"decodeUtf8-cpu-arguments-slope\": 14068,\n      \"decodeUtf8-memory-arguments-intercept\": 4,\n      \"decodeUtf8-memory-arguments-slope\": 2,\n      \"divideInteger-cpu-arguments-constant\": 196500,\n      \"divideInteger-cpu-arguments-model-arguments-intercept\": 453240,\n      \"divideInteger-cpu-arguments-model-arguments-slope\": 220,\n      \"divideInteger-memory-arguments-intercept\": 0,\n      \"divideInteger-memory-arguments-minimum\": 1,\n      \"divideInteger-memory-arguments-slope\": 1,\n      \"encodeUtf8-cpu-arguments-intercept\": 1000,\n      \"encodeUtf8-cpu-arguments-slope\": 28662,\n      \"encodeUtf8-memory-arguments-intercept\": 4,\n      \"encodeUtf8-memory-arguments-slope\": 2,\n      \"equalsByteString-cpu-arguments-constant\": 245000,\n      \"equalsByteString-cpu-arguments-intercept\": 216773,\n      \"equalsByteString-cpu-arguments-slope\": 62,\n      \"equalsByteString-memory-arguments\": 1,\n      \"equalsData-cpu-arguments-intercept\": 1060367,\n      \"equalsData-cpu-arguments-slope\": 12586,\n      \"equalsData-memory-arguments\": 1,\n      \"equalsInteger-cpu-arguments-intercept\": 208512,\n      \"equalsInteger-cpu-arguments-slope\": 421,\n      \"equalsInteger-memory-arguments\": 1,\n      \"equalsString-cpu-arguments-constant\": 187000,\n      \"equalsString-cpu-arguments-intercept\": 1000,\n      \"equalsString-cpu-arguments-slope\": 52998,\n      \"equalsString-memory-arguments\": 1,\n      \"fstPair-cpu-arguments\": 80436,\n      \"fstPair-memory-arguments\": 32,\n      \"headList-cpu-arguments\": 43249,\n      \"headList-memory-arguments\": 32,\n      \"iData-cpu-arguments\": 1000,\n      \"iData-memory-arguments\": 32,\n      \"ifThenElse-cpu-arguments\": 80556,\n      \"ifThenElse-memory-arguments\": 1,\n      \"indexByteString-cpu-arguments\": 57667,\n      \"indexByteString-memory-arguments\": 4,\n      \"lengthOfByteString-cpu-arguments\": 1000,\n      \"lengthOfByteString-memory-arguments\": 10,\n      \"lessThanByteString-cpu-arguments-intercept\": 197145,\n      \"lessThanByteString-cpu-arguments-slope\": 156,\n      \"lessThanByteString-memory-arguments\": 1,\n      \"lessThanEqualsByteString-cpu-arguments-intercept\": 197145,\n      \"lessThanEqualsByteString-cpu-arguments-slope\": 156,\n      \"lessThanEqualsByteString-memory-arguments\": 1,\n      \"lessThanEqualsInteger-cpu-arguments-intercept\": 204924,\n      \"lessThanEqualsInteger-cpu-arguments-slope\": 473,\n      \"lessThanEqualsInteger-memory-arguments\": 1,\n      \"lessThanInteger-cpu-arguments-intercept\": 208896,\n      \"lessThanInteger-cpu-arguments-slope\": 511,\n      \"lessThanInteger-memory-arguments\": 1,\n      \"listData-cpu-arguments\": 52467,\n      \"listData-memory-arguments\": 32,\n      \"mapData-cpu-arguments\": 64832,\n      \"mapData-memory-arguments\": 32,\n      \"mkCons-cpu-arguments\": 65493,\n      \"mkCons-memory-arguments\": 32,\n      \"mkNilData-cpu-arguments\": 22558,\n      \"mkNilData-memory-arguments\": 32,\n      \"mkNilPairData-cpu-arguments\": 16563,\n      \"mkNilPairData-memory-arguments\": 32,\n      \"mkPairData-cpu-arguments\": 76511,\n      \"mkPairData-memory-arguments\": 32,\n      \"modInteger-cpu-arguments-constant\": 196500,\n      \"modInteger-cpu-arguments-model-arguments-intercept\": 453240,\n      \"modInteger-cpu-arguments-model-arguments-slope\": 220,\n      \"modInteger-memory-arguments-intercept\": 0,\n      \"modInteger-memory-arguments-minimum\": 1,\n      \"modInteger-memory-arguments-slope\": 1,\n      \"multiplyInteger-cpu-arguments-intercept\": 69522,\n      \"multiplyInteger-cpu-arguments-slope\": 11687,\n      \"multiplyInteger-memory-arguments-intercept\": 0,\n      \"multiplyInteger-memory-arguments-slope\": 1,\n      \"nullList-cpu-arguments\": 60091,\n      \"nullList-memory-arguments\": 32,\n      \"quotientInteger-cpu-arguments-constant\": 196500,\n      \"quotientInteger-cpu-arguments-model-arguments-intercept\": 453240,\n      \"quotientInteger-cpu-arguments-model-arguments-slope\": 220,\n      \"quotientInteger-memory-arguments-intercept\": 0,\n      \"quotientInteger-memory-arguments-minimum\": 1,\n      \"quotientInteger-memory-arguments-slope\": 1,\n      \"remainderInteger-cpu-arguments-constant\": 196500,\n      \"remainderInteger-cpu-arguments-model-arguments-intercept\": 453240,\n      \"remainderInteger-cpu-arguments-model-arguments-slope\": 220,\n      \"remainderInteger-memory-arguments-intercept\": 0,\n      \"remainderInteger-memory-arguments-minimum\": 1,\n      \"remainderInteger-memory-arguments-slope\": 1,\n      \"sha2_256-cpu-arguments-intercept\": 806990,\n      \"sha2_256-cpu-arguments-slope\": 30482,\n      \"sha2_256-memory-arguments\": 4,\n      \"sha3_256-cpu-arguments-intercept\": 1927926,\n      \"sha3_256-cpu-arguments-slope\": 82523,\n      \"sha3_256-memory-arguments\": 4,\n      \"sliceByteString-cpu-arguments-intercept\": 265318,\n      \"sliceByteString-cpu-arguments-slope\": 0,\n      \"sliceByteString-memory-arguments-intercept\": 4,\n      \"sliceByteString-memory-arguments-slope\": 0,\n      \"sndPair-cpu-arguments\": 85931,\n      \"sndPair-memory-arguments\": 32,\n      \"subtractInteger-cpu-arguments-intercept\": 205665,\n      \"subtractInteger-cpu-arguments-slope\": 812,\n      \"subtractInteger-memory-arguments-intercept\": 1,\n      \"subtractInteger-memory-arguments-slope\": 1,\n      \"tailList-cpu-arguments\": 41182,\n      \"tailList-memory-arguments\": 32,\n      \"trace-cpu-arguments\": 212342,\n      \"trace-memory-arguments\": 32,\n      \"unBData-cpu-arguments\": 31220,\n      \"unBData-memory-arguments\": 32,\n      \"unConstrData-cpu-arguments\": 32696,\n      \"unConstrData-memory-arguments\": 32,\n      \"unIData-cpu-arguments\": 43357,\n      \"unIData-memory-arguments\": 32,\n      \"unListData-cpu-arguments\": 32247,\n      \"unListData-memory-arguments\": 32,\n      \"unMapData-cpu-arguments\": 38314,\n      \"unMapData-memory-arguments\": 32,\n      \"verifyEd25519Signature-cpu-arguments-intercept\": 9462713,\n      \"verifyEd25519Signature-cpu-arguments-slope\": 1021,\n      \"verifyEd25519Signature-memory-arguments\": 10,\n    },\n    PlutusV2: {\n      \"addInteger-cpu-arguments-intercept\": 205665,\n      \"addInteger-cpu-arguments-slope\": 812,\n      \"addInteger-memory-arguments-intercept\": 1,\n      \"addInteger-memory-arguments-slope\": 1,\n      \"appendByteString-cpu-arguments-intercept\": 1000,\n      \"appendByteString-cpu-arguments-slope\": 571,\n      \"appendByteString-memory-arguments-intercept\": 0,\n      \"appendByteString-memory-arguments-slope\": 1,\n      \"appendString-cpu-arguments-intercept\": 1000,\n      \"appendString-cpu-arguments-slope\": 24177,\n      \"appendString-memory-arguments-intercept\": 4,\n      \"appendString-memory-arguments-slope\": 1,\n      \"bData-cpu-arguments\": 1000,\n      \"bData-memory-arguments\": 32,\n      \"blake2b_256-cpu-arguments-intercept\": 117366,\n      \"blake2b_256-cpu-arguments-slope\": 10475,\n      \"blake2b_256-memory-arguments\": 4,\n      \"cekApplyCost-exBudgetCPU\": 23000,\n      \"cekApplyCost-exBudgetMemory\": 100,\n      \"cekBuiltinCost-exBudgetCPU\": 23000,\n      \"cekBuiltinCost-exBudgetMemory\": 100,\n      \"cekConstCost-exBudgetCPU\": 23000,\n      \"cekConstCost-exBudgetMemory\": 100,\n      \"cekDelayCost-exBudgetCPU\": 23000,\n      \"cekDelayCost-exBudgetMemory\": 100,\n      \"cekForceCost-exBudgetCPU\": 23000,\n      \"cekForceCost-exBudgetMemory\": 100,\n      \"cekLamCost-exBudgetCPU\": 23000,\n      \"cekLamCost-exBudgetMemory\": 100,\n      \"cekStartupCost-exBudgetCPU\": 100,\n      \"cekStartupCost-exBudgetMemory\": 100,\n      \"cekVarCost-exBudgetCPU\": 23000,\n      \"cekVarCost-exBudgetMemory\": 100,\n      \"chooseData-cpu-arguments\": 19537,\n      \"chooseData-memory-arguments\": 32,\n      \"chooseList-cpu-arguments\": 175354,\n      \"chooseList-memory-arguments\": 32,\n      \"chooseUnit-cpu-arguments\": 46417,\n      \"chooseUnit-memory-arguments\": 4,\n      \"consByteString-cpu-arguments-intercept\": 221973,\n      \"consByteString-cpu-arguments-slope\": 511,\n      \"consByteString-memory-arguments-intercept\": 0,\n      \"consByteString-memory-arguments-slope\": 1,\n      \"constrData-cpu-arguments\": 89141,\n      \"constrData-memory-arguments\": 32,\n      \"decodeUtf8-cpu-arguments-intercept\": 497525,\n      \"decodeUtf8-cpu-arguments-slope\": 14068,\n      \"decodeUtf8-memory-arguments-intercept\": 4,\n      \"decodeUtf8-memory-arguments-slope\": 2,\n      \"divideInteger-cpu-arguments-constant\": 196500,\n      \"divideInteger-cpu-arguments-model-arguments-intercept\": 453240,\n      \"divideInteger-cpu-arguments-model-arguments-slope\": 220,\n      \"divideInteger-memory-arguments-intercept\": 0,\n      \"divideInteger-memory-arguments-minimum\": 1,\n      \"divideInteger-memory-arguments-slope\": 1,\n      \"encodeUtf8-cpu-arguments-intercept\": 1000,\n      \"encodeUtf8-cpu-arguments-slope\": 28662,\n      \"encodeUtf8-memory-arguments-intercept\": 4,\n      \"encodeUtf8-memory-arguments-slope\": 2,\n      \"equalsByteString-cpu-arguments-constant\": 245000,\n      \"equalsByteString-cpu-arguments-intercept\": 216773,\n      \"equalsByteString-cpu-arguments-slope\": 62,\n      \"equalsByteString-memory-arguments\": 1,\n      \"equalsData-cpu-arguments-intercept\": 1060367,\n      \"equalsData-cpu-arguments-slope\": 12586,\n      \"equalsData-memory-arguments\": 1,\n      \"equalsInteger-cpu-arguments-intercept\": 208512,\n      \"equalsInteger-cpu-arguments-slope\": 421,\n      \"equalsInteger-memory-arguments\": 1,\n      \"equalsString-cpu-arguments-constant\": 187000,\n      \"equalsString-cpu-arguments-intercept\": 1000,\n      \"equalsString-cpu-arguments-slope\": 52998,\n      \"equalsString-memory-arguments\": 1,\n      \"fstPair-cpu-arguments\": 80436,\n      \"fstPair-memory-arguments\": 32,\n      \"headList-cpu-arguments\": 43249,\n      \"headList-memory-arguments\": 32,\n      \"iData-cpu-arguments\": 1000,\n      \"iData-memory-arguments\": 32,\n      \"ifThenElse-cpu-arguments\": 80556,\n      \"ifThenElse-memory-arguments\": 1,\n      \"indexByteString-cpu-arguments\": 57667,\n      \"indexByteString-memory-arguments\": 4,\n      \"lengthOfByteString-cpu-arguments\": 1000,\n      \"lengthOfByteString-memory-arguments\": 10,\n      \"lessThanByteString-cpu-arguments-intercept\": 197145,\n      \"lessThanByteString-cpu-arguments-slope\": 156,\n      \"lessThanByteString-memory-arguments\": 1,\n      \"lessThanEqualsByteString-cpu-arguments-intercept\": 197145,\n      \"lessThanEqualsByteString-cpu-arguments-slope\": 156,\n      \"lessThanEqualsByteString-memory-arguments\": 1,\n      \"lessThanEqualsInteger-cpu-arguments-intercept\": 204924,\n      \"lessThanEqualsInteger-cpu-arguments-slope\": 473,\n      \"lessThanEqualsInteger-memory-arguments\": 1,\n      \"lessThanInteger-cpu-arguments-intercept\": 208896,\n      \"lessThanInteger-cpu-arguments-slope\": 511,\n      \"lessThanInteger-memory-arguments\": 1,\n      \"listData-cpu-arguments\": 52467,\n      \"listData-memory-arguments\": 32,\n      \"mapData-cpu-arguments\": 64832,\n      \"mapData-memory-arguments\": 32,\n      \"mkCons-cpu-arguments\": 65493,\n      \"mkCons-memory-arguments\": 32,\n      \"mkNilData-cpu-arguments\": 22558,\n      \"mkNilData-memory-arguments\": 32,\n      \"mkNilPairData-cpu-arguments\": 16563,\n      \"mkNilPairData-memory-arguments\": 32,\n      \"mkPairData-cpu-arguments\": 76511,\n      \"mkPairData-memory-arguments\": 32,\n      \"modInteger-cpu-arguments-constant\": 196500,\n      \"modInteger-cpu-arguments-model-arguments-intercept\": 453240,\n      \"modInteger-cpu-arguments-model-arguments-slope\": 220,\n      \"modInteger-memory-arguments-intercept\": 0,\n      \"modInteger-memory-arguments-minimum\": 1,\n      \"modInteger-memory-arguments-slope\": 1,\n      \"multiplyInteger-cpu-arguments-intercept\": 69522,\n      \"multiplyInteger-cpu-arguments-slope\": 11687,\n      \"multiplyInteger-memory-arguments-intercept\": 0,\n      \"multiplyInteger-memory-arguments-slope\": 1,\n      \"nullList-cpu-arguments\": 60091,\n      \"nullList-memory-arguments\": 32,\n      \"quotientInteger-cpu-arguments-constant\": 196500,\n      \"quotientInteger-cpu-arguments-model-arguments-intercept\": 453240,\n      \"quotientInteger-cpu-arguments-model-arguments-slope\": 220,\n      \"quotientInteger-memory-arguments-intercept\": 0,\n      \"quotientInteger-memory-arguments-minimum\": 1,\n      \"quotientInteger-memory-arguments-slope\": 1,\n      \"remainderInteger-cpu-arguments-constant\": 196500,\n      \"remainderInteger-cpu-arguments-model-arguments-intercept\": 453240,\n      \"remainderInteger-cpu-arguments-model-arguments-slope\": 220,\n      \"remainderInteger-memory-arguments-intercept\": 0,\n      \"remainderInteger-memory-arguments-minimum\": 1,\n      \"remainderInteger-memory-arguments-slope\": 1,\n      \"serialiseData-cpu-arguments-intercept\": 1159724,\n      \"serialiseData-cpu-arguments-slope\": 392670,\n      \"serialiseData-memory-arguments-intercept\": 0,\n      \"serialiseData-memory-arguments-slope\": 2,\n      \"sha2_256-cpu-arguments-intercept\": 806990,\n      \"sha2_256-cpu-arguments-slope\": 30482,\n      \"sha2_256-memory-arguments\": 4,\n      \"sha3_256-cpu-arguments-intercept\": 1927926,\n      \"sha3_256-cpu-arguments-slope\": 82523,\n      \"sha3_256-memory-arguments\": 4,\n      \"sliceByteString-cpu-arguments-intercept\": 265318,\n      \"sliceByteString-cpu-arguments-slope\": 0,\n      \"sliceByteString-memory-arguments-intercept\": 4,\n      \"sliceByteString-memory-arguments-slope\": 0,\n      \"sndPair-cpu-arguments\": 85931,\n      \"sndPair-memory-arguments\": 32,\n      \"subtractInteger-cpu-arguments-intercept\": 205665,\n      \"subtractInteger-cpu-arguments-slope\": 812,\n      \"subtractInteger-memory-arguments-intercept\": 1,\n      \"subtractInteger-memory-arguments-slope\": 1,\n      \"tailList-cpu-arguments\": 41182,\n      \"tailList-memory-arguments\": 32,\n      \"trace-cpu-arguments\": 212342,\n      \"trace-memory-arguments\": 32,\n      \"unBData-cpu-arguments\": 31220,\n      \"unBData-memory-arguments\": 32,\n      \"unConstrData-cpu-arguments\": 32696,\n      \"unConstrData-memory-arguments\": 32,\n      \"unIData-cpu-arguments\": 43357,\n      \"unIData-memory-arguments\": 32,\n      \"unListData-cpu-arguments\": 32247,\n      \"unListData-memory-arguments\": 32,\n      \"unMapData-cpu-arguments\": 38314,\n      \"unMapData-memory-arguments\": 32,\n      \"verifyEcdsaSecp256k1Signature-cpu-arguments\": 35892428,\n      \"verifyEcdsaSecp256k1Signature-memory-arguments\": 10,\n      \"verifyEd25519Signature-cpu-arguments-intercept\": 57996947,\n      \"verifyEd25519Signature-cpu-arguments-slope\": 18975,\n      \"verifyEd25519Signature-memory-arguments\": 10,\n      \"verifySchnorrSecp256k1Signature-cpu-arguments-intercept\": 38887044,\n      \"verifySchnorrSecp256k1Signature-cpu-arguments-slope\": 32947,\n      \"verifySchnorrSecp256k1Signature-memory-arguments\": 10,\n    },\n  },\n};\n\nexport const costModelKeys = {\n  PlutusV1: [\n    \"addInteger-cpu-arguments-intercept\",\n    \"addInteger-cpu-arguments-slope\",\n    \"addInteger-memory-arguments-intercept\",\n    \"addInteger-memory-arguments-slope\",\n    \"appendByteString-cpu-arguments-intercept\",\n    \"appendByteString-cpu-arguments-slope\",\n    \"appendByteString-memory-arguments-intercept\",\n    \"appendByteString-memory-arguments-slope\",\n    \"appendString-cpu-arguments-intercept\",\n    \"appendString-cpu-arguments-slope\",\n    \"appendString-memory-arguments-intercept\",\n    \"appendString-memory-arguments-slope\",\n    \"bData-cpu-arguments\",\n    \"bData-memory-arguments\",\n    \"blake2b_256-cpu-arguments-intercept\",\n    \"blake2b_256-cpu-arguments-slope\",\n    \"blake2b_256-memory-arguments\",\n    \"cekApplyCost-exBudgetCPU\",\n    \"cekApplyCost-exBudgetMemory\",\n    \"cekBuiltinCost-exBudgetCPU\",\n    \"cekBuiltinCost-exBudgetMemory\",\n    \"cekConstCost-exBudgetCPU\",\n    \"cekConstCost-exBudgetMemory\",\n    \"cekDelayCost-exBudgetCPU\",\n    \"cekDelayCost-exBudgetMemory\",\n    \"cekForceCost-exBudgetCPU\",\n    \"cekForceCost-exBudgetMemory\",\n    \"cekLamCost-exBudgetCPU\",\n    \"cekLamCost-exBudgetMemory\",\n    \"cekStartupCost-exBudgetCPU\",\n    \"cekStartupCost-exBudgetMemory\",\n    \"cekVarCost-exBudgetCPU\",\n    \"cekVarCost-exBudgetMemory\",\n    \"chooseData-cpu-arguments\",\n    \"chooseData-memory-arguments\",\n    \"chooseList-cpu-arguments\",\n    \"chooseList-memory-arguments\",\n    \"chooseUnit-cpu-arguments\",\n    \"chooseUnit-memory-arguments\",\n    \"consByteString-cpu-arguments-intercept\",\n    \"consByteString-cpu-arguments-slope\",\n    \"consByteString-memory-arguments-intercept\",\n    \"consByteString-memory-arguments-slope\",\n    \"constrData-cpu-arguments\",\n    \"constrData-memory-arguments\",\n    \"decodeUtf8-cpu-arguments-intercept\",\n    \"decodeUtf8-cpu-arguments-slope\",\n    \"decodeUtf8-memory-arguments-intercept\",\n    \"decodeUtf8-memory-arguments-slope\",\n    \"divideInteger-cpu-arguments-constant\",\n    \"divideInteger-cpu-arguments-model-arguments-intercept\",\n    \"divideInteger-cpu-arguments-model-arguments-slope\",\n    \"divideInteger-memory-arguments-intercept\",\n    \"divideInteger-memory-arguments-minimum\",\n    \"divideInteger-memory-arguments-slope\",\n    \"encodeUtf8-cpu-arguments-intercept\",\n    \"encodeUtf8-cpu-arguments-slope\",\n    \"encodeUtf8-memory-arguments-intercept\",\n    \"encodeUtf8-memory-arguments-slope\",\n    \"equalsByteString-cpu-arguments-constant\",\n    \"equalsByteString-cpu-arguments-intercept\",\n    \"equalsByteString-cpu-arguments-slope\",\n    \"equalsByteString-memory-arguments\",\n    \"equalsData-cpu-arguments-intercept\",\n    \"equalsData-cpu-arguments-slope\",\n    \"equalsData-memory-arguments\",\n    \"equalsInteger-cpu-arguments-intercept\",\n    \"equalsInteger-cpu-arguments-slope\",\n    \"equalsInteger-memory-arguments\",\n    \"equalsString-cpu-arguments-constant\",\n    \"equalsString-cpu-arguments-intercept\",\n    \"equalsString-cpu-arguments-slope\",\n    \"equalsString-memory-arguments\",\n    \"fstPair-cpu-arguments\",\n    \"fstPair-memory-arguments\",\n    \"headList-cpu-arguments\",\n    \"headList-memory-arguments\",\n    \"iData-cpu-arguments\",\n    \"iData-memory-arguments\",\n    \"ifThenElse-cpu-arguments\",\n    \"ifThenElse-memory-arguments\",\n    \"indexByteString-cpu-arguments\",\n    \"indexByteString-memory-arguments\",\n    \"lengthOfByteString-cpu-arguments\",\n    \"lengthOfByteString-memory-arguments\",\n    \"lessThanByteString-cpu-arguments-intercept\",\n    \"lessThanByteString-cpu-arguments-slope\",\n    \"lessThanByteString-memory-arguments\",\n    \"lessThanEqualsByteString-cpu-arguments-intercept\",\n    \"lessThanEqualsByteString-cpu-arguments-slope\",\n    \"lessThanEqualsByteString-memory-arguments\",\n    \"lessThanEqualsInteger-cpu-arguments-intercept\",\n    \"lessThanEqualsInteger-cpu-arguments-slope\",\n    \"lessThanEqualsInteger-memory-arguments\",\n    \"lessThanInteger-cpu-arguments-intercept\",\n    \"lessThanInteger-cpu-arguments-slope\",\n    \"lessThanInteger-memory-arguments\",\n    \"listData-cpu-arguments\",\n    \"listData-memory-arguments\",\n    \"mapData-cpu-arguments\",\n    \"mapData-memory-arguments\",\n    \"mkCons-cpu-arguments\",\n    \"mkCons-memory-arguments\",\n    \"mkNilData-cpu-arguments\",\n    \"mkNilData-memory-arguments\",\n    \"mkNilPairData-cpu-arguments\",\n    \"mkNilPairData-memory-arguments\",\n    \"mkPairData-cpu-arguments\",\n    \"mkPairData-memory-arguments\",\n    \"modInteger-cpu-arguments-constant\",\n    \"modInteger-cpu-arguments-model-arguments-intercept\",\n    \"modInteger-cpu-arguments-model-arguments-slope\",\n    \"modInteger-memory-arguments-intercept\",\n    \"modInteger-memory-arguments-minimum\",\n    \"modInteger-memory-arguments-slope\",\n    \"multiplyInteger-cpu-arguments-intercept\",\n    \"multiplyInteger-cpu-arguments-slope\",\n    \"multiplyInteger-memory-arguments-intercept\",\n    \"multiplyInteger-memory-arguments-slope\",\n    \"nullList-cpu-arguments\",\n    \"nullList-memory-arguments\",\n    \"quotientInteger-cpu-arguments-constant\",\n    \"quotientInteger-cpu-arguments-model-arguments-intercept\",\n    \"quotientInteger-cpu-arguments-model-arguments-slope\",\n    \"quotientInteger-memory-arguments-intercept\",\n    \"quotientInteger-memory-arguments-minimum\",\n    \"quotientInteger-memory-arguments-slope\",\n    \"remainderInteger-cpu-arguments-constant\",\n    \"remainderInteger-cpu-arguments-model-arguments-intercept\",\n    \"remainderInteger-cpu-arguments-model-arguments-slope\",\n    \"remainderInteger-memory-arguments-intercept\",\n    \"remainderInteger-memory-arguments-minimum\",\n    \"remainderInteger-memory-arguments-slope\",\n    \"sha2_256-cpu-arguments-intercept\",\n    \"sha2_256-cpu-arguments-slope\",\n    \"sha2_256-memory-arguments\",\n    \"sha3_256-cpu-arguments-intercept\",\n    \"sha3_256-cpu-arguments-slope\",\n    \"sha3_256-memory-arguments\",\n    \"sliceByteString-cpu-arguments-intercept\",\n    \"sliceByteString-cpu-arguments-slope\",\n    \"sliceByteString-memory-arguments-intercept\",\n    \"sliceByteString-memory-arguments-slope\",\n    \"sndPair-cpu-arguments\",\n    \"sndPair-memory-arguments\",\n    \"subtractInteger-cpu-arguments-intercept\",\n    \"subtractInteger-cpu-arguments-slope\",\n    \"subtractInteger-memory-arguments-intercept\",\n    \"subtractInteger-memory-arguments-slope\",\n    \"tailList-cpu-arguments\",\n    \"tailList-memory-arguments\",\n    \"trace-cpu-arguments\",\n    \"trace-memory-arguments\",\n    \"unBData-cpu-arguments\",\n    \"unBData-memory-arguments\",\n    \"unConstrData-cpu-arguments\",\n    \"unConstrData-memory-arguments\",\n    \"unIData-cpu-arguments\",\n    \"unIData-memory-arguments\",\n    \"unListData-cpu-arguments\",\n    \"unListData-memory-arguments\",\n    \"unMapData-cpu-arguments\",\n    \"unMapData-memory-arguments\",\n    \"verifyEd25519Signature-cpu-arguments-intercept\",\n    \"verifyEd25519Signature-cpu-arguments-slope\",\n    \"verifyEd25519Signature-memory-arguments\",\n  ],\n  PlutusV2: [\n    \"addInteger-cpu-arguments-intercept\",\n    \"addInteger-cpu-arguments-slope\",\n    \"addInteger-memory-arguments-intercept\",\n    \"addInteger-memory-arguments-slope\",\n    \"appendByteString-cpu-arguments-intercept\",\n    \"appendByteString-cpu-arguments-slope\",\n    \"appendByteString-memory-arguments-intercept\",\n    \"appendByteString-memory-arguments-slope\",\n    \"appendString-cpu-arguments-intercept\",\n    \"appendString-cpu-arguments-slope\",\n    \"appendString-memory-arguments-intercept\",\n    \"appendString-memory-arguments-slope\",\n    \"bData-cpu-arguments\",\n    \"bData-memory-arguments\",\n    \"blake2b_256-cpu-arguments-intercept\",\n    \"blake2b_256-cpu-arguments-slope\",\n    \"blake2b_256-memory-arguments\",\n    \"cekApplyCost-exBudgetCPU\",\n    \"cekApplyCost-exBudgetMemory\",\n    \"cekBuiltinCost-exBudgetCPU\",\n    \"cekBuiltinCost-exBudgetMemory\",\n    \"cekConstCost-exBudgetCPU\",\n    \"cekConstCost-exBudgetMemory\",\n    \"cekDelayCost-exBudgetCPU\",\n    \"cekDelayCost-exBudgetMemory\",\n    \"cekForceCost-exBudgetCPU\",\n    \"cekForceCost-exBudgetMemory\",\n    \"cekLamCost-exBudgetCPU\",\n    \"cekLamCost-exBudgetMemory\",\n    \"cekStartupCost-exBudgetCPU\",\n    \"cekStartupCost-exBudgetMemory\",\n    \"cekVarCost-exBudgetCPU\",\n    \"cekVarCost-exBudgetMemory\",\n    \"chooseData-cpu-arguments\",\n    \"chooseData-memory-arguments\",\n    \"chooseList-cpu-arguments\",\n    \"chooseList-memory-arguments\",\n    \"chooseUnit-cpu-arguments\",\n    \"chooseUnit-memory-arguments\",\n    \"consByteString-cpu-arguments-intercept\",\n    \"consByteString-cpu-arguments-slope\",\n    \"consByteString-memory-arguments-intercept\",\n    \"consByteString-memory-arguments-slope\",\n    \"constrData-cpu-arguments\",\n    \"constrData-memory-arguments\",\n    \"decodeUtf8-cpu-arguments-intercept\",\n    \"decodeUtf8-cpu-arguments-slope\",\n    \"decodeUtf8-memory-arguments-intercept\",\n    \"decodeUtf8-memory-arguments-slope\",\n    \"divideInteger-cpu-arguments-constant\",\n    \"divideInteger-cpu-arguments-model-arguments-intercept\",\n    \"divideInteger-cpu-arguments-model-arguments-slope\",\n    \"divideInteger-memory-arguments-intercept\",\n    \"divideInteger-memory-arguments-minimum\",\n    \"divideInteger-memory-arguments-slope\",\n    \"encodeUtf8-cpu-arguments-intercept\",\n    \"encodeUtf8-cpu-arguments-slope\",\n    \"encodeUtf8-memory-arguments-intercept\",\n    \"encodeUtf8-memory-arguments-slope\",\n    \"equalsByteString-cpu-arguments-constant\",\n    \"equalsByteString-cpu-arguments-intercept\",\n    \"equalsByteString-cpu-arguments-slope\",\n    \"equalsByteString-memory-arguments\",\n    \"equalsData-cpu-arguments-intercept\",\n    \"equalsData-cpu-arguments-slope\",\n    \"equalsData-memory-arguments\",\n    \"equalsInteger-cpu-arguments-intercept\",\n    \"equalsInteger-cpu-arguments-slope\",\n    \"equalsInteger-memory-arguments\",\n    \"equalsString-cpu-arguments-constant\",\n    \"equalsString-cpu-arguments-intercept\",\n    \"equalsString-cpu-arguments-slope\",\n    \"equalsString-memory-arguments\",\n    \"fstPair-cpu-arguments\",\n    \"fstPair-memory-arguments\",\n    \"headList-cpu-arguments\",\n    \"headList-memory-arguments\",\n    \"iData-cpu-arguments\",\n    \"iData-memory-arguments\",\n    \"ifThenElse-cpu-arguments\",\n    \"ifThenElse-memory-arguments\",\n    \"indexByteString-cpu-arguments\",\n    \"indexByteString-memory-arguments\",\n    \"lengthOfByteString-cpu-arguments\",\n    \"lengthOfByteString-memory-arguments\",\n    \"lessThanByteString-cpu-arguments-intercept\",\n    \"lessThanByteString-cpu-arguments-slope\",\n    \"lessThanByteString-memory-arguments\",\n    \"lessThanEqualsByteString-cpu-arguments-intercept\",\n    \"lessThanEqualsByteString-cpu-arguments-slope\",\n    \"lessThanEqualsByteString-memory-arguments\",\n    \"lessThanEqualsInteger-cpu-arguments-intercept\",\n    \"lessThanEqualsInteger-cpu-arguments-slope\",\n    \"lessThanEqualsInteger-memory-arguments\",\n    \"lessThanInteger-cpu-arguments-intercept\",\n    \"lessThanInteger-cpu-arguments-slope\",\n    \"lessThanInteger-memory-arguments\",\n    \"listData-cpu-arguments\",\n    \"listData-memory-arguments\",\n    \"mapData-cpu-arguments\",\n    \"mapData-memory-arguments\",\n    \"mkCons-cpu-arguments\",\n    \"mkCons-memory-arguments\",\n    \"mkNilData-cpu-arguments\",\n    \"mkNilData-memory-arguments\",\n    \"mkNilPairData-cpu-arguments\",\n    \"mkNilPairData-memory-arguments\",\n    \"mkPairData-cpu-arguments\",\n    \"mkPairData-memory-arguments\",\n    \"modInteger-cpu-arguments-constant\",\n    \"modInteger-cpu-arguments-model-arguments-intercept\",\n    \"modInteger-cpu-arguments-model-arguments-slope\",\n    \"modInteger-memory-arguments-intercept\",\n    \"modInteger-memory-arguments-minimum\",\n    \"modInteger-memory-arguments-slope\",\n    \"multiplyInteger-cpu-arguments-intercept\",\n    \"multiplyInteger-cpu-arguments-slope\",\n    \"multiplyInteger-memory-arguments-intercept\",\n    \"multiplyInteger-memory-arguments-slope\",\n    \"nullList-cpu-arguments\",\n    \"nullList-memory-arguments\",\n    \"quotientInteger-cpu-arguments-constant\",\n    \"quotientInteger-cpu-arguments-model-arguments-intercept\",\n    \"quotientInteger-cpu-arguments-model-arguments-slope\",\n    \"quotientInteger-memory-arguments-intercept\",\n    \"quotientInteger-memory-arguments-minimum\",\n    \"quotientInteger-memory-arguments-slope\",\n    \"remainderInteger-cpu-arguments-constant\",\n    \"remainderInteger-cpu-arguments-model-arguments-intercept\",\n    \"remainderInteger-cpu-arguments-model-arguments-slope\",\n    \"remainderInteger-memory-arguments-intercept\",\n    \"remainderInteger-memory-arguments-minimum\",\n    \"remainderInteger-memory-arguments-slope\",\n    \"serialiseData-cpu-arguments-intercept\",\n    \"serialiseData-cpu-arguments-slope\",\n    \"serialiseData-memory-arguments-intercept\",\n    \"serialiseData-memory-arguments-slope\",\n    \"sha2_256-cpu-arguments-intercept\",\n    \"sha2_256-cpu-arguments-slope\",\n    \"sha2_256-memory-arguments\",\n    \"sha3_256-cpu-arguments-intercept\",\n    \"sha3_256-cpu-arguments-slope\",\n    \"sha3_256-memory-arguments\",\n    \"sliceByteString-cpu-arguments-intercept\",\n    \"sliceByteString-cpu-arguments-slope\",\n    \"sliceByteString-memory-arguments-intercept\",\n    \"sliceByteString-memory-arguments-slope\",\n    \"sndPair-cpu-arguments\",\n    \"sndPair-memory-arguments\",\n    \"subtractInteger-cpu-arguments-intercept\",\n    \"subtractInteger-cpu-arguments-slope\",\n    \"subtractInteger-memory-arguments-intercept\",\n    \"subtractInteger-memory-arguments-slope\",\n    \"tailList-cpu-arguments\",\n    \"tailList-memory-arguments\",\n    \"trace-cpu-arguments\",\n    \"trace-memory-arguments\",\n    \"unBData-cpu-arguments\",\n    \"unBData-memory-arguments\",\n    \"unConstrData-cpu-arguments\",\n    \"unConstrData-memory-arguments\",\n    \"unIData-cpu-arguments\",\n    \"unIData-memory-arguments\",\n    \"unListData-cpu-arguments\",\n    \"unListData-memory-arguments\",\n    \"unMapData-cpu-arguments\",\n    \"unMapData-memory-arguments\",\n    \"verifyEcdsaSecp256k1Signature-cpu-arguments\",\n    \"verifyEcdsaSecp256k1Signature-memory-arguments\",\n    \"verifyEd25519Signature-cpu-arguments-intercept\",\n    \"verifyEd25519Signature-cpu-arguments-slope\",\n    \"verifyEd25519Signature-memory-arguments\",\n    \"verifySchnorrSecp256k1Signature-cpu-arguments-intercept\",\n    \"verifySchnorrSecp256k1Signature-cpu-arguments-slope\",\n    \"verifySchnorrSecp256k1Signature-memory-arguments\",\n  ],\n};\n","// This is a partial reimplementation of BIP39 in Deno: https://github.com/bitcoinjs/bip39\n// We only use the default Wordlist (english)\nimport { toHex } from \"../utils/mod.ts\";\nimport sha256 from \"sha256\";\n\nconst INVALID_MNEMONIC = \"Invalid mnemonic\";\nconst INVALID_ENTROPY = \"Invalid entropy\";\nconst INVALID_CHECKSUM = \"Invalid mnemonic checksum\";\nconst WORDLIST_REQUIRED =\n  \"A wordlist is required but a default could not be found.\\n\" +\n  \"Please pass a 2048 word array explicitly.\";\n\nexport function mnemonicToEntropy(\n  mnemonic: string,\n  wordlist?: Array<string>,\n): string {\n  wordlist = wordlist || DEFAULT_WORDLIST;\n  if (!wordlist) {\n    throw new Error(WORDLIST_REQUIRED);\n  }\n  const words = normalize(mnemonic).split(\" \");\n  if (words.length % 3 !== 0) {\n    throw new Error(INVALID_MNEMONIC);\n  }\n  // convert word indices to 11 bit binary strings\n  const bits = words\n    .map((word) => {\n      const index = wordlist!.indexOf(word);\n      if (index === -1) {\n        throw new Error(INVALID_MNEMONIC);\n      }\n      return lpad(index.toString(2), \"0\", 11);\n    })\n    .join(\"\");\n  // split the binary string into ENT/CS\n  const dividerIndex = Math.floor(bits.length / 33) * 32;\n  const entropyBits = bits.slice(0, dividerIndex);\n  const checksumBits = bits.slice(dividerIndex);\n  // calculate the checksum and compare\n  const entropyBytes = entropyBits.match(/(.{1,8})/g)!.map(binaryToByte);\n  if (entropyBytes.length < 16) {\n    throw new Error(INVALID_ENTROPY);\n  }\n  if (entropyBytes.length > 32) {\n    throw new Error(INVALID_ENTROPY);\n  }\n  if (entropyBytes.length % 4 !== 0) {\n    throw new Error(INVALID_ENTROPY);\n  }\n  const entropy = new Uint8Array(entropyBytes);\n  const newChecksum = deriveChecksumBits(entropy);\n  if (newChecksum !== checksumBits) {\n    throw new Error(INVALID_CHECKSUM);\n  }\n  return toHex(entropy);\n}\n\nfunction randomBytes(size: number): Uint8Array {\n  // reimplementation of: https://github.com/crypto-browserify/randombytes/blob/master/browser.js\n  const MAX_UINT32 = 4294967295;\n  const MAX_BYTES = 65536;\n  const bytes = new Uint8Array(size);\n\n  if (size > MAX_UINT32) {\n    throw new RangeError(\"requested too many random bytes\");\n  }\n\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      // this is the max bytes crypto.getRandomValues\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n      for (let generated = 0; generated < size; generated += MAX_BYTES) {\n        // buffer.slice automatically checks if the end is past the end of\n        // the buffer so we don't have to here\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));\n      }\n    } else {\n      crypto.getRandomValues(bytes);\n    }\n  }\n\n  return bytes;\n}\n\nexport function generateMnemonic(\n  strength: number,\n  rng?: (size: number) => Uint8Array,\n  wordlist?: Array<string>,\n): string {\n  strength = strength || 128;\n  if (strength % 32 !== 0) {\n    throw new TypeError(INVALID_ENTROPY);\n  }\n\n  rng = rng || randomBytes;\n  return entropyToMnemonic(rng(strength / 8), wordlist);\n}\n\nfunction entropyToMnemonic(\n  entropy: Uint8Array,\n  wordlist?: Array<string>,\n): string {\n  wordlist = wordlist || DEFAULT_WORDLIST;\n  if (!wordlist) {\n    throw new Error(WORDLIST_REQUIRED);\n  }\n  // 128 <= ENT <= 256\n  if (entropy.length < 16) {\n    throw new TypeError(INVALID_ENTROPY);\n  }\n  if (entropy.length > 32) {\n    throw new TypeError(INVALID_ENTROPY);\n  }\n  if (entropy.length % 4 !== 0) {\n    throw new TypeError(INVALID_ENTROPY);\n  }\n  const entropyBits = bytesToBinary(Array.from(entropy));\n  const checksumBits = deriveChecksumBits(entropy);\n  const bits = entropyBits + checksumBits;\n  const chunks = bits.match(/(.{1,11})/g);\n  const words = chunks!.map((binary) => {\n    const index = binaryToByte(binary);\n    return wordlist![index];\n  });\n  return wordlist[0] === \"\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093\" // Japanese wordlist\n    ? words.join(\"\\u3000\")\n    : words.join(\" \");\n}\n\nfunction deriveChecksumBits(entropyBuffer: Uint8Array): string {\n  const ENT = entropyBuffer.length * 8;\n  const CS = ENT / 32;\n  const hash = sha256(Array.from(entropyBuffer), { asBytes: true });\n  return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\n\nfunction lpad(str: string, padString: string, length: number): string {\n  while (str.length < length) {\n    str = padString + str;\n  }\n  return str;\n}\n\nfunction bytesToBinary(bytes: Array<number>): string {\n  return bytes.map((x) => lpad(x.toString(2), \"0\", 8)).join(\"\");\n}\n\nfunction normalize(str: string): string {\n  return (str || \"\").normalize(\"NFKD\");\n}\n\nfunction binaryToByte(bin: string): number {\n  return parseInt(bin, 2);\n}\n\nconst DEFAULT_WORDLIST = [\n  \"abandon\",\n  \"ability\",\n  \"able\",\n  \"about\",\n  \"above\",\n  \"absent\",\n  \"absorb\",\n  \"abstract\",\n  \"absurd\",\n  \"abuse\",\n  \"access\",\n  \"accident\",\n  \"account\",\n  \"accuse\",\n  \"achieve\",\n  \"acid\",\n  \"acoustic\",\n  \"acquire\",\n  \"across\",\n  \"act\",\n  \"action\",\n  \"actor\",\n  \"actress\",\n  \"actual\",\n  \"adapt\",\n  \"add\",\n  \"addict\",\n  \"address\",\n  \"adjust\",\n  \"admit\",\n  \"adult\",\n  \"advance\",\n  \"advice\",\n  \"aerobic\",\n  \"affair\",\n  \"afford\",\n  \"afraid\",\n  \"again\",\n  \"age\",\n  \"agent\",\n  \"agree\",\n  \"ahead\",\n  \"aim\",\n  \"air\",\n  \"airport\",\n  \"aisle\",\n  \"alarm\",\n  \"album\",\n  \"alcohol\",\n  \"alert\",\n  \"alien\",\n  \"all\",\n  \"alley\",\n  \"allow\",\n  \"almost\",\n  \"alone\",\n  \"alpha\",\n  \"already\",\n  \"also\",\n  \"alter\",\n  \"always\",\n  \"amateur\",\n  \"amazing\",\n  \"among\",\n  \"amount\",\n  \"amused\",\n  \"analyst\",\n  \"anchor\",\n  \"ancient\",\n  \"anger\",\n  \"angle\",\n  \"angry\",\n  \"animal\",\n  \"ankle\",\n  \"announce\",\n  \"annual\",\n  \"another\",\n  \"answer\",\n  \"antenna\",\n  \"antique\",\n  \"anxiety\",\n  \"any\",\n  \"apart\",\n  \"apology\",\n  \"appear\",\n  \"apple\",\n  \"approve\",\n  \"april\",\n  \"arch\",\n  \"arctic\",\n  \"area\",\n  \"arena\",\n  \"argue\",\n  \"arm\",\n  \"armed\",\n  \"armor\",\n  \"army\",\n  \"around\",\n  \"arrange\",\n  \"arrest\",\n  \"arrive\",\n  \"arrow\",\n  \"art\",\n  \"artefact\",\n  \"artist\",\n  \"artwork\",\n  \"ask\",\n  \"aspect\",\n  \"assault\",\n  \"asset\",\n  \"assist\",\n  \"assume\",\n  \"asthma\",\n  \"athlete\",\n  \"atom\",\n  \"attack\",\n  \"attend\",\n  \"attitude\",\n  \"attract\",\n  \"auction\",\n  \"audit\",\n  \"august\",\n  \"aunt\",\n  \"author\",\n  \"auto\",\n  \"autumn\",\n  \"average\",\n  \"avocado\",\n  \"avoid\",\n  \"awake\",\n  \"aware\",\n  \"away\",\n  \"awesome\",\n  \"awful\",\n  \"awkward\",\n  \"axis\",\n  \"baby\",\n  \"bachelor\",\n  \"bacon\",\n  \"badge\",\n  \"bag\",\n  \"balance\",\n  \"balcony\",\n  \"ball\",\n  \"bamboo\",\n  \"banana\",\n  \"banner\",\n  \"bar\",\n  \"barely\",\n  \"bargain\",\n  \"barrel\",\n  \"base\",\n  \"basic\",\n  \"basket\",\n  \"battle\",\n  \"beach\",\n  \"bean\",\n  \"beauty\",\n  \"because\",\n  \"become\",\n  \"beef\",\n  \"before\",\n  \"begin\",\n  \"behave\",\n  \"behind\",\n  \"believe\",\n  \"below\",\n  \"belt\",\n  \"bench\",\n  \"benefit\",\n  \"best\",\n  \"betray\",\n  \"better\",\n  \"between\",\n  \"beyond\",\n  \"bicycle\",\n  \"bid\",\n  \"bike\",\n  \"bind\",\n  \"biology\",\n  \"bird\",\n  \"birth\",\n  \"bitter\",\n  \"black\",\n  \"blade\",\n  \"blame\",\n  \"blanket\",\n  \"blast\",\n  \"bleak\",\n  \"bless\",\n  \"blind\",\n  \"blood\",\n  \"blossom\",\n  \"blouse\",\n  \"blue\",\n  \"blur\",\n  \"blush\",\n  \"board\",\n  \"boat\",\n  \"body\",\n  \"boil\",\n  \"bomb\",\n  \"bone\",\n  \"bonus\",\n  \"book\",\n  \"boost\",\n  \"border\",\n  \"boring\",\n  \"borrow\",\n  \"boss\",\n  \"bottom\",\n  \"bounce\",\n  \"box\",\n  \"boy\",\n  \"bracket\",\n  \"brain\",\n  \"brand\",\n  \"brass\",\n  \"brave\",\n  \"bread\",\n  \"breeze\",\n  \"brick\",\n  \"bridge\",\n  \"brief\",\n  \"bright\",\n  \"bring\",\n  \"brisk\",\n  \"broccoli\",\n  \"broken\",\n  \"bronze\",\n  \"broom\",\n  \"brother\",\n  \"brown\",\n  \"brush\",\n  \"bubble\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"build\",\n  \"bulb\",\n  \"bulk\",\n  \"bullet\",\n  \"bundle\",\n  \"bunker\",\n  \"burden\",\n  \"burger\",\n  \"burst\",\n  \"bus\",\n  \"business\",\n  \"busy\",\n  \"butter\",\n  \"buyer\",\n  \"buzz\",\n  \"cabbage\",\n  \"cabin\",\n  \"cable\",\n  \"cactus\",\n  \"cage\",\n  \"cake\",\n  \"call\",\n  \"calm\",\n  \"camera\",\n  \"camp\",\n  \"can\",\n  \"canal\",\n  \"cancel\",\n  \"candy\",\n  \"cannon\",\n  \"canoe\",\n  \"canvas\",\n  \"canyon\",\n  \"capable\",\n  \"capital\",\n  \"captain\",\n  \"car\",\n  \"carbon\",\n  \"card\",\n  \"cargo\",\n  \"carpet\",\n  \"carry\",\n  \"cart\",\n  \"case\",\n  \"cash\",\n  \"casino\",\n  \"castle\",\n  \"casual\",\n  \"cat\",\n  \"catalog\",\n  \"catch\",\n  \"category\",\n  \"cattle\",\n  \"caught\",\n  \"cause\",\n  \"caution\",\n  \"cave\",\n  \"ceiling\",\n  \"celery\",\n  \"cement\",\n  \"census\",\n  \"century\",\n  \"cereal\",\n  \"certain\",\n  \"chair\",\n  \"chalk\",\n  \"champion\",\n  \"change\",\n  \"chaos\",\n  \"chapter\",\n  \"charge\",\n  \"chase\",\n  \"chat\",\n  \"cheap\",\n  \"check\",\n  \"cheese\",\n  \"chef\",\n  \"cherry\",\n  \"chest\",\n  \"chicken\",\n  \"chief\",\n  \"child\",\n  \"chimney\",\n  \"choice\",\n  \"choose\",\n  \"chronic\",\n  \"chuckle\",\n  \"chunk\",\n  \"churn\",\n  \"cigar\",\n  \"cinnamon\",\n  \"circle\",\n  \"citizen\",\n  \"city\",\n  \"civil\",\n  \"claim\",\n  \"clap\",\n  \"clarify\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clerk\",\n  \"clever\",\n  \"click\",\n  \"client\",\n  \"cliff\",\n  \"climb\",\n  \"clinic\",\n  \"clip\",\n  \"clock\",\n  \"clog\",\n  \"close\",\n  \"cloth\",\n  \"cloud\",\n  \"clown\",\n  \"club\",\n  \"clump\",\n  \"cluster\",\n  \"clutch\",\n  \"coach\",\n  \"coast\",\n  \"coconut\",\n  \"code\",\n  \"coffee\",\n  \"coil\",\n  \"coin\",\n  \"collect\",\n  \"color\",\n  \"column\",\n  \"combine\",\n  \"come\",\n  \"comfort\",\n  \"comic\",\n  \"common\",\n  \"company\",\n  \"concert\",\n  \"conduct\",\n  \"confirm\",\n  \"congress\",\n  \"connect\",\n  \"consider\",\n  \"control\",\n  \"convince\",\n  \"cook\",\n  \"cool\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"core\",\n  \"corn\",\n  \"correct\",\n  \"cost\",\n  \"cotton\",\n  \"couch\",\n  \"country\",\n  \"couple\",\n  \"course\",\n  \"cousin\",\n  \"cover\",\n  \"coyote\",\n  \"crack\",\n  \"cradle\",\n  \"craft\",\n  \"cram\",\n  \"crane\",\n  \"crash\",\n  \"crater\",\n  \"crawl\",\n  \"crazy\",\n  \"cream\",\n  \"credit\",\n  \"creek\",\n  \"crew\",\n  \"cricket\",\n  \"crime\",\n  \"crisp\",\n  \"critic\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crowd\",\n  \"crucial\",\n  \"cruel\",\n  \"cruise\",\n  \"crumble\",\n  \"crunch\",\n  \"crush\",\n  \"cry\",\n  \"crystal\",\n  \"cube\",\n  \"culture\",\n  \"cup\",\n  \"cupboard\",\n  \"curious\",\n  \"current\",\n  \"curtain\",\n  \"curve\",\n  \"cushion\",\n  \"custom\",\n  \"cute\",\n  \"cycle\",\n  \"dad\",\n  \"damage\",\n  \"damp\",\n  \"dance\",\n  \"danger\",\n  \"daring\",\n  \"dash\",\n  \"daughter\",\n  \"dawn\",\n  \"day\",\n  \"deal\",\n  \"debate\",\n  \"debris\",\n  \"decade\",\n  \"december\",\n  \"decide\",\n  \"decline\",\n  \"decorate\",\n  \"decrease\",\n  \"deer\",\n  \"defense\",\n  \"define\",\n  \"defy\",\n  \"degree\",\n  \"delay\",\n  \"deliver\",\n  \"demand\",\n  \"demise\",\n  \"denial\",\n  \"dentist\",\n  \"deny\",\n  \"depart\",\n  \"depend\",\n  \"deposit\",\n  \"depth\",\n  \"deputy\",\n  \"derive\",\n  \"describe\",\n  \"desert\",\n  \"design\",\n  \"desk\",\n  \"despair\",\n  \"destroy\",\n  \"detail\",\n  \"detect\",\n  \"develop\",\n  \"device\",\n  \"devote\",\n  \"diagram\",\n  \"dial\",\n  \"diamond\",\n  \"diary\",\n  \"dice\",\n  \"diesel\",\n  \"diet\",\n  \"differ\",\n  \"digital\",\n  \"dignity\",\n  \"dilemma\",\n  \"dinner\",\n  \"dinosaur\",\n  \"direct\",\n  \"dirt\",\n  \"disagree\",\n  \"discover\",\n  \"disease\",\n  \"dish\",\n  \"dismiss\",\n  \"disorder\",\n  \"display\",\n  \"distance\",\n  \"divert\",\n  \"divide\",\n  \"divorce\",\n  \"dizzy\",\n  \"doctor\",\n  \"document\",\n  \"dog\",\n  \"doll\",\n  \"dolphin\",\n  \"domain\",\n  \"donate\",\n  \"donkey\",\n  \"donor\",\n  \"door\",\n  \"dose\",\n  \"double\",\n  \"dove\",\n  \"draft\",\n  \"dragon\",\n  \"drama\",\n  \"drastic\",\n  \"draw\",\n  \"dream\",\n  \"dress\",\n  \"drift\",\n  \"drill\",\n  \"drink\",\n  \"drip\",\n  \"drive\",\n  \"drop\",\n  \"drum\",\n  \"dry\",\n  \"duck\",\n  \"dumb\",\n  \"dune\",\n  \"during\",\n  \"dust\",\n  \"dutch\",\n  \"duty\",\n  \"dwarf\",\n  \"dynamic\",\n  \"eager\",\n  \"eagle\",\n  \"early\",\n  \"earn\",\n  \"earth\",\n  \"easily\",\n  \"east\",\n  \"easy\",\n  \"echo\",\n  \"ecology\",\n  \"economy\",\n  \"edge\",\n  \"edit\",\n  \"educate\",\n  \"effort\",\n  \"egg\",\n  \"eight\",\n  \"either\",\n  \"elbow\",\n  \"elder\",\n  \"electric\",\n  \"elegant\",\n  \"element\",\n  \"elephant\",\n  \"elevator\",\n  \"elite\",\n  \"else\",\n  \"embark\",\n  \"embody\",\n  \"embrace\",\n  \"emerge\",\n  \"emotion\",\n  \"employ\",\n  \"empower\",\n  \"empty\",\n  \"enable\",\n  \"enact\",\n  \"end\",\n  \"endless\",\n  \"endorse\",\n  \"enemy\",\n  \"energy\",\n  \"enforce\",\n  \"engage\",\n  \"engine\",\n  \"enhance\",\n  \"enjoy\",\n  \"enlist\",\n  \"enough\",\n  \"enrich\",\n  \"enroll\",\n  \"ensure\",\n  \"enter\",\n  \"entire\",\n  \"entry\",\n  \"envelope\",\n  \"episode\",\n  \"equal\",\n  \"equip\",\n  \"era\",\n  \"erase\",\n  \"erode\",\n  \"erosion\",\n  \"error\",\n  \"erupt\",\n  \"escape\",\n  \"essay\",\n  \"essence\",\n  \"estate\",\n  \"eternal\",\n  \"ethics\",\n  \"evidence\",\n  \"evil\",\n  \"evoke\",\n  \"evolve\",\n  \"exact\",\n  \"example\",\n  \"excess\",\n  \"exchange\",\n  \"excite\",\n  \"exclude\",\n  \"excuse\",\n  \"execute\",\n  \"exercise\",\n  \"exhaust\",\n  \"exhibit\",\n  \"exile\",\n  \"exist\",\n  \"exit\",\n  \"exotic\",\n  \"expand\",\n  \"expect\",\n  \"expire\",\n  \"explain\",\n  \"expose\",\n  \"express\",\n  \"extend\",\n  \"extra\",\n  \"eye\",\n  \"eyebrow\",\n  \"fabric\",\n  \"face\",\n  \"faculty\",\n  \"fade\",\n  \"faint\",\n  \"faith\",\n  \"fall\",\n  \"false\",\n  \"fame\",\n  \"family\",\n  \"famous\",\n  \"fan\",\n  \"fancy\",\n  \"fantasy\",\n  \"farm\",\n  \"fashion\",\n  \"fat\",\n  \"fatal\",\n  \"father\",\n  \"fatigue\",\n  \"fault\",\n  \"favorite\",\n  \"feature\",\n  \"february\",\n  \"federal\",\n  \"fee\",\n  \"feed\",\n  \"feel\",\n  \"female\",\n  \"fence\",\n  \"festival\",\n  \"fetch\",\n  \"fever\",\n  \"few\",\n  \"fiber\",\n  \"fiction\",\n  \"field\",\n  \"figure\",\n  \"file\",\n  \"film\",\n  \"filter\",\n  \"final\",\n  \"find\",\n  \"fine\",\n  \"finger\",\n  \"finish\",\n  \"fire\",\n  \"firm\",\n  \"first\",\n  \"fiscal\",\n  \"fish\",\n  \"fit\",\n  \"fitness\",\n  \"fix\",\n  \"flag\",\n  \"flame\",\n  \"flash\",\n  \"flat\",\n  \"flavor\",\n  \"flee\",\n  \"flight\",\n  \"flip\",\n  \"float\",\n  \"flock\",\n  \"floor\",\n  \"flower\",\n  \"fluid\",\n  \"flush\",\n  \"fly\",\n  \"foam\",\n  \"focus\",\n  \"fog\",\n  \"foil\",\n  \"fold\",\n  \"follow\",\n  \"food\",\n  \"foot\",\n  \"force\",\n  \"forest\",\n  \"forget\",\n  \"fork\",\n  \"fortune\",\n  \"forum\",\n  \"forward\",\n  \"fossil\",\n  \"foster\",\n  \"found\",\n  \"fox\",\n  \"fragile\",\n  \"frame\",\n  \"frequent\",\n  \"fresh\",\n  \"friend\",\n  \"fringe\",\n  \"frog\",\n  \"front\",\n  \"frost\",\n  \"frown\",\n  \"frozen\",\n  \"fruit\",\n  \"fuel\",\n  \"fun\",\n  \"funny\",\n  \"furnace\",\n  \"fury\",\n  \"future\",\n  \"gadget\",\n  \"gain\",\n  \"galaxy\",\n  \"gallery\",\n  \"game\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"garlic\",\n  \"garment\",\n  \"gas\",\n  \"gasp\",\n  \"gate\",\n  \"gather\",\n  \"gauge\",\n  \"gaze\",\n  \"general\",\n  \"genius\",\n  \"genre\",\n  \"gentle\",\n  \"genuine\",\n  \"gesture\",\n  \"ghost\",\n  \"giant\",\n  \"gift\",\n  \"giggle\",\n  \"ginger\",\n  \"giraffe\",\n  \"girl\",\n  \"give\",\n  \"glad\",\n  \"glance\",\n  \"glare\",\n  \"glass\",\n  \"glide\",\n  \"glimpse\",\n  \"globe\",\n  \"gloom\",\n  \"glory\",\n  \"glove\",\n  \"glow\",\n  \"glue\",\n  \"goat\",\n  \"goddess\",\n  \"gold\",\n  \"good\",\n  \"goose\",\n  \"gorilla\",\n  \"gospel\",\n  \"gossip\",\n  \"govern\",\n  \"gown\",\n  \"grab\",\n  \"grace\",\n  \"grain\",\n  \"grant\",\n  \"grape\",\n  \"grass\",\n  \"gravity\",\n  \"great\",\n  \"green\",\n  \"grid\",\n  \"grief\",\n  \"grit\",\n  \"grocery\",\n  \"group\",\n  \"grow\",\n  \"grunt\",\n  \"guard\",\n  \"guess\",\n  \"guide\",\n  \"guilt\",\n  \"guitar\",\n  \"gun\",\n  \"gym\",\n  \"habit\",\n  \"hair\",\n  \"half\",\n  \"hammer\",\n  \"hamster\",\n  \"hand\",\n  \"happy\",\n  \"harbor\",\n  \"hard\",\n  \"harsh\",\n  \"harvest\",\n  \"hat\",\n  \"have\",\n  \"hawk\",\n  \"hazard\",\n  \"head\",\n  \"health\",\n  \"heart\",\n  \"heavy\",\n  \"hedgehog\",\n  \"height\",\n  \"hello\",\n  \"helmet\",\n  \"help\",\n  \"hen\",\n  \"hero\",\n  \"hidden\",\n  \"high\",\n  \"hill\",\n  \"hint\",\n  \"hip\",\n  \"hire\",\n  \"history\",\n  \"hobby\",\n  \"hockey\",\n  \"hold\",\n  \"hole\",\n  \"holiday\",\n  \"hollow\",\n  \"home\",\n  \"honey\",\n  \"hood\",\n  \"hope\",\n  \"horn\",\n  \"horror\",\n  \"horse\",\n  \"hospital\",\n  \"host\",\n  \"hotel\",\n  \"hour\",\n  \"hover\",\n  \"hub\",\n  \"huge\",\n  \"human\",\n  \"humble\",\n  \"humor\",\n  \"hundred\",\n  \"hungry\",\n  \"hunt\",\n  \"hurdle\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hybrid\",\n  \"ice\",\n  \"icon\",\n  \"idea\",\n  \"identify\",\n  \"idle\",\n  \"ignore\",\n  \"ill\",\n  \"illegal\",\n  \"illness\",\n  \"image\",\n  \"imitate\",\n  \"immense\",\n  \"immune\",\n  \"impact\",\n  \"impose\",\n  \"improve\",\n  \"impulse\",\n  \"inch\",\n  \"include\",\n  \"income\",\n  \"increase\",\n  \"index\",\n  \"indicate\",\n  \"indoor\",\n  \"industry\",\n  \"infant\",\n  \"inflict\",\n  \"inform\",\n  \"inhale\",\n  \"inherit\",\n  \"initial\",\n  \"inject\",\n  \"injury\",\n  \"inmate\",\n  \"inner\",\n  \"innocent\",\n  \"input\",\n  \"inquiry\",\n  \"insane\",\n  \"insect\",\n  \"inside\",\n  \"inspire\",\n  \"install\",\n  \"intact\",\n  \"interest\",\n  \"into\",\n  \"invest\",\n  \"invite\",\n  \"involve\",\n  \"iron\",\n  \"island\",\n  \"isolate\",\n  \"issue\",\n  \"item\",\n  \"ivory\",\n  \"jacket\",\n  \"jaguar\",\n  \"jar\",\n  \"jazz\",\n  \"jealous\",\n  \"jeans\",\n  \"jelly\",\n  \"jewel\",\n  \"job\",\n  \"join\",\n  \"joke\",\n  \"journey\",\n  \"joy\",\n  \"judge\",\n  \"juice\",\n  \"jump\",\n  \"jungle\",\n  \"junior\",\n  \"junk\",\n  \"just\",\n  \"kangaroo\",\n  \"keen\",\n  \"keep\",\n  \"ketchup\",\n  \"key\",\n  \"kick\",\n  \"kid\",\n  \"kidney\",\n  \"kind\",\n  \"kingdom\",\n  \"kiss\",\n  \"kit\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kiwi\",\n  \"knee\",\n  \"knife\",\n  \"knock\",\n  \"know\",\n  \"lab\",\n  \"label\",\n  \"labor\",\n  \"ladder\",\n  \"lady\",\n  \"lake\",\n  \"lamp\",\n  \"language\",\n  \"laptop\",\n  \"large\",\n  \"later\",\n  \"latin\",\n  \"laugh\",\n  \"laundry\",\n  \"lava\",\n  \"law\",\n  \"lawn\",\n  \"lawsuit\",\n  \"layer\",\n  \"lazy\",\n  \"leader\",\n  \"leaf\",\n  \"learn\",\n  \"leave\",\n  \"lecture\",\n  \"left\",\n  \"leg\",\n  \"legal\",\n  \"legend\",\n  \"leisure\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"leopard\",\n  \"lesson\",\n  \"letter\",\n  \"level\",\n  \"liar\",\n  \"liberty\",\n  \"library\",\n  \"license\",\n  \"life\",\n  \"lift\",\n  \"light\",\n  \"like\",\n  \"limb\",\n  \"limit\",\n  \"link\",\n  \"lion\",\n  \"liquid\",\n  \"list\",\n  \"little\",\n  \"live\",\n  \"lizard\",\n  \"load\",\n  \"loan\",\n  \"lobster\",\n  \"local\",\n  \"lock\",\n  \"logic\",\n  \"lonely\",\n  \"long\",\n  \"loop\",\n  \"lottery\",\n  \"loud\",\n  \"lounge\",\n  \"love\",\n  \"loyal\",\n  \"lucky\",\n  \"luggage\",\n  \"lumber\",\n  \"lunar\",\n  \"lunch\",\n  \"luxury\",\n  \"lyrics\",\n  \"machine\",\n  \"mad\",\n  \"magic\",\n  \"magnet\",\n  \"maid\",\n  \"mail\",\n  \"main\",\n  \"major\",\n  \"make\",\n  \"mammal\",\n  \"man\",\n  \"manage\",\n  \"mandate\",\n  \"mango\",\n  \"mansion\",\n  \"manual\",\n  \"maple\",\n  \"marble\",\n  \"march\",\n  \"margin\",\n  \"marine\",\n  \"market\",\n  \"marriage\",\n  \"mask\",\n  \"mass\",\n  \"master\",\n  \"match\",\n  \"material\",\n  \"math\",\n  \"matrix\",\n  \"matter\",\n  \"maximum\",\n  \"maze\",\n  \"meadow\",\n  \"mean\",\n  \"measure\",\n  \"meat\",\n  \"mechanic\",\n  \"medal\",\n  \"media\",\n  \"melody\",\n  \"melt\",\n  \"member\",\n  \"memory\",\n  \"mention\",\n  \"menu\",\n  \"mercy\",\n  \"merge\",\n  \"merit\",\n  \"merry\",\n  \"mesh\",\n  \"message\",\n  \"metal\",\n  \"method\",\n  \"middle\",\n  \"midnight\",\n  \"milk\",\n  \"million\",\n  \"mimic\",\n  \"mind\",\n  \"minimum\",\n  \"minor\",\n  \"minute\",\n  \"miracle\",\n  \"mirror\",\n  \"misery\",\n  \"miss\",\n  \"mistake\",\n  \"mix\",\n  \"mixed\",\n  \"mixture\",\n  \"mobile\",\n  \"model\",\n  \"modify\",\n  \"mom\",\n  \"moment\",\n  \"monitor\",\n  \"monkey\",\n  \"monster\",\n  \"month\",\n  \"moon\",\n  \"moral\",\n  \"more\",\n  \"morning\",\n  \"mosquito\",\n  \"mother\",\n  \"motion\",\n  \"motor\",\n  \"mountain\",\n  \"mouse\",\n  \"move\",\n  \"movie\",\n  \"much\",\n  \"muffin\",\n  \"mule\",\n  \"multiply\",\n  \"muscle\",\n  \"museum\",\n  \"mushroom\",\n  \"music\",\n  \"must\",\n  \"mutual\",\n  \"myself\",\n  \"mystery\",\n  \"myth\",\n  \"naive\",\n  \"name\",\n  \"napkin\",\n  \"narrow\",\n  \"nasty\",\n  \"nation\",\n  \"nature\",\n  \"near\",\n  \"neck\",\n  \"need\",\n  \"negative\",\n  \"neglect\",\n  \"neither\",\n  \"nephew\",\n  \"nerve\",\n  \"nest\",\n  \"net\",\n  \"network\",\n  \"neutral\",\n  \"never\",\n  \"news\",\n  \"next\",\n  \"nice\",\n  \"night\",\n  \"noble\",\n  \"noise\",\n  \"nominee\",\n  \"noodle\",\n  \"normal\",\n  \"north\",\n  \"nose\",\n  \"notable\",\n  \"note\",\n  \"nothing\",\n  \"notice\",\n  \"novel\",\n  \"now\",\n  \"nuclear\",\n  \"number\",\n  \"nurse\",\n  \"nut\",\n  \"oak\",\n  \"obey\",\n  \"object\",\n  \"oblige\",\n  \"obscure\",\n  \"observe\",\n  \"obtain\",\n  \"obvious\",\n  \"occur\",\n  \"ocean\",\n  \"october\",\n  \"odor\",\n  \"off\",\n  \"offer\",\n  \"office\",\n  \"often\",\n  \"oil\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympic\",\n  \"omit\",\n  \"once\",\n  \"one\",\n  \"onion\",\n  \"online\",\n  \"only\",\n  \"open\",\n  \"opera\",\n  \"opinion\",\n  \"oppose\",\n  \"option\",\n  \"orange\",\n  \"orbit\",\n  \"orchard\",\n  \"order\",\n  \"ordinary\",\n  \"organ\",\n  \"orient\",\n  \"original\",\n  \"orphan\",\n  \"ostrich\",\n  \"other\",\n  \"outdoor\",\n  \"outer\",\n  \"output\",\n  \"outside\",\n  \"oval\",\n  \"oven\",\n  \"over\",\n  \"own\",\n  \"owner\",\n  \"oxygen\",\n  \"oyster\",\n  \"ozone\",\n  \"pact\",\n  \"paddle\",\n  \"page\",\n  \"pair\",\n  \"palace\",\n  \"palm\",\n  \"panda\",\n  \"panel\",\n  \"panic\",\n  \"panther\",\n  \"paper\",\n  \"parade\",\n  \"parent\",\n  \"park\",\n  \"parrot\",\n  \"party\",\n  \"pass\",\n  \"patch\",\n  \"path\",\n  \"patient\",\n  \"patrol\",\n  \"pattern\",\n  \"pause\",\n  \"pave\",\n  \"payment\",\n  \"peace\",\n  \"peanut\",\n  \"pear\",\n  \"peasant\",\n  \"pelican\",\n  \"pen\",\n  \"penalty\",\n  \"pencil\",\n  \"people\",\n  \"pepper\",\n  \"perfect\",\n  \"permit\",\n  \"person\",\n  \"pet\",\n  \"phone\",\n  \"photo\",\n  \"phrase\",\n  \"physical\",\n  \"piano\",\n  \"picnic\",\n  \"picture\",\n  \"piece\",\n  \"pig\",\n  \"pigeon\",\n  \"pill\",\n  \"pilot\",\n  \"pink\",\n  \"pioneer\",\n  \"pipe\",\n  \"pistol\",\n  \"pitch\",\n  \"pizza\",\n  \"place\",\n  \"planet\",\n  \"plastic\",\n  \"plate\",\n  \"play\",\n  \"please\",\n  \"pledge\",\n  \"pluck\",\n  \"plug\",\n  \"plunge\",\n  \"poem\",\n  \"poet\",\n  \"point\",\n  \"polar\",\n  \"pole\",\n  \"police\",\n  \"pond\",\n  \"pony\",\n  \"pool\",\n  \"popular\",\n  \"portion\",\n  \"position\",\n  \"possible\",\n  \"post\",\n  \"potato\",\n  \"pottery\",\n  \"poverty\",\n  \"powder\",\n  \"power\",\n  \"practice\",\n  \"praise\",\n  \"predict\",\n  \"prefer\",\n  \"prepare\",\n  \"present\",\n  \"pretty\",\n  \"prevent\",\n  \"price\",\n  \"pride\",\n  \"primary\",\n  \"print\",\n  \"priority\",\n  \"prison\",\n  \"private\",\n  \"prize\",\n  \"problem\",\n  \"process\",\n  \"produce\",\n  \"profit\",\n  \"program\",\n  \"project\",\n  \"promote\",\n  \"proof\",\n  \"property\",\n  \"prosper\",\n  \"protect\",\n  \"proud\",\n  \"provide\",\n  \"public\",\n  \"pudding\",\n  \"pull\",\n  \"pulp\",\n  \"pulse\",\n  \"pumpkin\",\n  \"punch\",\n  \"pupil\",\n  \"puppy\",\n  \"purchase\",\n  \"purity\",\n  \"purpose\",\n  \"purse\",\n  \"push\",\n  \"put\",\n  \"puzzle\",\n  \"pyramid\",\n  \"quality\",\n  \"quantum\",\n  \"quarter\",\n  \"question\",\n  \"quick\",\n  \"quit\",\n  \"quiz\",\n  \"quote\",\n  \"rabbit\",\n  \"raccoon\",\n  \"race\",\n  \"rack\",\n  \"radar\",\n  \"radio\",\n  \"rail\",\n  \"rain\",\n  \"raise\",\n  \"rally\",\n  \"ramp\",\n  \"ranch\",\n  \"random\",\n  \"range\",\n  \"rapid\",\n  \"rare\",\n  \"rate\",\n  \"rather\",\n  \"raven\",\n  \"raw\",\n  \"razor\",\n  \"ready\",\n  \"real\",\n  \"reason\",\n  \"rebel\",\n  \"rebuild\",\n  \"recall\",\n  \"receive\",\n  \"recipe\",\n  \"record\",\n  \"recycle\",\n  \"reduce\",\n  \"reflect\",\n  \"reform\",\n  \"refuse\",\n  \"region\",\n  \"regret\",\n  \"regular\",\n  \"reject\",\n  \"relax\",\n  \"release\",\n  \"relief\",\n  \"rely\",\n  \"remain\",\n  \"remember\",\n  \"remind\",\n  \"remove\",\n  \"render\",\n  \"renew\",\n  \"rent\",\n  \"reopen\",\n  \"repair\",\n  \"repeat\",\n  \"replace\",\n  \"report\",\n  \"require\",\n  \"rescue\",\n  \"resemble\",\n  \"resist\",\n  \"resource\",\n  \"response\",\n  \"result\",\n  \"retire\",\n  \"retreat\",\n  \"return\",\n  \"reunion\",\n  \"reveal\",\n  \"review\",\n  \"reward\",\n  \"rhythm\",\n  \"rib\",\n  \"ribbon\",\n  \"rice\",\n  \"rich\",\n  \"ride\",\n  \"ridge\",\n  \"rifle\",\n  \"right\",\n  \"rigid\",\n  \"ring\",\n  \"riot\",\n  \"ripple\",\n  \"risk\",\n  \"ritual\",\n  \"rival\",\n  \"river\",\n  \"road\",\n  \"roast\",\n  \"robot\",\n  \"robust\",\n  \"rocket\",\n  \"romance\",\n  \"roof\",\n  \"rookie\",\n  \"room\",\n  \"rose\",\n  \"rotate\",\n  \"rough\",\n  \"round\",\n  \"route\",\n  \"royal\",\n  \"rubber\",\n  \"rude\",\n  \"rug\",\n  \"rule\",\n  \"run\",\n  \"runway\",\n  \"rural\",\n  \"sad\",\n  \"saddle\",\n  \"sadness\",\n  \"safe\",\n  \"sail\",\n  \"salad\",\n  \"salmon\",\n  \"salon\",\n  \"salt\",\n  \"salute\",\n  \"same\",\n  \"sample\",\n  \"sand\",\n  \"satisfy\",\n  \"satoshi\",\n  \"sauce\",\n  \"sausage\",\n  \"save\",\n  \"say\",\n  \"scale\",\n  \"scan\",\n  \"scare\",\n  \"scatter\",\n  \"scene\",\n  \"scheme\",\n  \"school\",\n  \"science\",\n  \"scissors\",\n  \"scorpion\",\n  \"scout\",\n  \"scrap\",\n  \"screen\",\n  \"script\",\n  \"scrub\",\n  \"sea\",\n  \"search\",\n  \"season\",\n  \"seat\",\n  \"second\",\n  \"secret\",\n  \"section\",\n  \"security\",\n  \"seed\",\n  \"seek\",\n  \"segment\",\n  \"select\",\n  \"sell\",\n  \"seminar\",\n  \"senior\",\n  \"sense\",\n  \"sentence\",\n  \"series\",\n  \"service\",\n  \"session\",\n  \"settle\",\n  \"setup\",\n  \"seven\",\n  \"shadow\",\n  \"shaft\",\n  \"shallow\",\n  \"share\",\n  \"shed\",\n  \"shell\",\n  \"sheriff\",\n  \"shield\",\n  \"shift\",\n  \"shine\",\n  \"ship\",\n  \"shiver\",\n  \"shock\",\n  \"shoe\",\n  \"shoot\",\n  \"shop\",\n  \"short\",\n  \"shoulder\",\n  \"shove\",\n  \"shrimp\",\n  \"shrug\",\n  \"shuffle\",\n  \"shy\",\n  \"sibling\",\n  \"sick\",\n  \"side\",\n  \"siege\",\n  \"sight\",\n  \"sign\",\n  \"silent\",\n  \"silk\",\n  \"silly\",\n  \"silver\",\n  \"similar\",\n  \"simple\",\n  \"since\",\n  \"sing\",\n  \"siren\",\n  \"sister\",\n  \"situate\",\n  \"six\",\n  \"size\",\n  \"skate\",\n  \"sketch\",\n  \"ski\",\n  \"skill\",\n  \"skin\",\n  \"skirt\",\n  \"skull\",\n  \"slab\",\n  \"slam\",\n  \"sleep\",\n  \"slender\",\n  \"slice\",\n  \"slide\",\n  \"slight\",\n  \"slim\",\n  \"slogan\",\n  \"slot\",\n  \"slow\",\n  \"slush\",\n  \"small\",\n  \"smart\",\n  \"smile\",\n  \"smoke\",\n  \"smooth\",\n  \"snack\",\n  \"snake\",\n  \"snap\",\n  \"sniff\",\n  \"snow\",\n  \"soap\",\n  \"soccer\",\n  \"social\",\n  \"sock\",\n  \"soda\",\n  \"soft\",\n  \"solar\",\n  \"soldier\",\n  \"solid\",\n  \"solution\",\n  \"solve\",\n  \"someone\",\n  \"song\",\n  \"soon\",\n  \"sorry\",\n  \"sort\",\n  \"soul\",\n  \"sound\",\n  \"soup\",\n  \"source\",\n  \"south\",\n  \"space\",\n  \"spare\",\n  \"spatial\",\n  \"spawn\",\n  \"speak\",\n  \"special\",\n  \"speed\",\n  \"spell\",\n  \"spend\",\n  \"sphere\",\n  \"spice\",\n  \"spider\",\n  \"spike\",\n  \"spin\",\n  \"spirit\",\n  \"split\",\n  \"spoil\",\n  \"sponsor\",\n  \"spoon\",\n  \"sport\",\n  \"spot\",\n  \"spray\",\n  \"spread\",\n  \"spring\",\n  \"spy\",\n  \"square\",\n  \"squeeze\",\n  \"squirrel\",\n  \"stable\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"stairs\",\n  \"stamp\",\n  \"stand\",\n  \"start\",\n  \"state\",\n  \"stay\",\n  \"steak\",\n  \"steel\",\n  \"stem\",\n  \"step\",\n  \"stereo\",\n  \"stick\",\n  \"still\",\n  \"sting\",\n  \"stock\",\n  \"stomach\",\n  \"stone\",\n  \"stool\",\n  \"story\",\n  \"stove\",\n  \"strategy\",\n  \"street\",\n  \"strike\",\n  \"strong\",\n  \"struggle\",\n  \"student\",\n  \"stuff\",\n  \"stumble\",\n  \"style\",\n  \"subject\",\n  \"submit\",\n  \"subway\",\n  \"success\",\n  \"such\",\n  \"sudden\",\n  \"suffer\",\n  \"sugar\",\n  \"suggest\",\n  \"suit\",\n  \"summer\",\n  \"sun\",\n  \"sunny\",\n  \"sunset\",\n  \"super\",\n  \"supply\",\n  \"supreme\",\n  \"sure\",\n  \"surface\",\n  \"surge\",\n  \"surprise\",\n  \"surround\",\n  \"survey\",\n  \"suspect\",\n  \"sustain\",\n  \"swallow\",\n  \"swamp\",\n  \"swap\",\n  \"swarm\",\n  \"swear\",\n  \"sweet\",\n  \"swift\",\n  \"swim\",\n  \"swing\",\n  \"switch\",\n  \"sword\",\n  \"symbol\",\n  \"symptom\",\n  \"syrup\",\n  \"system\",\n  \"table\",\n  \"tackle\",\n  \"tag\",\n  \"tail\",\n  \"talent\",\n  \"talk\",\n  \"tank\",\n  \"tape\",\n  \"target\",\n  \"task\",\n  \"taste\",\n  \"tattoo\",\n  \"taxi\",\n  \"teach\",\n  \"team\",\n  \"tell\",\n  \"ten\",\n  \"tenant\",\n  \"tennis\",\n  \"tent\",\n  \"term\",\n  \"test\",\n  \"text\",\n  \"thank\",\n  \"that\",\n  \"theme\",\n  \"then\",\n  \"theory\",\n  \"there\",\n  \"they\",\n  \"thing\",\n  \"this\",\n  \"thought\",\n  \"three\",\n  \"thrive\",\n  \"throw\",\n  \"thumb\",\n  \"thunder\",\n  \"ticket\",\n  \"tide\",\n  \"tiger\",\n  \"tilt\",\n  \"timber\",\n  \"time\",\n  \"tiny\",\n  \"tip\",\n  \"tired\",\n  \"tissue\",\n  \"title\",\n  \"toast\",\n  \"tobacco\",\n  \"today\",\n  \"toddler\",\n  \"toe\",\n  \"together\",\n  \"toilet\",\n  \"token\",\n  \"tomato\",\n  \"tomorrow\",\n  \"tone\",\n  \"tongue\",\n  \"tonight\",\n  \"tool\",\n  \"tooth\",\n  \"top\",\n  \"topic\",\n  \"topple\",\n  \"torch\",\n  \"tornado\",\n  \"tortoise\",\n  \"toss\",\n  \"total\",\n  \"tourist\",\n  \"toward\",\n  \"tower\",\n  \"town\",\n  \"toy\",\n  \"track\",\n  \"trade\",\n  \"traffic\",\n  \"tragic\",\n  \"train\",\n  \"transfer\",\n  \"trap\",\n  \"trash\",\n  \"travel\",\n  \"tray\",\n  \"treat\",\n  \"tree\",\n  \"trend\",\n  \"trial\",\n  \"tribe\",\n  \"trick\",\n  \"trigger\",\n  \"trim\",\n  \"trip\",\n  \"trophy\",\n  \"trouble\",\n  \"truck\",\n  \"true\",\n  \"truly\",\n  \"trumpet\",\n  \"trust\",\n  \"truth\",\n  \"try\",\n  \"tube\",\n  \"tuition\",\n  \"tumble\",\n  \"tuna\",\n  \"tunnel\",\n  \"turkey\",\n  \"turn\",\n  \"turtle\",\n  \"twelve\",\n  \"twenty\",\n  \"twice\",\n  \"twin\",\n  \"twist\",\n  \"two\",\n  \"type\",\n  \"typical\",\n  \"ugly\",\n  \"umbrella\",\n  \"unable\",\n  \"unaware\",\n  \"uncle\",\n  \"uncover\",\n  \"under\",\n  \"undo\",\n  \"unfair\",\n  \"unfold\",\n  \"unhappy\",\n  \"uniform\",\n  \"unique\",\n  \"unit\",\n  \"universe\",\n  \"unknown\",\n  \"unlock\",\n  \"until\",\n  \"unusual\",\n  \"unveil\",\n  \"update\",\n  \"upgrade\",\n  \"uphold\",\n  \"upon\",\n  \"upper\",\n  \"upset\",\n  \"urban\",\n  \"urge\",\n  \"usage\",\n  \"use\",\n  \"used\",\n  \"useful\",\n  \"useless\",\n  \"usual\",\n  \"utility\",\n  \"vacant\",\n  \"vacuum\",\n  \"vague\",\n  \"valid\",\n  \"valley\",\n  \"valve\",\n  \"van\",\n  \"vanish\",\n  \"vapor\",\n  \"various\",\n  \"vast\",\n  \"vault\",\n  \"vehicle\",\n  \"velvet\",\n  \"vendor\",\n  \"venture\",\n  \"venue\",\n  \"verb\",\n  \"verify\",\n  \"version\",\n  \"very\",\n  \"vessel\",\n  \"veteran\",\n  \"viable\",\n  \"vibrant\",\n  \"vicious\",\n  \"victory\",\n  \"video\",\n  \"view\",\n  \"village\",\n  \"vintage\",\n  \"violin\",\n  \"virtual\",\n  \"virus\",\n  \"visa\",\n  \"visit\",\n  \"visual\",\n  \"vital\",\n  \"vivid\",\n  \"vocal\",\n  \"voice\",\n  \"void\",\n  \"volcano\",\n  \"volume\",\n  \"vote\",\n  \"voyage\",\n  \"wage\",\n  \"wagon\",\n  \"wait\",\n  \"walk\",\n  \"wall\",\n  \"walnut\",\n  \"want\",\n  \"warfare\",\n  \"warm\",\n  \"warrior\",\n  \"wash\",\n  \"wasp\",\n  \"waste\",\n  \"water\",\n  \"wave\",\n  \"way\",\n  \"wealth\",\n  \"weapon\",\n  \"wear\",\n  \"weasel\",\n  \"weather\",\n  \"web\",\n  \"wedding\",\n  \"weekend\",\n  \"weird\",\n  \"welcome\",\n  \"west\",\n  \"wet\",\n  \"whale\",\n  \"what\",\n  \"wheat\",\n  \"wheel\",\n  \"when\",\n  \"where\",\n  \"whip\",\n  \"whisper\",\n  \"wide\",\n  \"width\",\n  \"wife\",\n  \"wild\",\n  \"will\",\n  \"win\",\n  \"window\",\n  \"wine\",\n  \"wing\",\n  \"wink\",\n  \"winner\",\n  \"winter\",\n  \"wire\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"witness\",\n  \"wolf\",\n  \"woman\",\n  \"wonder\",\n  \"wood\",\n  \"wool\",\n  \"word\",\n  \"work\",\n  \"world\",\n  \"worry\",\n  \"worth\",\n  \"wrap\",\n  \"wreck\",\n  \"wrestle\",\n  \"wrist\",\n  \"write\",\n  \"wrong\",\n  \"yard\",\n  \"year\",\n  \"yellow\",\n  \"you\",\n  \"young\",\n  \"youth\",\n  \"zebra\",\n  \"zero\",\n  \"zone\",\n  \"zoo\",\n];\n","// This is a partial reimplementation of CRC-8 (node-crc) in Deno: https://github.com/alexgorbatchev/node-crc\n\nlet TABLE: Array<number> | Int32Array = [\n  0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24,\n  0x23, 0x2a, 0x2d, 0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f,\n  0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d, 0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2,\n  0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd, 0x90, 0x97, 0x9e, 0x99,\n  0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd, 0xc7,\n  0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4,\n  0xed, 0xea, 0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81,\n  0x86, 0x93, 0x94, 0x9d, 0x9a, 0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32,\n  0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a, 0x57, 0x50, 0x59, 0x5e, 0x4b,\n  0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a, 0x89, 0x8e,\n  0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3,\n  0xa4, 0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8,\n  0xdd, 0xda, 0xd3, 0xd4, 0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51,\n  0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44, 0x19, 0x1e, 0x17, 0x10, 0x05, 0x02,\n  0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34, 0x4e, 0x49, 0x40,\n  0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,\n  0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a,\n  0x1d, 0x14, 0x13, 0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91,\n  0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83, 0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc,\n  0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3,\n];\n\nif (typeof Int32Array !== \"undefined\") {\n  TABLE = new Int32Array(TABLE);\n}\n\nexport function crc8(current: Uint8Array, previous = 0): number {\n  let crc = ~~previous;\n\n  for (let index = 0; index < current.length; index++) {\n    crc = TABLE[(crc ^ current[index]) & 0xff] & 0xff;\n  }\n\n  return crc;\n}\n","import { Network, Slot, SlotConfig, UnixTime } from \"../types/mod\";\n\nexport const SLOT_CONFIG_NETWORK: Record<Network, SlotConfig> = {\n  Mainnet: { zeroTime: 1596059091000, zeroSlot: 4492800, slotLength: 1000 }, // Starting at Shelley era\n  Preview: { zeroTime: 1666656000000, zeroSlot: 0, slotLength: 1000 }, // Starting at Shelley era\n  Preprod: {\n    zeroTime: 1654041600000 + 1728000000,\n    zeroSlot: 86400,\n    slotLength: 1000,\n  }, // Starting at Shelley era\n  /** Customizable slot config (Initialized with 0 values). */\n  Custom: { zeroTime: 0, zeroSlot: 0, slotLength: 0 },\n};\n\nexport function slotToBeginUnixTime(\n  slot: Slot,\n  slotConfig: SlotConfig,\n): UnixTime {\n  const msAfterBegin = (slot - slotConfig.zeroSlot) * slotConfig.slotLength;\n  return slotConfig.zeroTime + msAfterBegin;\n}\n\n// slotToBeginUnixTime and slotToEndUnixTime are identical when slotLength == 1. So we don't need to worry about this now.\n// function slotToEndUnixTime(slot: Slot, slotConfig: SlotConfig): UnixTime {\n//   return slotToBeginUnixTime(slot, slotConfig) + (slotConfig.slotLength - 1);\n// }\n\nexport function unixTimeToEnclosingSlot(\n  unixTime: UnixTime,\n  slotConfig: SlotConfig,\n): Slot {\n  const timePassed = unixTime - slotConfig.zeroTime;\n  const slotsPassed = Math.floor(timePassed / slotConfig.slotLength);\n  return slotsPassed + slotConfig.zeroSlot;\n}\n","import {\n  Static as _Static,\n  TEnum,\n  TLiteral,\n  TLiteralValue,\n  TProperties,\n  TSchema,\n  Type,\n} from \"@sinclair/typebox\";\nimport { C, CPlutusData } from \"../core/mod\";\nimport { Datum, Exact, Json, Redeemer } from \"../types/mod\";\nimport { fromHex, fromText, toHex } from \"../utils/utils\";\n\nexport class Constr<T> {\n  index: number;\n  fields: T[];\n\n  constructor(index: number, fields: T[]) {\n    this.index = index;\n    this.fields = fields;\n  }\n}\n\nexport declare namespace Data {\n  export type Static<T extends TSchema, P extends unknown[] = []> = _Static<\n    T,\n    P\n  >;\n}\n\nexport type Data =\n  | bigint // Integer\n  | string // Bytes in hex\n  | Array<Data>\n  | Map<Data, Data> // AssocList\n  | Constr<Data>;\n\nexport const Data = {\n  // Types\n  // Note: Recursive types are not supported (yet)\n  Integer: function (options?: {\n    minimum?: number;\n    maximum?: number;\n    exclusiveMinimum?: number;\n    exclusiveMaximum?: number;\n  }) {\n    const integer = Type.Unsafe<bigint>({ dataType: \"integer\" });\n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        integer[key] = value;\n      });\n    }\n    return integer;\n  },\n  Bytes: function (options?: {\n    minLength?: number;\n    maxLength?: number;\n    enum?: string[];\n  }) {\n    const bytes = Type.Unsafe<string>({ dataType: \"bytes\" });\n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        bytes[key] = value;\n      });\n    }\n    return bytes;\n  },\n  Boolean: function () {\n    return Type.Unsafe<boolean>({\n      anyOf: [\n        {\n          title: \"False\",\n          dataType: \"constructor\",\n          index: 0,\n          fields: [],\n        },\n        {\n          title: \"True\",\n          dataType: \"constructor\",\n          index: 1,\n          fields: [],\n        },\n      ],\n    });\n  },\n  Any: function () {\n    return Type.Unsafe<Data>({ description: \"Any Data.\" });\n  },\n  Array: function <T extends TSchema>(\n    items: T,\n    options?: { minItems?: number; maxItems?: number; uniqueItems?: boolean },\n  ) {\n    const array = Type.Array(items);\n    replaceProperties(array, { dataType: \"list\", items });\n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        array[key] = value;\n      });\n    }\n    return array;\n  },\n  Map: function <T extends TSchema, U extends TSchema>(\n    keys: T,\n    values: U,\n    options?: { minItems?: number; maxItems?: number },\n  ) {\n    const map = Type.Unsafe<Map<Data.Static<T>, Data.Static<U>>>({\n      dataType: \"map\",\n      keys,\n      values,\n    });\n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        map[key] = value;\n      });\n    }\n    return map;\n  },\n  /**\n   * Object applies by default a PlutusData Constr with index 0.\\\n   * Set 'hasConstr' to false to serialize Object as PlutusData List.\n   */\n  Object: function <T extends TProperties>(\n    properties: T,\n    options?: { hasConstr?: boolean },\n  ) {\n    const object = Type.Object(properties);\n    replaceProperties(object, {\n      anyOf: [\n        {\n          dataType: \"constructor\",\n          index: 0, // Will be replaced when using Data.Enum\n          fields: Object.entries(properties).map(([title, p]) => ({\n            ...p,\n            title,\n          })),\n        },\n      ],\n    });\n    object.anyOf[0].hasConstr =\n      typeof options?.hasConstr === \"undefined\" || options.hasConstr;\n    return object;\n  },\n  Enum: function <T extends TSchema>(items: T[]) {\n    const union = Type.Union(items);\n    replaceProperties(union, {\n      anyOf: items.map((item, index) =>\n        item.anyOf[0].fields.length === 0\n          ? {\n            ...item.anyOf[0],\n            index,\n          }\n          : {\n            dataType: \"constructor\",\n            title: (() => {\n              const title = item.anyOf[0].fields[0].title;\n              if (\n                (title as string).charAt(0) !==\n                (title as string).charAt(0).toUpperCase()\n              ) {\n                throw new Error(\n                  `Enum '${title}' needs to start with an uppercase letter.`,\n                );\n              }\n              return item.anyOf[0].fields[0].title;\n            })(),\n            index,\n            fields:\n              item.anyOf[0].fields[0].items ||\n              item.anyOf[0].fields[0].anyOf[0].fields,\n          },\n      ),\n    });\n    return union;\n  },\n  /**\n   * Tuple is by default a PlutusData List.\\\n   * Set 'hasConstr' to true to apply a PlutusData Constr with index 0.\n   */\n  Tuple: function <T extends TSchema[]>(\n    items: [...T],\n    options?: { hasConstr?: boolean },\n  ) {\n    const tuple = Type.Tuple(items);\n    replaceProperties(tuple, {\n      dataType: \"list\",\n      items,\n    });\n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        tuple[key] = value;\n      });\n    }\n    return tuple;\n  },\n  Literal: function <T extends TLiteralValue>(title: T): TLiteral<T> {\n    if (\n      (title as string).charAt(0) !== (title as string).charAt(0).toUpperCase()\n    ) {\n      throw new Error(\n        `Enum '${title}' needs to start with an uppercase letter.`,\n      );\n    }\n    const literal = Type.Literal(title);\n    replaceProperties(literal, {\n      anyOf: [\n        {\n          dataType: \"constructor\",\n          title,\n          index: 0, // Will be replaced in Data.Enum\n          fields: [],\n        },\n      ],\n    });\n    return literal;\n  },\n  Nullable: function <T extends TSchema>(item: T) {\n    return Type.Unsafe<Data.Static<T> | null>({\n      anyOf: [\n        {\n          title: \"Some\",\n          description: \"An optional value.\",\n          dataType: \"constructor\",\n          index: 0,\n          fields: [item],\n        },\n        {\n          title: \"None\",\n          description: \"Nothing.\",\n          dataType: \"constructor\",\n          index: 1,\n          fields: [],\n        },\n      ],\n    });\n  },\n\n  /**\n   * Convert PlutusData to Cbor encoded data.\\\n   * Or apply a shape and convert the provided data struct to Cbor encoded data.\n   */\n  to,\n  /** Convert Cbor encoded data to PlutusData */\n  from,\n  /**\n   * Note Constr cannot be used here.\\\n   * Strings prefixed with '0x' are not UTF-8 encoded.\n   */\n  fromJson,\n  /**\n   * Note Constr cannot be used here, also only bytes/integers as Json keys.\\\n   */\n  toJson,\n  void: function (): Datum | Redeemer {\n    return \"d87980\";\n  },\n  castFrom,\n  castTo,\n};\n\n/**\n * Convert PlutusData to Cbor encoded data.\\\n * Or apply a shape and convert the provided data struct to Cbor encoded data.\n */\nfunction to<T = Data>(\n  data: Exact<T>,\n  type?: T,\n  recType?: string,\n): Datum | Redeemer {\n  function serialize(data: Data): CPlutusData {\n    try {\n      if (typeof data === \"bigint\") {\n        return C.PlutusData.new_integer(C.BigInt.from_str(data.toString()));\n      } else if (typeof data === \"string\") {\n        return C.PlutusData.new_bytes(fromHex(data));\n      } else if (data instanceof Constr) {\n        const { index, fields } = data;\n        const plutusList = C.PlutusList.new();\n\n        fields.forEach((field) => plutusList.add(serialize(field)));\n\n        return C.PlutusData.new_constr_plutus_data(\n          C.ConstrPlutusData.new(\n            C.BigNum.from_str(index.toString()),\n            plutusList,\n          ),\n        );\n      } else if (data instanceof Array) {\n        const plutusList = C.PlutusList.new();\n\n        data.forEach((arg) => plutusList.add(serialize(arg)));\n\n        return C.PlutusData.new_list(plutusList);\n      } else if (data instanceof Map) {\n        const plutusMap = C.PlutusMap.new();\n\n        for (const [key, value] of data.entries()) {\n          plutusMap.insert(serialize(key), serialize(value));\n        }\n\n        return C.PlutusData.new_map(plutusMap);\n      }\n      throw new Error(\"Unsupported type\");\n    } catch (error) {\n      throw new Error(\"Could not serialize the data: \" + error);\n    }\n  }\n  const d = type ? castTo<T>(data, type, recType) : (data as Data);\n  return toHex(serialize(d).to_bytes()) as Datum | Redeemer;\n}\n\n/**\n *  Convert Cbor encoded data to Data.\\\n *  Or apply a shape and cast the cbor encoded data to a certain type.\n */\nfunction from<T = Data>(raw: Datum | Redeemer, type?: T): T {\n  function deserialize(data: CPlutusData): Data {\n    if (data.kind() === 0) {\n      const constr = data.as_constr_plutus_data()!;\n      const l = constr.data();\n      const desL = [];\n      for (let i = 0; i < l.len(); i++) {\n        desL.push(deserialize(l.get(i)));\n      }\n      return new Constr(parseInt(constr.alternative().to_str()), desL);\n    } else if (data.kind() === 1) {\n      const m = data.as_map()!;\n      const desM: Map<Data, Data> = new Map();\n      const keys = m.keys();\n      for (let i = 0; i < keys.len(); i++) {\n        desM.set(deserialize(keys.get(i)), deserialize(m.get(keys.get(i))!));\n      }\n      return desM;\n    } else if (data.kind() === 2) {\n      const l = data.as_list()!;\n      const desL = [];\n      for (let i = 0; i < l.len(); i++) {\n        desL.push(deserialize(l.get(i)));\n      }\n      return desL;\n    } else if (data.kind() === 3) {\n      return BigInt(data.as_integer()!.to_str());\n    } else if (data.kind() === 4) {\n      return toHex(data.as_bytes()!);\n    }\n    throw new Error(\"Unsupported type\");\n  }\n  const data = deserialize(C.PlutusData.from_bytes(fromHex(raw)));\n\n  return type ? castFrom<T>(data, type) : (data as T);\n}\n\n/**\n * Note Constr cannot be used here.\\\n * Strings prefixed with '0x' are not UTF-8 encoded.\n */\nfunction fromJson(json: Json): Data {\n  function toData(json: Json): Data {\n    if (typeof json === \"string\") {\n      return json.startsWith(\"0x\")\n        ? toHex(fromHex(json.slice(2)))\n        : fromText(json);\n    }\n    if (typeof json === \"number\") return BigInt(json);\n    if (typeof json === \"bigint\") return json;\n    if (json instanceof Array) return json.map((v) => toData(v));\n    if (json instanceof Object) {\n      const tempMap: Map<Data, Data> = new Map();\n      Object.entries(json).forEach(([key, value]) => {\n        tempMap.set(toData(key), toData(value));\n      });\n      return tempMap as Data;\n    }\n    throw new Error(\"Unsupported type\");\n  }\n  return toData(json);\n}\n\n/**\n * Note Constr cannot be used here, also only bytes/integers as Json keys.\\\n */\nfunction toJson(plutusData: Data): Json {\n  function fromData(data: Data): Json {\n    if (\n      typeof data === \"bigint\" ||\n      typeof data === \"number\" ||\n      (typeof data === \"string\" &&\n        !isNaN(parseInt(data)) &&\n        data.slice(-1) === \"n\")\n    ) {\n      const bigint =\n        typeof data === \"string\" ? BigInt(data.slice(0, -1)) : data;\n      return parseInt(bigint.toString());\n    }\n    if (typeof data === \"string\") {\n      try {\n        return new TextDecoder(undefined, { fatal: true }).decode(\n          fromHex(data),\n        );\n      } catch (_) {\n        return \"0x\" + toHex(fromHex(data));\n      }\n    }\n    if (data instanceof Array) return data.map((v) => fromData(v));\n    if (data instanceof Map) {\n      const tempJson: Json = {};\n      data.forEach((value, key) => {\n        const convertedKey = fromData(key);\n        if (\n          typeof convertedKey !== \"string\" &&\n          typeof convertedKey !== \"number\"\n        ) {\n          throw new Error(\n            \"Unsupported type (Note: Only bytes or integers can be keys of a JSON object)\",\n          );\n        }\n        tempJson[convertedKey] = fromData(value);\n      });\n      return tempJson;\n    }\n    throw new Error(\n      \"Unsupported type (Note: Constructor cannot be converted to JSON)\",\n    );\n  }\n  return fromData(plutusData);\n}\n\nfunction castFrom<T = Data>(data: Data, type: T): T {\n  const shape = type as Json;\n  if (!shape) throw new Error(\"Could not type cast data.\");\n  const shapeType = (shape.anyOf ? \"enum\" : \"\") || shape.dataType;\n\n  switch (shapeType) {\n    case \"integer\": {\n      if (typeof data !== \"bigint\") {\n        throw new Error(\"Could not type cast to integer.\");\n      }\n      integerConstraints(data, shape);\n      return data as T;\n    }\n    case \"bytes\": {\n      if (typeof data !== \"string\") {\n        throw new Error(\"Could not type cast to bytes.\");\n      }\n      bytesConstraints(data, shape);\n      return data as T;\n    }\n    case \"constructor\": {\n      if (isVoid(shape)) {\n        if (\n          !(data instanceof Constr) ||\n          data.index !== 0 ||\n          data.fields.length !== 0\n        ) {\n          throw new Error(\"Could not type cast to void.\");\n        }\n        return undefined as T;\n      } else if (\n        data instanceof Constr &&\n        data.index === shape.index &&\n        (shape.hasConstr || shape.hasConstr === undefined)\n      ) {\n        const fields: Record<string, T> = {};\n        if (shape.fields.length !== data.fields.length) {\n          throw new Error(\n            \"Could not type cast to object. Fields do not match.\",\n          );\n        }\n        shape.fields.forEach((field: Json, fieldIndex: number) => {\n          const title = field.title || \"wrapper\";\n          if (/[A-Z]/.test(title[0])) {\n            throw new Error(\n              \"Could not type cast to object. Object properties need to start with a lowercase letter.\",\n            );\n          }\n          fields[title] = castFrom<T>(data.fields[fieldIndex], field);\n        });\n        return fields as T;\n      } else if (\n        data instanceof Array &&\n        !shape.hasConstr &&\n        shape.hasConstr !== undefined\n      ) {\n        const fields: Record<string, T> = {};\n        if (shape.fields.length !== data.length) {\n          throw new Error(\"Could not ype cast to object. Fields do not match.\");\n        }\n        shape.fields.forEach((field: Json, fieldIndex: number) => {\n          const title = field.title || \"wrapper\";\n          if (/[A-Z]/.test(title[0])) {\n            throw new Error(\n              \"Could not type cast to object. Object properties need to start with a lowercase letter.\",\n            );\n          }\n          fields[title] = castFrom<T>(data[fieldIndex], field);\n        });\n        return fields as T;\n      }\n      throw new Error(\"Could not type cast to object.\");\n    }\n    case \"enum\": {\n      // When enum has only one entry it's a single constructor/record object\n      if (shape.anyOf.length === 1) {\n        return castFrom<T>(data, shape.anyOf[0]);\n      }\n\n      if (!(data instanceof Constr)) {\n        throw new Error(\"Could not type cast to enum.\");\n      }\n\n      const enumShape = shape.anyOf.find(\n        (entry: Json) => entry.index === data.index,\n      );\n      if (!enumShape || enumShape.fields.length !== data.fields.length) {\n        throw new Error(\"Could not type cast to enum.\");\n      }\n      if (isBoolean(shape)) {\n        if (data.fields.length !== 0) {\n          throw new Error(\"Could not type cast to boolean.\");\n        }\n        switch (data.index) {\n          case 0:\n            return false as T;\n          case 1:\n            return true as T;\n        }\n        throw new Error(\"Could not type cast to boolean.\");\n      } else if (isNullable(shape)) {\n        switch (data.index) {\n          case 0: {\n            if (data.fields.length !== 1) {\n              throw new Error(\"Could not type cast to nullable object.\");\n            }\n            return castFrom<T>(data.fields[0], shape.anyOf[0].fields[0]);\n          }\n          case 1: {\n            if (data.fields.length !== 0) {\n              throw new Error(\"Could not type cast to nullable object.\");\n            }\n            return null as T;\n          }\n        }\n        throw new Error(\"Could not type cast to nullable object.\");\n      }\n      switch (enumShape.dataType) {\n        case \"constructor\": {\n          if (enumShape.fields.length === 0) {\n            if (/[A-Z]/.test(enumShape.title[0])) {\n              return enumShape.title as T;\n            }\n            throw new Error(\"Could not type cast to enum.\");\n          } else {\n            if (!/[A-Z]/.test(enumShape.title)) {\n              throw new Error(\n                \"Could not type cast to enum. Enums need to start with an uppercase letter.\",\n              );\n            }\n\n            if (enumShape.fields.length !== data.fields.length) {\n              throw new Error(\"Could not type cast to enum.\");\n            }\n\n            // check if named args\n            const args = enumShape.fields[0].title\n              ? Object.fromEntries(\n                enumShape.fields.map((field: Json, index: number) => [\n                  field.title,\n                  castFrom<T>(data.fields[index], field),\n                ]),\n              )\n              : enumShape.fields.map((field: Json, index: number) =>\n                castFrom<T>(data.fields[index], field),\n              );\n\n            return {\n              [enumShape.title]: args,\n            } as T;\n          }\n        }\n      }\n      throw new Error(\"Could not type cast to enum.\");\n    }\n    case \"list\": {\n      if (shape.items instanceof Array) {\n        // tuple\n        if (data instanceof Constr && data.index === 0 && shape.hasConstr) {\n          return data.fields.map((field, index) =>\n            castFrom<T>(field, shape.items[index]),\n          ) as T;\n        } else if (data instanceof Array && !shape.hasConstr) {\n          return data.map((field, index) =>\n            castFrom<T>(field, shape.items[index]),\n          ) as T;\n        }\n\n        throw new Error(\"Could not type cast to tuple.\");\n      } else {\n        // array\n        if (!(data instanceof Array)) {\n          throw new Error(\"Could not type cast to array.\");\n        }\n        listConstraints(data, shape);\n\n        return data.map((field) => castFrom<T>(field, shape.items)) as T;\n      }\n    }\n    case \"map\": {\n      if (!(data instanceof Map)) {\n        throw new Error(\"Could not type cast to map.\");\n      }\n      mapConstraints(data, shape);\n      const map = new Map();\n      for (const [key, value] of data.entries()) {\n        map.set(castFrom<T>(key, shape.keys), castFrom<T>(value, shape.values));\n      }\n      return map as T;\n    }\n    case undefined: {\n      return data as T;\n    }\n  }\n  throw new Error(\"Could not type cast data.\");\n}\n\nfunction castTo<T>(\n  struct: Exact<T>,\n  type: T,\n  recType?: string,\n  recShape?: {\n    recType: string;\n    shape: T;\n    shapeType: string;\n  },\n): Data {\n  let shape = type as Json;\n  if (!shape) throw new Error(\"Could not type cast struct.\");\n  let shapeType = (shape.anyOf ? \"enum\" : \"\") || shape.dataType;\n\n  if (recType === shape.title) {\n    recShape = { recType: recType!, shape: shape, shapeType: shapeType };\n  } else if (recShape && shape.$ref) {\n    shape = recShape.shape;\n    shapeType = recShape.shapeType;\n  }\n  switch (shapeType) {\n    case \"integer\": {\n      if (typeof struct !== \"bigint\") {\n        throw new Error(\"Could not type cast to integer.\");\n      }\n      integerConstraints(struct, shape);\n      return struct as bigint;\n    }\n    case \"bytes\": {\n      if (typeof struct !== \"string\") {\n        throw new Error(\"Could not type cast to bytes.\");\n      }\n      bytesConstraints(struct, shape);\n      return struct as string;\n    }\n    case \"constructor\": {\n      if (isVoid(shape)) {\n        if (struct !== undefined) {\n          throw new Error(\"Could not type cast to void.\");\n        }\n        return new Constr(0, []);\n      } else if (\n        typeof struct !== \"object\" ||\n        struct === null ||\n        shape.fields.length !== Object.keys(struct).length\n      ) {\n        throw new Error(\"Could not type cast to constructor.\");\n      }\n      const fields = shape.fields.map((field: Json) =>\n        castTo<T>(\n          (struct as Record<string, Json>)[field.title || \"wrapper\"],\n          field,\n          recType,\n          recShape,\n        ),\n      );\n      return shape.hasConstr || shape.hasConstr === undefined\n        ? new Constr(shape.index, fields)\n        : fields;\n    }\n    case \"enum\": {\n      // When enum has only one entry it's a single constructor/record object\n      if (shape.anyOf.length === 1) {\n        return castTo<T>(struct, shape.anyOf[0], recType, recShape);\n      }\n\n      if (isBoolean(shape)) {\n        if (typeof struct !== \"boolean\") {\n          throw new Error(\"Could not type cast to boolean.\");\n        }\n        return new Constr(struct ? 1 : 0, []);\n      } else if (isNullable(shape)) {\n        if (struct === null) return new Constr(1, []);\n        else {\n          const fields = shape.anyOf[0].fields;\n          if (fields.length !== 1) {\n            throw new Error(\"Could not type cast to nullable object.\");\n          }\n          return new Constr(0, [\n            castTo<T>(struct, fields[0], recType, recShape),\n          ]);\n        }\n      }\n      switch (typeof struct) {\n        case \"string\": {\n          if (!/[A-Z]/.test(struct[0])) {\n            throw new Error(\n              \"Could not type cast to enum. Enum needs to start with an uppercase letter.\",\n            );\n          }\n          const enumIndex = (shape as TEnum).anyOf.findIndex(\n            (s: TLiteral) =>\n              s.dataType === \"constructor\" &&\n              s.fields.length === 0 &&\n              s.title === struct,\n          );\n          if (enumIndex === -1) throw new Error(\"Could not type cast to enum.\");\n          return new Constr(enumIndex, []);\n        }\n        case \"object\": {\n          if (struct === null) throw new Error(\"Could not type cast to enum.\");\n          const structTitle = Object.keys(struct)[0];\n\n          if (!/[A-Z]/.test(structTitle)) {\n            throw new Error(\n              \"Could not type cast to enum. Enum needs to start with an uppercase letter.\",\n            );\n          }\n          const enumEntry = shape.anyOf.find(\n            (s: Json) =>\n              s.dataType === \"constructor\" && s.title === structTitle,\n          );\n\n          if (!enumEntry) throw new Error(\"Could not type cast to enum.\");\n\n          const args = (struct as Record<string, T[] | Json>)[structTitle];\n\n          return new Constr(\n            enumEntry.index,\n            // check if named args\n            args instanceof Array\n              ? args.map((item, index) =>\n                castTo<T>(item, enumEntry.fields[index], recType, recShape),\n              )\n              : enumEntry.fields.map((entry: Json) => {\n                const [_, item]: [string, Json] = Object.entries(args).find(\n                  ([title]) => title === entry.title,\n                )!;\n                return castTo<T>(item, entry, recType, recShape);\n              }),\n          );\n        }\n      }\n      throw new Error(\"Could not type cast to enum.\");\n    }\n    case \"list\": {\n      if (!(struct instanceof Array)) {\n        throw new Error(\"Could not type cast to array/tuple.\");\n      }\n      if (shape.items instanceof Array) {\n        // tuple\n        const fields = struct.map((item, index) =>\n          castTo<T>(item, shape.items[index], recType, recShape),\n        );\n        return shape.hasConstr ? new Constr(0, fields) : fields;\n      } else {\n        // array\n        listConstraints(struct, shape);\n        return struct.map((item) =>\n          castTo<T>(item, shape.items, recType, recShape),\n        );\n      }\n    }\n    case \"map\": {\n      if (!(struct instanceof Map)) {\n        throw new Error(\"Could not type cast to map.\");\n      }\n\n      mapConstraints(struct, shape);\n\n      const map = new Map<Data, Data>();\n      for (const [key, value] of struct.entries()) {\n        map.set(\n          castTo<T>(key, shape.keys, recType, recShape),\n          castTo<T>(value, shape.values, recType, recShape),\n        );\n      }\n      return map;\n    }\n    case undefined: {\n      return struct as Data;\n    }\n  }\n  throw new Error(\"Could not type cast struct.\");\n}\n\nfunction integerConstraints(integer: bigint, shape: TSchema) {\n  if (shape.minimum && integer < BigInt(shape.minimum)) {\n    throw new Error(\n      `Integer ${integer} is below the minimum ${shape.minimum}.`,\n    );\n  }\n  if (shape.maximum && integer > BigInt(shape.maximum)) {\n    throw new Error(\n      `Integer ${integer} is above the maxiumum ${shape.maximum}.`,\n    );\n  }\n  if (shape.exclusiveMinimum && integer <= BigInt(shape.exclusiveMinimum)) {\n    throw new Error(\n      `Integer ${integer} is below the exclusive minimum ${shape.exclusiveMinimum}.`,\n    );\n  }\n  if (shape.exclusiveMaximum && integer >= BigInt(shape.exclusiveMaximum)) {\n    throw new Error(\n      `Integer ${integer} is above the exclusive maximum ${shape.exclusiveMaximum}.`,\n    );\n  }\n}\n\nfunction bytesConstraints(bytes: string, shape: TSchema) {\n  if (shape.enum && !shape.enum.some((keyword: string) => keyword === bytes))\n    throw new Error(`None of the keywords match with '${bytes}'.`);\n  if (shape.minLength && bytes.length / 2 < shape.minLength) {\n    throw new Error(\n      `Bytes need to have a length of at least ${shape.minLength} bytes.`,\n    );\n  }\n\n  if (shape.maxLength && bytes.length / 2 > shape.maxLength) {\n    throw new Error(\n      `Bytes can have a length of at most ${shape.minLength} bytes.`,\n    );\n  }\n}\n\nfunction listConstraints(list: Array<unknown>, shape: TSchema) {\n  if (shape.minItems && list.length < shape.minItems) {\n    throw new Error(`Array needs to contain at least ${shape.minItems} items.`);\n  }\n  if (shape.maxItems && list.length > shape.maxItems) {\n    throw new Error(`Array can contain at most ${shape.maxItems} items.`);\n  }\n  if (shape.uniqueItems && new Set(list).size !== list.length) {\n    // Note this only works for primitive types like string and bigint.\n    throw new Error(\"Array constains duplicates.\");\n  }\n}\n\nfunction mapConstraints(map: Map<unknown, unknown>, shape: TSchema) {\n  if (shape.minItems && map.size < shape.minItems) {\n    throw new Error(`Map needs to contain at least ${shape.minItems} items.`);\n  }\n\n  if (shape.maxItems && map.size > shape.maxItems) {\n    throw new Error(`Map can contain at most ${shape.maxItems} items.`);\n  }\n}\n\nfunction isBoolean(shape: TSchema): boolean {\n  return (\n    shape.anyOf &&\n    shape.anyOf[0]?.title === \"False\" &&\n    shape.anyOf[1]?.title === \"True\"\n  );\n}\n\nfunction isVoid(shape: TSchema): boolean {\n  return shape.index === 0 && shape.fields.length === 0;\n}\n\nfunction isNullable(shape: TSchema): boolean {\n  return (\n    shape.anyOf &&\n    shape.anyOf[0]?.title === \"Some\" &&\n    shape.anyOf[1]?.title === \"None\"\n  );\n}\n\nfunction replaceProperties(object: Json, properties: Json) {\n  Object.keys(object).forEach((key) => {\n    delete object[key];\n  });\n  Object.assign(object, properties);\n}\n","import * as C from \"@dcspark/cardano-multiplatform-lib-nodejs\";\nimport type { Credential } from \"../mod\";\n\nexport const toCore = {\n  credential(credential: Credential): C.StakeCredential {\n    if (credential.type == \"Key\") {\n      return C.StakeCredential.from_keyhash(\n        C.Ed25519KeyHash.from_hex(credential.hash),\n      );\n    } else if (credential.type == \"Script\") {\n      return C.StakeCredential.from_scripthash(\n        C.ScriptHash.from_hex(credential.hash),\n      );\n    }\n    throw new Error(\"Lucid credential type mismatch\");\n  },\n};\n","import { C, CAddress, CByronAddress, CNativeScript, CScriptRef, CTransactionUnspentOutput, CValue, U } from \"../core/mod\";\nimport type {\n  Address,\n  AddressDetails,\n  Assets,\n  CertificateValidator,\n  Credential,\n  Datum,\n  DatumHash,\n  Exact,\n  KeyHash,\n  MintingPolicy,\n  NativeScript,\n  Network,\n  PolicyId,\n  PrivateKey,\n  PublicKey,\n  RewardAddress,\n  Script,\n  ScriptHash,\n  Slot,\n  SpendingValidator,\n  Unit,\n  UnixTime,\n  UTxO,\n  Validator,\n  WithdrawalValidator,\n} from \"../types/mod\";\nimport { Translucent } from \"../translucent/mod\";\nimport { generateMnemonic } from \"../misc/bip39\";\nimport { crc8 } from \"../misc/crc8\";\nimport {\n  SLOT_CONFIG_NETWORK,\n  slotToBeginUnixTime,\n  unixTimeToEnclosingSlot,\n} from \"../plutus/time\";\nimport { Data } from \"../plutus/data\";\nimport { toCore } from \"./to\";\n\nexport class Utils {\n  private translucent: Translucent;\n  constructor(translucent: Translucent) {\n    this.translucent = translucent;\n  }\n\n  validatorToAddress(\n    validator: SpendingValidator,\n    stakeCredential?: Credential,\n  ): Address {\n    const validatorHash = this.validatorToScriptHash(validator);\n    if (stakeCredential) {\n      return C.BaseAddress.new(\n        networkToId(this.translucent.network),\n        C.StakeCredential.from_scripthash(C.ScriptHash.from_hex(validatorHash)),\n        toCore.credential(stakeCredential),\n      )\n        .to_address()\n        .to_bech32(undefined);\n    } else {\n      return C.EnterpriseAddress.new(\n        networkToId(this.translucent.network),\n        C.StakeCredential.from_scripthash(C.ScriptHash.from_hex(validatorHash)),\n      )\n        .to_address()\n        .to_bech32(undefined);\n    }\n  }\n\n  credentialToAddress(\n    paymentCredential: Credential,\n    stakeCredential?: Credential,\n  ): Address {\n    if (stakeCredential) {\n      return C.BaseAddress.new(\n        networkToId(this.translucent.network),\n        paymentCredential.type === \"Key\"\n          ? C.StakeCredential.from_keyhash(\n            C.Ed25519KeyHash.from_hex(paymentCredential.hash),\n          )\n          : C.StakeCredential.from_scripthash(\n            C.ScriptHash.from_hex(paymentCredential.hash),\n          ),\n        stakeCredential.type === \"Key\"\n          ? C.StakeCredential.from_keyhash(\n            C.Ed25519KeyHash.from_hex(stakeCredential.hash),\n          )\n          : C.StakeCredential.from_scripthash(\n            C.ScriptHash.from_hex(stakeCredential.hash),\n          ),\n      )\n        .to_address()\n        .to_bech32(undefined);\n    } else {\n      return C.EnterpriseAddress.new(\n        networkToId(this.translucent.network),\n        paymentCredential.type === \"Key\"\n          ? C.StakeCredential.from_keyhash(\n            C.Ed25519KeyHash.from_hex(paymentCredential.hash),\n          )\n          : C.StakeCredential.from_scripthash(\n            C.ScriptHash.from_hex(paymentCredential.hash),\n          ),\n      )\n        .to_address()\n        .to_bech32(undefined);\n    }\n  }\n\n  validatorToRewardAddress(\n    validator: CertificateValidator | WithdrawalValidator,\n  ): RewardAddress {\n    const validatorHash = this.validatorToScriptHash(validator);\n    return C.RewardAddress.new(\n      networkToId(this.translucent.network),\n      C.StakeCredential.from_scripthash(C.ScriptHash.from_hex(validatorHash)),\n    )\n      .to_address()\n      .to_bech32(undefined);\n  }\n\n  credentialToRewardAddress(stakeCredential: Credential): RewardAddress {\n    return C.RewardAddress.new(\n      networkToId(this.translucent.network),\n      stakeCredential.type === \"Key\"\n        ? C.StakeCredential.from_keyhash(\n          C.Ed25519KeyHash.from_hex(stakeCredential.hash),\n        )\n        : C.StakeCredential.from_scripthash(\n          C.ScriptHash.from_hex(stakeCredential.hash),\n        ),\n    )\n      .to_address()\n      .to_bech32(undefined);\n  }\n\n  validatorToScriptHash(validator: Validator): ScriptHash {\n    switch (validator.type) {\n      case \"Native\":\n        return C.NativeScript.from_bytes(fromHex(validator.script))\n          .hash()\n          .to_hex();\n      case \"PlutusV1\":\n        return C.PlutusScript.from_v1(\n          C.PlutusV1Script.from_bytes(\n            fromHex(applyDoubleCborEncoding(validator.script)),\n          ),\n        )\n          .hash()\n          .to_hex();\n      case \"PlutusV2\":\n        return C.PlutusScript.from_v2(\n          C.PlutusV2Script.from_bytes(\n            fromHex(applyDoubleCborEncoding(validator.script)),\n          ),\n        )\n          .hash()\n          .to_hex();\n      default:\n        throw new Error(\"No variant matched\");\n    }\n  }\n\n  mintingPolicyToId(mintingPolicy: MintingPolicy): PolicyId {\n    return this.validatorToScriptHash(mintingPolicy);\n  }\n\n  datumToHash(datum: Datum): DatumHash {\n    return C.hash_plutus_data(C.PlutusData.from_bytes(fromHex(datum))).to_hex();\n  }\n\n  scriptHashToCredential(scriptHash: ScriptHash): Credential {\n    return {\n      type: \"Script\",\n      hash: scriptHash,\n    };\n  }\n\n  keyHashToCredential(keyHash: KeyHash): Credential {\n    return {\n      type: \"Key\",\n      hash: keyHash,\n    };\n  }\n\n  generatePrivateKey(): PrivateKey {\n    return generatePrivateKey();\n  }\n\n  generateSeedPhrase(): string {\n    return generateSeedPhrase();\n  }\n\n  unixTimeToSlot(unixTime: UnixTime): Slot {\n    return unixTimeToEnclosingSlot(\n      unixTime,\n      SLOT_CONFIG_NETWORK[this.translucent.network],\n    );\n  }\n\n  slotToUnixTime(slot: Slot): UnixTime {\n    return slotToBeginUnixTime(\n      slot,\n      SLOT_CONFIG_NETWORK[this.translucent.network],\n    );\n  }\n\n  /** Address can be in Bech32 or Hex. */\n  getAddressDetails(address: string): AddressDetails {\n    return getAddressDetails(address);\n  }\n\n  /**\n   * Convert a native script from Json to the Hex representation.\n   * It follows this Json format: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n   */\n  nativeScriptFromJson(nativeScript: NativeScript): Script {\n    return nativeScriptFromJson(nativeScript);\n  }\n\n  paymentCredentialOf(address: Address): Credential {\n    return paymentCredentialOf(address);\n  }\n\n  stakeCredentialOf(rewardAddress: RewardAddress): Credential {\n    return stakeCredentialOf(rewardAddress);\n  }\n}\n\nfunction addressFromHexOrBech32(address: string): CAddress {\n  try {\n    return C.Address.from_bytes(fromHex(address));\n  } catch (_e) {\n    try {\n      return C.Address.from_bech32(address);\n    } catch (_e) {\n      throw new Error(\"Could not deserialize address.\");\n    }\n  }\n}\n\n/** Address can be in Bech32 or Hex. */\nexport function getAddressDetails(address: string): AddressDetails {\n  // Base Address\n  try {\n    const parsedAddress = C.BaseAddress.from_address(\n      addressFromHexOrBech32(address),\n    )!;\n    const paymentCredential: Credential =\n      parsedAddress.payment_cred().kind() === 0\n        ? {\n          type: \"Key\",\n          hash: toHex(parsedAddress.payment_cred().to_keyhash()!.to_bytes()),\n        }\n        : {\n          type: \"Script\",\n          hash: toHex(\n            parsedAddress.payment_cred().to_scripthash()!.to_bytes(),\n          ),\n        };\n    const stakeCredential: Credential =\n      parsedAddress.stake_cred().kind() === 0\n        ? {\n          type: \"Key\",\n          hash: toHex(parsedAddress.stake_cred().to_keyhash()!.to_bytes()),\n        }\n        : {\n          type: \"Script\",\n          hash: toHex(parsedAddress.stake_cred().to_scripthash()!.to_bytes()),\n        };\n    return {\n      type: \"Base\",\n      networkId: parsedAddress.to_address().network_id(),\n      address: {\n        bech32: parsedAddress.to_address().to_bech32(undefined),\n        hex: toHex(parsedAddress.to_address().to_bytes()),\n      },\n      paymentCredential,\n      stakeCredential,\n    };\n  } catch (_e) {\n    /* pass */\n  }\n\n  // Enterprise Address\n  try {\n    const parsedAddress = C.EnterpriseAddress.from_address(\n      addressFromHexOrBech32(address),\n    )!;\n    const paymentCredential: Credential =\n      parsedAddress.payment_cred().kind() === 0\n        ? {\n          type: \"Key\",\n          hash: toHex(parsedAddress.payment_cred().to_keyhash()!.to_bytes()),\n        }\n        : {\n          type: \"Script\",\n          hash: toHex(\n            parsedAddress.payment_cred().to_scripthash()!.to_bytes(),\n          ),\n        };\n    return {\n      type: \"Enterprise\",\n      networkId: parsedAddress.to_address().network_id(),\n      address: {\n        bech32: parsedAddress.to_address().to_bech32(undefined),\n        hex: toHex(parsedAddress.to_address().to_bytes()),\n      },\n      paymentCredential,\n    };\n  } catch (_e) {\n    /* pass */\n  }\n\n  // Pointer Address\n  try {\n    const parsedAddress = C.PointerAddress.from_address(\n      addressFromHexOrBech32(address),\n    )!;\n    const paymentCredential: Credential =\n      parsedAddress.payment_cred().kind() === 0\n        ? {\n          type: \"Key\",\n          hash: toHex(parsedAddress.payment_cred().to_keyhash()!.to_bytes()),\n        }\n        : {\n          type: \"Script\",\n          hash: toHex(\n            parsedAddress.payment_cred().to_scripthash()!.to_bytes(),\n          ),\n        };\n    return {\n      type: \"Pointer\",\n      networkId: parsedAddress.to_address().network_id(),\n      address: {\n        bech32: parsedAddress.to_address().to_bech32(undefined),\n        hex: toHex(parsedAddress.to_address().to_bytes()),\n      },\n      paymentCredential,\n    };\n  } catch (_e) {\n    /* pass */\n  }\n\n  // Reward Address\n  try {\n    const parsedAddress = C.RewardAddress.from_address(\n      addressFromHexOrBech32(address),\n    )!;\n    const stakeCredential: Credential =\n      parsedAddress.payment_cred().kind() === 0\n        ? {\n          type: \"Key\",\n          hash: toHex(parsedAddress.payment_cred().to_keyhash()!.to_bytes()),\n        }\n        : {\n          type: \"Script\",\n          hash: toHex(\n            parsedAddress.payment_cred().to_scripthash()!.to_bytes(),\n          ),\n        };\n    return {\n      type: \"Reward\",\n      networkId: parsedAddress.to_address().network_id(),\n      address: {\n        bech32: parsedAddress.to_address().to_bech32(undefined),\n        hex: toHex(parsedAddress.to_address().to_bytes()),\n      },\n      stakeCredential,\n    };\n  } catch (_e) {\n    /* pass */\n  }\n\n  // Limited support for Byron addresses\n  try {\n    const parsedAddress = ((address: string): CByronAddress => {\n      try {\n        return C.ByronAddress.from_bytes(fromHex(address));\n      } catch (_e) {\n        try {\n          return C.ByronAddress.from_base58(address);\n        } catch (_e) {\n          throw new Error(\"Could not deserialize address.\");\n        }\n      }\n    })(address);\n\n    return {\n      type: \"Byron\",\n      networkId: parsedAddress.to_address().network_id(),\n      address: {\n        bech32: \"\",\n        hex: toHex(parsedAddress.to_address().to_bytes()),\n      },\n    };\n  } catch (_e) {\n    /* pass */\n  }\n\n  throw new Error(\"No address type matched for: \" + address);\n}\n\nexport function paymentCredentialOf(address: Address): Credential {\n  const { paymentCredential } = getAddressDetails(address);\n  if (!paymentCredential) {\n    throw new Error(\n      \"The specified address does not contain a payment credential.\",\n    );\n  }\n  return paymentCredential;\n}\n\nexport function stakeCredentialOf(rewardAddress: RewardAddress): Credential {\n  const { stakeCredential } = getAddressDetails(rewardAddress);\n  if (!stakeCredential) {\n    throw new Error(\n      \"The specified address does not contain a stake credential.\",\n    );\n  }\n  return stakeCredential;\n}\n\nexport function generatePrivateKey(): PrivateKey {\n  return C.PrivateKey.generate_ed25519().to_bech32();\n}\n\nexport function generateSeedPhrase(): string {\n  return generateMnemonic(256);\n}\n\nexport function valueToAssets(value: CValue): Assets {\n  const assets: Assets = {};\n  assets[\"lovelace\"] = BigInt(value.coin().to_str());\n  const ma = value.multiasset();\n  if (ma) {\n    const multiAssets = ma.keys();\n    for (let j = 0; j < multiAssets.len(); j++) {\n      const policy = multiAssets.get(j);\n      const policyAssets = ma.get(policy)!;\n      const assetNames = policyAssets.keys();\n      for (let k = 0; k < assetNames.len(); k++) {\n        const policyAsset = assetNames.get(k);\n        const quantity = policyAssets.get(policyAsset)!;\n        const unit = toHex(policy.to_bytes()) + toHex(policyAsset.name());\n        assets[unit] = BigInt(quantity.to_str());\n      }\n    }\n  }\n  return assets;\n}\n\nexport function assetsToValue(assets: Assets): CValue {\n  const multiAsset = C.MultiAsset.new();\n  const lovelace = assets[\"lovelace\"];\n  const units = Object.keys(assets);\n  const policies = Array.from(\n    new Set(\n      units\n        .filter((unit) => unit !== \"lovelace\")\n        .map((unit) => unit.slice(0, 56)),\n    ),\n  );\n  policies.forEach((policy) => {\n    const policyUnits = units.filter((unit) => unit.slice(0, 56) === policy);\n    const assetsValue = C.Assets.new();\n    policyUnits.forEach((unit) => {\n      assetsValue.insert(\n        C.AssetName.new(fromHex(unit.slice(56))),\n        C.BigNum.from_str(assets[unit].toString()),\n      );\n    });\n    multiAsset.insert(C.ScriptHash.from_bytes(fromHex(policy)), assetsValue);\n  });\n  const value = C.Value.new(\n    C.BigNum.from_str(lovelace ? lovelace.toString() : \"0\"),\n  );\n  if (units.length > 1 || !lovelace) value.set_multiasset(multiAsset);\n  return value;\n}\n\nexport function fromScriptRef(scriptRef: CScriptRef): Script {\n  const kind = scriptRef.script().kind();\n  switch (kind) {\n    case 0:\n      return {\n        type: \"Native\",\n        script: toHex(scriptRef.script().as_native()!.to_bytes()),\n      };\n    case 1:\n      return {\n        type: \"PlutusV1\",\n        script: toHex(scriptRef.script().as_plutus_v1()!.to_bytes()),\n      };\n    case 2:\n      return {\n        type: \"PlutusV2\",\n        script: toHex(scriptRef.script().as_plutus_v2()!.to_bytes()),\n      };\n    default:\n      throw new Error(\"No variant matched.\");\n  }\n}\n\nexport function toScriptRef(script: Script): CScriptRef {\n  switch (script.type) {\n    case \"Native\":\n      return C.ScriptRef.new(\n        C.Script.new_native(C.NativeScript.from_bytes(fromHex(script.script))),\n      );\n    case \"PlutusV1\":\n      return C.ScriptRef.new(\n        C.Script.new_plutus_v1(\n          C.PlutusV1Script.from_bytes(\n            fromHex(applyDoubleCborEncoding(script.script)),\n          ),\n        ),\n      );\n    case \"PlutusV2\":\n      return C.ScriptRef.new(\n        C.Script.new_plutus_v2(\n          C.PlutusV2Script.from_bytes(\n            fromHex(applyDoubleCborEncoding(script.script)),\n          ),\n        ),\n      );\n    default:\n      throw new Error(\"No variant matched.\");\n  }\n}\n\nexport function utxoToCore(utxo: UTxO): CTransactionUnspentOutput {\n  const address: CAddress = (() => {\n    try {\n      return C.Address.from_bech32(utxo.address);\n    } catch (_e) {\n      return C.ByronAddress.from_base58(utxo.address).to_address();\n    }\n  })();\n  const output = C.TransactionOutput.new(address, assetsToValue(utxo.assets));\n  if (utxo.datumHash) {\n    output.set_datum(\n      C.Datum.new_data_hash(C.DataHash.from_bytes(fromHex(utxo.datumHash))),\n    );\n  }\n  // inline datum\n  if (!utxo.datumHash && utxo.datum) {\n    output.set_datum(\n      C.Datum.new_data(C.PlutusData.from_bytes(fromHex(utxo.datum))),\n    );\n  }\n\n  if (utxo.scriptRef) {\n    output.set_script_ref(toScriptRef(utxo.scriptRef));\n  }\n\n  return C.TransactionUnspentOutput.new(\n    C.TransactionInput.new(\n      C.TransactionHash.from_bytes(fromHex(utxo.txHash)),\n      C.BigNum.from_str(utxo.outputIndex.toString()),\n    ),\n    output,\n  );\n}\n\nexport function coreToUtxo(coreUtxo: CTransactionUnspentOutput): UTxO {\n  return {\n    txHash: toHex(coreUtxo.input().transaction_id().to_bytes()),\n    outputIndex: parseInt(coreUtxo.input().index().to_str()),\n    assets: valueToAssets(coreUtxo.output().amount()),\n    address: coreUtxo.output().address().as_byron()\n      ? coreUtxo.output().address().as_byron()?.to_base58()!\n      : coreUtxo.output().address().to_bech32(undefined),\n    datumHash: coreUtxo.output()?.datum()?.as_data_hash()?.to_hex(),\n    datum:\n      coreUtxo.output()?.datum()?.as_inline_data() &&\n      toHex(coreUtxo.output().datum()!.as_inline_data()!.to_bytes()),\n    scriptRef:\n      coreUtxo.output()?.script_ref() &&\n      fromScriptRef(coreUtxo.output().script_ref()!),\n  };\n}\n\nexport function networkToId(network: Network): number {\n  switch (network) {\n    case \"Preview\":\n      return 0;\n    case \"Preprod\":\n      return 0;\n    case \"Custom\":\n      return 0;\n    case \"Mainnet\":\n      return 1;\n    default:\n      throw new Error(\"Network not found\");\n  }\n}\n\nexport function fromHex(hex: string): Uint8Array {\n  const matched = hex.match(/.{1,2}/g);\n  return new Uint8Array(\n    matched ? matched.map((byte) => parseInt(byte, 16)) : [],\n  );\n}\n\nexport function toHex(bytes: Uint8Array): string {\n  return Array.from(bytes)\n    .map((byte) => byte.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n}\n\n/** Convert a Hex encoded string to a Utf-8 encoded string. */\nexport function toText(hex: string): string {\n  return new TextDecoder().decode(fromHex(hex));\n}\n\n/** Convert a Utf-8 encoded string to a Hex encoded string. */\nexport function fromText(text: string): string {\n  return toHex(new TextEncoder().encode(text));\n}\n\nexport function toPublicKey(privateKey: PrivateKey): PublicKey {\n  return C.PrivateKey.from_bech32(privateKey).to_public().to_bech32();\n}\n\n/** Padded number in Hex. */\nfunction checksum(num: string): string {\n  return crc8(fromHex(num)).toString(16).padStart(2, \"0\");\n}\n\nexport function toLabel(num: number): string {\n  if (num < 0 || num > 65535) {\n    throw new Error(\n      `Label ${num} out of range: min label 1 - max label 65535.`,\n    );\n  }\n  const numHex = num.toString(16).padStart(4, \"0\");\n  return \"0\" + numHex + checksum(numHex) + \"0\";\n}\n\nexport function fromLabel(label: string): number | null {\n  if (label.length !== 8 || !(label[0] === \"0\" && label[7] === \"0\")) {\n    return null;\n  }\n  const numHex = label.slice(1, 5);\n  const num = parseInt(numHex, 16);\n  const check = label.slice(5, 7);\n  return check === checksum(numHex) ? num : null;\n}\n\n/**\n * @param name Hex encoded\n */\nexport function toUnit(\n  policyId: PolicyId,\n  name?: string | null,\n  label?: number | null,\n): Unit {\n  const hexLabel = Number.isInteger(label) ? toLabel(label!) : \"\";\n  const n = name ? name : \"\";\n  if ((n + hexLabel).length > 64) {\n    throw new Error(\"Asset name size exceeds 32 bytes.\");\n  }\n  if (policyId.length !== 56) {\n    throw new Error(`Policy id invalid: ${policyId}.`);\n  }\n  return policyId + hexLabel + n;\n}\n\n/**\n * Splits unit into policy id, asset name (entire asset name), name (asset name without label) and label if applicable.\n * name will be returned in Hex.\n */\nexport function fromUnit(unit: Unit): {\n  policyId: PolicyId;\n  assetName: string | null;\n  name: string | null;\n  label: number | null;\n} {\n  const policyId = unit.slice(0, 56);\n  const assetName = unit.slice(56) || null;\n  const label = fromLabel(unit.slice(56, 64));\n  const name = (() => {\n    const hexName = Number.isInteger(label) ? unit.slice(64) : unit.slice(56);\n    return hexName || null;\n  })();\n  return { policyId, assetName, name, label };\n}\n\n/**\n * Convert a native script from Json to the Hex representation.\n * It follows this Json format: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n */\nexport function nativeScriptFromJson(nativeScript: NativeScript): Script {\n  return {\n    type: \"Native\",\n    script: toHex(doNativeScriptFromJSON(nativeScript).to_bytes()),\n  };\n}\n\nfunction doNativeScriptFromJSON(nativeScript: NativeScript): CNativeScript {\n  if (nativeScript.type === \"sig\") {\n    return C.NativeScript.new_script_pubkey(\n      C.ScriptPubkey.new(C.Ed25519KeyHash.from_hex(nativeScript.keyHash)),\n    );\n  } else if (nativeScript.type === \"all\") {\n    const nativeScripts = C.NativeScripts.new();\n    for (const subScript of nativeScript.scripts) {\n      let subNativeScript = doNativeScriptFromJSON(subScript);\n      nativeScripts.add(subNativeScript);\n    }\n    return C.NativeScript.new_script_all(C.ScriptAll.new(nativeScripts));\n  } else if (nativeScript.type === \"any\") {\n    const nativeScripts = C.NativeScripts.new();\n    for (const subScript of nativeScript.scripts) {\n      let subNativeScript = doNativeScriptFromJSON(subScript);\n      nativeScripts.add(subNativeScript);\n    }\n    return C.NativeScript.new_script_all(C.ScriptAny.new(nativeScripts));\n  } else if (nativeScript.type === \"before\") {\n    return C.NativeScript.new_timelock_expiry(\n      C.TimelockExpiry.new(C.BigNum.from_str(nativeScript.slot.toString())),\n    );\n  } else if (nativeScript.type === \"after\") {\n    return C.NativeScript.new_timelock_start(\n      C.TimelockStart.new(C.BigNum.from_str(nativeScript.slot.toString())),\n    );\n  } else if (nativeScript.type === \"atLeast\") {\n    const nativeScripts = C.NativeScripts.new();\n    for (const subScript of nativeScript.scripts) {\n      let subNativeScript = doNativeScriptFromJSON(subScript);\n      nativeScripts.add(subNativeScript);\n    }\n    return C.NativeScript.new_script_n_of_k(\n      C.ScriptNOfK.new(nativeScript.required, nativeScripts),\n    );\n  }\n  throw \"No nativescript type variants matched\";\n}\n\nexport function applyParamsToScript<T extends unknown[] = Data[]>(\n  plutusScript: string,\n  params: Exact<[...T]>,\n  type?: T,\n): string {\n  const p = (type ? Data.castTo<T>(params, type) : params) as Data[];\n  return toHex(\n    U.apply_params_to_script(fromHex(Data.to(p)), fromHex(plutusScript)),\n  );\n}\n\n/** Returns double cbor encoded script. If script is already double cbor encoded it's returned as it is. */\nexport function applyDoubleCborEncoding(script: string): string {\n  try {\n    C.PlutusV2Script.from_bytes(\n      C.PlutusV2Script.from_bytes(fromHex(script)).bytes(),\n    );\n    return script;\n  } catch (_e) {\n    return toHex(C.PlutusV2Script.new(fromHex(script)).to_bytes());\n  }\n}\n\nexport function addAssets(...assets: Assets[]): Assets {\n  return assets.reduce((a, b) => {\n    for (const k in b) {\n      if (Object.hasOwn(b, k)) {\n        a[k] = (a[k] || 0n) + b[k];\n      }\n    }\n    return a;\n  }, {});\n}\n","import { C, CTransaction } from \"../core/mod\";\nimport type { Transaction, TxHash } from \"../types/mod\";\nimport { Translucent } from \"./translucent\";\nimport { toHex } from \"../utils/mod\";\n\nexport class TxSigned {\n  txSigned: CTransaction;\n  private translucent: Translucent;\n  constructor(translucent: Translucent, tx: CTransaction) {\n    this.translucent = translucent;\n    this.txSigned = tx;\n  }\n\n  async submit(): Promise<TxHash> {\n    return await (\n      this.translucent.wallet || this.translucent.provider\n    ).submitTx(toHex(this.txSigned.to_bytes()));\n  }\n\n  /** Returns the transaction in Hex encoded Cbor. */\n  toString(): Transaction {\n    return toHex(this.txSigned.to_bytes());\n  }\n\n  /** Return the transaction hash. */\n  toHash(): TxHash {\n    return C.hash_transaction(this.txSigned.body()).to_hex();\n  }\n}\n","import { C, CTransaction } from \"../core/mod\";\nimport type {\n  PrivateKey,\n  Transaction,\n  TransactionWitnesses,\n  TxHash,\n} from \"../types/mod\";\nimport { Translucent } from \"./translucent\";\nimport { TxSigned } from \"./tx_signed\";\nimport { fromHex, toHex } from \"../utils/mod\";\n\nexport class TxComplete {\n  txComplete: CTransaction;\n  witnessSetBuilder;\n  private tasks: (() => Promise<void>)[];\n  private translucent: Translucent;\n  fee: number;\n  exUnits: { cpu: number; mem: number } | null = null;\n\n  constructor(translucent: Translucent, tx: CTransaction) {\n    this.translucent = translucent;\n    this.txComplete = tx;\n    this.witnessSetBuilder = C.TransactionWitnessSetBuilder.new();\n    this.tasks = [];\n\n    this.fee = parseInt(tx.body().fee().to_str());\n    const redeemers = tx.witness_set().redeemers();\n    if (redeemers) {\n      const exUnits = { cpu: 0, mem: 0 };\n      for (let i = 0; i < redeemers.len(); i++) {\n        const redeemer = redeemers.get(i);\n        exUnits.cpu += parseInt(redeemer.ex_units().steps().to_str());\n        exUnits.mem += parseInt(redeemer.ex_units().mem().to_str());\n      }\n      this.exUnits = exUnits;\n    }\n  }\n  sign(): TxComplete {\n    this.tasks.push(async () => {\n      const witnesses = await this.translucent.wallet.signTx(this.txComplete);\n      this.witnessSetBuilder.add_existing(witnesses);\n    });\n    return this;\n  }\n\n  /** Add an extra signature from a private key. */\n  signWithPrivateKey(privateKey: PrivateKey): TxComplete {\n    const priv = C.PrivateKey.from_bech32(privateKey);\n    const witness = C.make_vkey_witness(\n      C.hash_transaction(this.txComplete.body()),\n      priv,\n    );\n    this.witnessSetBuilder.add_vkey(witness);\n    return this;\n  }\n\n  /** Sign the transaction and return the witnesses that were just made. */\n  async partialSign(): Promise<TransactionWitnesses> {\n    const witnesses = await this.translucent.wallet.signTx(this.txComplete);\n    this.witnessSetBuilder.add_existing(witnesses);\n    return toHex(witnesses.to_bytes());\n  }\n\n  /**\n   * Sign the transaction and return the witnesses that were just made.\n   * Add an extra signature from a private key.\n   */\n  partialSignWithPrivateKey(privateKey: PrivateKey): TransactionWitnesses {\n    const priv = C.PrivateKey.from_bech32(privateKey);\n    const witness = C.make_vkey_witness(\n      C.hash_transaction(this.txComplete.body()),\n      priv,\n    );\n    this.witnessSetBuilder.add_vkey(witness);\n    const witnesses = C.TransactionWitnessSetBuilder.new();\n    witnesses.add_vkey(witness);\n    return toHex(witnesses.build().to_bytes());\n  }\n\n  /** Sign the transaction with the given witnesses. */\n  assemble(witnesses: TransactionWitnesses[]): TxComplete {\n    witnesses.forEach((witness) => {\n      const witnessParsed = C.TransactionWitnessSet.from_bytes(\n        fromHex(witness),\n      );\n      this.witnessSetBuilder.add_existing(witnessParsed);\n    });\n    return this;\n  }\n\n  async complete(): Promise<TxSigned> {\n    for (const task of this.tasks) {\n      await task();\n    }\n\n    this.witnessSetBuilder.add_existing(this.txComplete.witness_set());\n    const signedTx = C.Transaction.new(\n      this.txComplete.body(),\n      this.witnessSetBuilder.build(),\n      this.txComplete.auxiliary_data(),\n    );\n    return new TxSigned(this.translucent, signedTx);\n  }\n\n  /** Return the transaction in Hex encoded Cbor. */\n  toString(): Transaction {\n    return toHex(this.txComplete.to_bytes());\n  }\n\n  /** Return the transaction hash. */\n  toHash(): TxHash {\n    return C.hash_transaction(this.txComplete.body()).to_hex();\n  }\n}\n","import { C, CAddress, CCertificateBuilderResult, CInputBuilderResult, CMintBuilderResult, CNativeScript, CPlutusScript, CPlutusV2Script, CPoolRegistration, CRedeemer, CTransactionBuilder, CTransactionUnspentOutput, CWithdrawalBuilderResult, U } from \"../core/mod\";\nimport { Data } from \"../mod\";\nimport type {\n  Address,\n  Assets,\n  CertificateValidator,\n  Datum,\n  Json,\n  Label,\n  Lovelace,\n  MintingPolicy,\n  OutputData,\n  PaymentKeyHash,\n  PoolId,\n  PoolParams,\n  ProtocolParameters,\n  Redeemer,\n  RewardAddress,\n  SlotConfig,\n  SpendingValidator,\n  StakeKeyHash,\n  UnixTime,\n  UTxO,\n  WithdrawalValidator,\n} from \"../types/mod.ts\";\nimport {\n  assetsToValue,\n  createCostModels,\n  fromHex,\n  networkToId,\n  PROTOCOL_PARAMETERS_DEFAULT,\n  toScriptRef,\n  utxoToCore,\n} from \"../utils/mod\";\nimport { applyDoubleCborEncoding } from \"../utils/utils\";\nimport { Translucent } from \"./translucent\";\nimport { TxComplete } from \"./tx_complete\";\nimport { SLOT_CONFIG_NETWORK } from \"../plutus/time\";\nimport { toCore } from \"../utils/to\";\n\ntype ScriptOrRef =\n  | { inlineScript: CPlutusScript }\n  | { referenceScript: CPlutusV2Script };\n\nexport class Tx {\n  txBuilder: CTransactionBuilder;\n\n  private scripts: Record<string, ScriptOrRef>;\n  private native_scripts: Record<string, CNativeScript>;\n  /** Stores the tx instructions, which get executed after calling .complete() */\n  private tasks: ((that: Tx) => unknown)[];\n  private earlyTasks: ((that: Tx) => unknown)[];\n  private translucent: Translucent;\n\n  private UTxOs: CTransactionUnspentOutput[] = [];\n  private referencedUTxOs: CTransactionUnspentOutput[] = [];\n\n  constructor(translucent: Translucent) {\n    this.translucent = translucent;\n    this.txBuilder = C.TransactionBuilder.new(this.translucent.txBuilderConfig);\n    this.tasks = [];\n    this.earlyTasks = [];\n    this.scripts = {};\n    this.native_scripts = {};\n  }\n\n  /** Read data from utxos. These utxos are only referenced and not spent. */\n  readFrom(utxos: UTxO[]): Tx {\n    this.earlyTasks.push(async (that) => {\n      for (const utxo of utxos) {\n        if (utxo.datumHash) {\n          throw \"Reference hash not supported\";\n          // utxo.datum = Data.to(await that.translucent.datumOf(utxo));\n          // // Add datum to witness set, so it can be read from validators\n          // const plutusData = C.PlutusData.from_bytes(fromHex(utxo.datum!));\n          // that.txBuilder.add_plutus_data(plutusData);\n        }\n        const coreUtxo = utxoToCore(utxo);\n        {\n          let scriptRef = coreUtxo.output().script_ref();\n          if (scriptRef) {\n            let script = scriptRef.script();\n            if (!script.as_plutus_v2()) {\n              throw \"Reference script wasn't V2 compatible\";\n            }\n            this.scripts[script.hash().to_hex()] = {\n              referenceScript: script.as_plutus_v2()!,\n            };\n          }\n        }\n        this.referencedUTxOs.push(coreUtxo);\n        that.txBuilder.add_reference_input(coreUtxo);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A public key or native script input.\n   * With redeemer it's a plutus script input.\n   */\n  collectFrom(utxos: UTxO[], redeemer?: Redeemer): Tx {\n    this.tasks.push(async (that) => {\n      for (const utxo of utxos) {\n        if (utxo.datumHash && !utxo.datum) {\n          utxo.datum = Data.to(await that.translucent.datumOf(utxo));\n        }\n        const coreUtxo = utxoToCore(utxo);\n        this.UTxOs.push(coreUtxo);\n        let inputBuilder = C.SingleInputBuilder.new(\n          coreUtxo.input(),\n          coreUtxo.output(),\n        );\n        let mr: CInputBuilderResult;\n        let address = coreUtxo.output().address();\n        let paymentCredential = address.payment_cred();\n        if (redeemer && paymentCredential?.to_scripthash()) {\n          let paymentCredential = address.payment_cred();\n          if (!paymentCredential) {\n            throw \"Address has no payment credential\";\n          }\n          if (!paymentCredential.to_scripthash()) {\n            throw \"Address isn't a scripthash but has a redeemer\";\n          }\n          let scriptHash = paymentCredential.to_scripthash()!.to_hex();\n          let script = this.scripts[scriptHash];\n          if (!script) {\n            throw \"Script was not attached for UTxO spend\";\n          }\n          let datum = coreUtxo.output().datum()?.as_inline_data();\n          if (\"inlineScript\" in script) {\n            mr = inputBuilder.plutus_script(\n              C.PartialPlutusWitness.new(\n                C.PlutusScriptWitness.from_script(script.inlineScript),\n                C.PlutusData.from_bytes(fromHex(redeemer)),\n              ),\n              C.Ed25519KeyHashes.new(),\n              datum!,\n            );\n          } else {\n            mr = inputBuilder.plutus_script(\n              C.PartialPlutusWitness.new(\n                C.PlutusScriptWitness.from_ref(script.referenceScript.hash()),\n                C.PlutusData.from_bytes(fromHex(redeemer)),\n              ),\n              C.Ed25519KeyHashes.new(),\n              datum!,\n            );\n          }\n        } else {\n          let payCred = coreUtxo.output().address().payment_cred();\n          if (payCred?.kind() == 0) {\n            mr = inputBuilder.payment_key();\n          } else {\n            let scriptHash = payCred?.to_scripthash()?.to_hex().toString()!;\n            let ns = this.native_scripts[scriptHash];\n            if (!ns) {\n              throw \"No native script was found for your mint without redeemer!\";\n            }\n            mr = inputBuilder.native_script(\n              ns,\n              C.NativeScriptWitnessInfo.assume_signature_count(),\n            );\n          }\n        }\n        that.txBuilder.add_input(mr);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * All assets should be of the same policy id.\n   * You can chain mintAssets functions together if you need to mint assets with different policy ids.\n   * If the plutus script doesn't need a redeemer, you still need to specifiy the void redeemer.\n   */\n  mintAssets(assets: Assets, redeemer?: Redeemer): Tx {\n    this.tasks.push((that) => {\n      const units = Object.keys(assets);\n      const policyId = units[0].slice(0, 56);\n      const mintAssets = C.MintAssets.new();\n      units.forEach((unit) => {\n        if (unit.slice(0, 56) !== policyId) {\n          throw new Error(\n            \"Only one policy id allowed. You can chain multiple mintAssets functions together if you need to mint assets with different policy ids.\",\n          );\n        }\n        mintAssets.insert(\n          C.AssetName.new(fromHex(unit.slice(56))),\n          C.Int.from_str(assets[unit].toString()),\n        );\n      });\n      let mintBuilder = C.SingleMintBuilder.new(mintAssets);\n      let mr: CMintBuilderResult;\n      if (redeemer) {\n        let script = this.scripts[policyId];\n        if (!script) {\n          throw \"Scripts must be attached BEFORE they are used\";\n        }\n        if (\"inlineScript\" in script) {\n          mr = mintBuilder.plutus_script(\n            C.PartialPlutusWitness.new(\n              C.PlutusScriptWitness.from_script(script.inlineScript),\n              C.PlutusData.from_bytes(fromHex(redeemer)),\n            ),\n            C.Ed25519KeyHashes.new(),\n          );\n        } else {\n          mr = mintBuilder.plutus_script(\n            C.PartialPlutusWitness.new(\n              C.PlutusScriptWitness.from_ref(script.referenceScript.hash()),\n              C.PlutusData.from_bytes(fromHex(redeemer)),\n            ),\n            C.Ed25519KeyHashes.new(),\n          );\n        }\n      } else {\n        let ns = this.native_scripts[policyId];\n        if (!ns) {\n          throw \"No native script was found for your mint without redeemer!\";\n        }\n        mr = mintBuilder.native_script(\n          ns,\n          C.NativeScriptWitnessInfo.assume_signature_count(),\n        );\n      }\n      that.txBuilder.add_mint(mr!);\n    });\n    return this;\n  }\n\n  /** Pay to a public key or native script address. */\n  payToAddress(address: Address, assets: Assets): Tx {\n    this.tasks.push(async (that) => {\n      const output = C.TransactionOutput.new(\n        addressFromWithNetworkCheck(address, that.translucent),\n        assetsToValue(assets),\n      );\n      let outputBuilder = C.TransactionOutputBuilder.new();\n      let outputAddress = addressFromWithNetworkCheck(\n        address,\n        that.translucent,\n      );\n      outputBuilder = outputBuilder.with_address(outputAddress);\n      let valueBuilder = outputBuilder.next();\n      let assetsC = assetsToValue(assets);\n      let params = this.translucent.provider\n        ? await this.translucent.provider.getProtocolParameters()\n        : PROTOCOL_PARAMETERS_DEFAULT;\n      {\n        let masset = assetsC.multiasset() || C.MultiAsset.new();\n        valueBuilder = valueBuilder.with_asset_and_min_required_coin(\n          masset,\n          C.BigNum.from_str(params.coinsPerUtxoByte.toString()),\n        );\n        let output = valueBuilder.build();\n        let coin = Math.max(\n          parseInt(output.output().amount().coin().to_str()),\n          Number(assets.lovelace || 0),\n        );\n        valueBuilder = valueBuilder.with_coin_and_asset(\n          C.BigNum.from_str(coin.toString()),\n          masset,\n        );\n      }\n      that.txBuilder.add_output(valueBuilder.build());\n    });\n    return this;\n  }\n\n  /** Pay to a public key or native script address with datum or scriptRef. */\n  payToAddressWithData(\n    address: Address,\n    outputData: Datum | OutputData,\n    assets: Assets,\n  ): Tx {\n    this.tasks.push(async (that) => {\n      if (typeof outputData === \"string\") {\n        outputData = { asHash: outputData };\n      }\n\n      if (\n        [outputData.hash, outputData.asHash, outputData.inline].filter((b) => b)\n          .length > 1\n      ) {\n        throw new Error(\n          \"Not allowed to set hash, asHash and inline at the same time.\",\n        );\n      }\n      let outputBuilder = C.TransactionOutputBuilder.new();\n      let outputAddress = addressFromWithNetworkCheck(\n        address,\n        that.translucent,\n      );\n      outputBuilder = outputBuilder.with_address(outputAddress);\n\n      if (outputData.hash) {\n      } else if (outputData.asHash) {\n        throw \"no support for as hash\";\n      } else if (outputData.inline) {\n        const plutusData = C.PlutusData.from_bytes(fromHex(outputData.inline));\n        outputBuilder = outputBuilder.with_data(C.Datum.new_data(plutusData));\n      }\n\n      const script = outputData.scriptRef;\n      if (script) {\n        outputBuilder = outputBuilder.with_reference_script(\n          toScriptRef(script),\n        );\n      }\n      let valueBuilder = outputBuilder.next();\n      let assetsC = assetsToValue(assets);\n      let params = this.translucent.provider\n        ? await this.translucent.provider.getProtocolParameters()\n        : PROTOCOL_PARAMETERS_DEFAULT;\n      {\n        let masset = assetsC.multiasset() || C.MultiAsset.new();\n        valueBuilder = valueBuilder.with_asset_and_min_required_coin(\n          masset,\n          C.BigNum.from_str(params.coinsPerUtxoByte.toString()),\n        );\n        let output = valueBuilder.build();\n        let coin = Math.max(\n          parseInt(output.output().amount().coin().to_str()),\n          Number(assets.lovelace || 0),\n        );\n        valueBuilder = valueBuilder.with_coin_and_asset(\n          C.BigNum.from_str(coin.toString()),\n          masset,\n        );\n      }\n      let output = valueBuilder.build();\n      that.txBuilder.add_output(output);\n    });\n    return this;\n  }\n\n  /** Pay to a plutus script address with datum or scriptRef. */\n  payToContract(\n    address: Address,\n    outputData: Datum | OutputData,\n    assets: Assets,\n  ): Tx {\n    if (typeof outputData === \"string\") {\n      outputData = { asHash: outputData };\n    }\n\n    if (!(outputData.hash || outputData.asHash || outputData.inline)) {\n      throw new Error(\n        \"No datum set. Script output becomes unspendable without datum.\",\n      );\n    }\n    return this.payToAddressWithData(address, outputData, assets);\n  }\n\n  /** Delegate to a stake pool. */\n  delegateTo(\n    rewardAddress: RewardAddress,\n    poolId: PoolId,\n    redeemer?: Redeemer,\n  ): Tx {\n    this.tasks.push((that) => {\n      const addressDetails =\n        that.translucent.utils.getAddressDetails(rewardAddress);\n\n      if (addressDetails.type !== \"Reward\" || !addressDetails.stakeCredential) {\n        throw new Error(\"Not a reward address provided.\");\n      }\n      const credential = toCore.credential(addressDetails.stakeCredential);\n\n      let certBuilder = C.SingleCertificateBuilder.new(\n        C.Certificate.new_stake_delegation(\n          C.StakeDelegation.new(\n            credential,\n            C.Ed25519KeyHash.from_bech32(poolId),\n          ),\n        ),\n      );\n      let cr: CCertificateBuilderResult;\n      if (redeemer) {\n        let script = this.scripts[credential.to_scripthash()?.to_hex()!];\n        if (!script) {\n          throw \"Scripts must be attached BEFORE they are used\";\n        }\n        if (\"inlineScript\" in script) {\n          cr = certBuilder.plutus_script(\n            C.PartialPlutusWitness.new(\n              C.PlutusScriptWitness.from_script(script.inlineScript),\n              C.PlutusData.from_bytes(fromHex(redeemer)),\n            ),\n            C.Ed25519KeyHashes.new(),\n          );\n        } else {\n          cr = certBuilder.plutus_script(\n            C.PartialPlutusWitness.new(\n              C.PlutusScriptWitness.from_ref(script.referenceScript.hash()),\n              C.PlutusData.from_bytes(fromHex(redeemer)),\n            ),\n            C.Ed25519KeyHashes.new(),\n          );\n        }\n      } else {\n        if (credential.kind() == 0) {\n          cr = certBuilder.payment_key();\n        } else {\n          let ns = this.native_scripts[credential.to_scripthash()?.to_hex()!];\n          if (!ns) {\n            throw \"Script with no redeemer should be a nativescript, but none provided\";\n          } else {\n            cr = certBuilder.native_script(\n              ns,\n              C.NativeScriptWitnessInfo.assume_signature_count(),\n            );\n          }\n        }\n      }\n\n      that.txBuilder.add_cert(cr);\n    });\n    return this;\n  }\n\n  /** Register a reward address in order to delegate to a pool and receive rewards. */\n  registerStake(rewardAddress: RewardAddress): Tx {\n    this.tasks.push((that) => {\n      const addressDetails =\n        that.translucent.utils.getAddressDetails(rewardAddress);\n\n      if (addressDetails.type !== \"Reward\" || !addressDetails.stakeCredential) {\n        throw new Error(\"Not a reward address provided.\");\n      }\n      const credential = toCore.credential(addressDetails.stakeCredential);\n\n      that.txBuilder.add_cert(\n        C.SingleCertificateBuilder.new(\n          C.Certificate.new_stake_registration(\n            C.StakeRegistration.new(credential),\n          ),\n        ).skip_witness(),\n      );\n    });\n    return this;\n  }\n\n  /** Deregister a reward address. */\n  deregisterStake(rewardAddress: RewardAddress, redeemer?: Redeemer): Tx {\n    this.tasks.push((that) => {\n      const addressDetails =\n        that.translucent.utils.getAddressDetails(rewardAddress);\n\n      if (addressDetails.type !== \"Reward\" || !addressDetails.stakeCredential) {\n        throw new Error(\"Not a reward address provided.\");\n      }\n      const credential =\n        addressDetails.stakeCredential.type === \"Key\"\n          ? C.StakeCredential.from_keyhash(\n            C.Ed25519KeyHash.from_bytes(\n              fromHex(addressDetails.stakeCredential.hash),\n            ),\n          )\n          : C.StakeCredential.from_scripthash(\n            C.ScriptHash.from_bytes(\n              fromHex(addressDetails.stakeCredential.hash),\n            ),\n          );\n\n      let certBuilder = C.SingleCertificateBuilder.new(\n        C.Certificate.new_stake_deregistration(\n          C.StakeDeregistration.new(credential),\n        ),\n      );\n      let cr: CCertificateBuilderResult;\n      if (redeemer) {\n        let script = this.scripts[credential.to_scripthash()?.to_hex()!];\n        if (!script) {\n          throw \"Scripts must be attached BEFORE they are used\";\n        }\n        if (\"inlineScript\" in script) {\n          cr = certBuilder.plutus_script(\n            C.PartialPlutusWitness.new(\n              C.PlutusScriptWitness.from_script(script.inlineScript),\n              C.PlutusData.from_bytes(fromHex(redeemer)),\n            ),\n            C.Ed25519KeyHashes.new(),\n          );\n        } else {\n          cr = certBuilder.plutus_script(\n            C.PartialPlutusWitness.new(\n              C.PlutusScriptWitness.from_ref(script.referenceScript.hash()),\n              C.PlutusData.from_bytes(fromHex(redeemer)),\n            ),\n            C.Ed25519KeyHashes.new(),\n          );\n        }\n      } else {\n        if (credential.kind() == 0) {\n          cr = certBuilder.payment_key();\n        } else {\n          let ns = this.native_scripts[credential.to_scripthash()?.to_hex()!];\n          if (!ns) {\n            throw \"Script with no redeemer should be a nativescript, but none provided\";\n          } else {\n            cr = certBuilder.native_script(\n              ns,\n              C.NativeScriptWitnessInfo.assume_signature_count(),\n            );\n          }\n        }\n      }\n\n      that.txBuilder.add_cert(cr);\n    });\n    return this;\n  }\n\n  /** Register a stake pool. A pool deposit is required. The metadataUrl needs to be hosted already before making the registration. */\n  // registerPool(poolParams: PoolParams): Tx {\n  //   this.tasks.push(async (that) => {\n  //     const poolRegistration = await createPoolRegistration(\n  //       poolParams,\n  //       that.translucent,\n  //     )\n\n  //     const certificate = C.Certificate.new_pool_registration(poolRegistration)\n\n  //     that.txBuilder.add_cert(certificate)\n  //   })\n  //   return this\n  // }\n\n  // /** Update a stake pool. No pool deposit is required. The metadataUrl needs to be hosted already before making the update. */\n  // updatePool(poolParams: PoolParams): Tx {\n  //   this.tasks.push(async (that) => {\n  //     const poolRegistration = await createPoolRegistration(\n  //       poolParams,\n  //       that.translucent,\n  //     )\n\n  //     // This flag makes sure a pool deposit is not required\n  //     //poolRegistration.set_is_update(true)\n\n  //     const certificate = C.Certificate.new_pool_registration(poolRegistration)\n\n  //     that.txBuilder.add_cert(certificate)\n  //   })\n  //   return this\n  // }\n  /**\n   * Retire a stake pool. The epoch needs to be the greater than the current epoch + 1 and less than current epoch + eMax.\n   * The pool deposit will be sent to reward address as reward after full retirement of the pool.\n   */\n  retirePool(poolId: PoolId, epoch: number): Tx {\n    this.tasks.push((that) => {\n      const certificate = C.Certificate.new_pool_retirement(\n        C.PoolRetirement.new(C.Ed25519KeyHash.from_bech32(poolId), epoch),\n      );\n      that.txBuilder.add_cert(certificate);\n    });\n    return this;\n  }\n\n  withdraw(\n    rewardAddress: RewardAddress,\n    amount: Lovelace,\n    redeemer?: Redeemer,\n  ): Tx {\n    this.tasks.push((that) => {\n      let rewAdd = C.RewardAddress.from_address(\n        addressFromWithNetworkCheck(rewardAddress, that.translucent),\n      )!;\n      let certBuilder = C.SingleWithdrawalBuilder.new(\n        rewAdd,\n        C.BigNum.from_str(amount.toString()),\n      );\n      let wr: CWithdrawalBuilderResult;\n      if (redeemer) {\n        let script =\n          this.scripts[rewAdd.payment_cred()?.to_scripthash()?.to_hex()!];\n        if (!script) {\n          throw \"Scripts must be attached BEFORE they are used\";\n        }\n        if (\"inlineScript\" in script) {\n          wr = certBuilder.plutus_script(\n            C.PartialPlutusWitness.new(\n              C.PlutusScriptWitness.from_script(script.inlineScript),\n              C.PlutusData.from_bytes(fromHex(redeemer)),\n            ),\n            C.Ed25519KeyHashes.new(),\n          );\n        } else {\n          wr = certBuilder.plutus_script(\n            C.PartialPlutusWitness.new(\n              C.PlutusScriptWitness.from_ref(script.referenceScript.hash()),\n              C.PlutusData.from_bytes(fromHex(redeemer)),\n            ),\n            C.Ed25519KeyHashes.new(),\n          );\n        }\n      } else {\n        if (rewAdd.payment_cred().kind() == 0) {\n          wr = certBuilder.payment_key();\n        } else {\n          let ns =\n            this.native_scripts[\n            rewAdd.payment_cred()?.to_scripthash()?.to_hex()!\n            ];\n          if (!ns) {\n            throw \"Script with no redeemer should be a nativescript, but none provided\";\n          } else {\n            wr = certBuilder.native_script(\n              ns,\n              C.NativeScriptWitnessInfo.assume_signature_count(),\n            );\n          }\n        }\n      }\n      that.txBuilder.add_withdrawal(wr);\n    });\n    return this;\n  }\n\n  /**\n   * Needs to be a public key address.\n   * The PaymentKeyHash is taken when providing a Base, Enterprise or Pointer address.\n   * The StakeKeyHash is taken when providing a Reward address.\n   */\n  addSigner(address: Address | RewardAddress): Tx {\n    const addressDetails = this.translucent.utils.getAddressDetails(address);\n\n    if (!addressDetails.paymentCredential && !addressDetails.stakeCredential) {\n      throw new Error(\"Not a valid address.\");\n    }\n\n    const credential =\n      addressDetails.type === \"Reward\"\n        ? addressDetails.stakeCredential!\n        : addressDetails.paymentCredential!;\n\n    if (credential.type === \"Script\") {\n      throw new Error(\"Only key hashes are allowed as signers.\");\n    }\n    return this.addSignerKey(credential.hash);\n  }\n\n  /** Add a payment or stake key hash as a required signer of the transaction. */\n  addSignerKey(keyHash: PaymentKeyHash | StakeKeyHash): Tx {\n    this.tasks.push((that) => {\n      that.txBuilder.add_required_signer(\n        C.Ed25519KeyHash.from_bytes(fromHex(keyHash)),\n      );\n    });\n    return this;\n  }\n\n  validFrom(unixTime: UnixTime): Tx {\n    this.tasks.push((that) => {\n      const slot = that.translucent.utils.unixTimeToSlot(unixTime);\n      that.txBuilder.set_validity_start_interval(\n        C.BigNum.from_str(slot.toString()),\n      );\n    });\n    return this;\n  }\n\n  validTo(unixTime: UnixTime): Tx {\n    this.tasks.push((that) => {\n      const slot = that.translucent.utils.unixTimeToSlot(unixTime);\n      that.txBuilder.set_ttl(C.BigNum.from_str(slot.toString()));\n      //todo: we need to make the tx builder fail if the intervals are wrong for native scripts.\n    });\n    return this;\n  }\n\n  attachMetadata(label: Label, metadata: Json): Tx {\n    this.tasks.push((that) => {\n      let aux = C.AuxiliaryData.new();\n      aux.add_metadatum(\n        C.BigNum.from_str(label.toString()),\n        C.TransactionMetadatum.new_text(JSON.stringify(metadata)),\n      );\n      that.txBuilder.add_auxiliary_data(aux);\n    });\n    return this;\n  }\n\n  /** Converts strings to bytes if prefixed with **'0x'**. */\n  attachMetadataWithConversion(label: Label, metadata: Json): Tx {\n    this.tasks.push((that) => {\n      let aux = C.AuxiliaryData.new();\n      aux.add_json_metadatum_with_schema(\n        C.BigNum.from_str(label.toString()),\n        JSON.stringify(metadata),\n        C.MetadataJsonSchema.BasicConversions,\n      );\n      that.txBuilder.add_auxiliary_data(aux);\n    });\n    return this;\n  }\n\n  /* Same as above but MORE detailed! */\n  attachMetadataWithDetailedConversion(label: Label, metadata: Json): Tx {\n    this.tasks.push((that) => {\n      let aux = C.AuxiliaryData.new();\n      aux.add_json_metadatum_with_schema(\n        C.BigNum.from_str(label.toString()),\n        JSON.stringify(metadata),\n        C.MetadataJsonSchema.DetailedSchema,\n      );\n      that.txBuilder.add_auxiliary_data(aux);\n    });\n    return this;\n  }\n\n  /** Explicitely set the network id in the transaction body. */\n  addNetworkId(id: number): Tx {\n    this.tasks.push((that) => {\n      that.txBuilder.set_network_id(\n        C.NetworkId.from_bytes(fromHex(id.toString(16).padStart(2, \"0\"))),\n      );\n    });\n    return this;\n  }\n\n  attachSpendingValidator(spendingValidator: SpendingValidator): Tx {\n    this.earlyTasks.push((that) => {\n      that.attachScript(spendingValidator);\n    });\n    return this;\n  }\n\n  attachMintingPolicy(mintingPolicy: MintingPolicy): Tx {\n    this.earlyTasks.push((that) => {\n      that.attachScript(mintingPolicy);\n    });\n    return this;\n  }\n\n  attachCertificateValidator(certValidator: CertificateValidator): Tx {\n    this.earlyTasks.push((that) => {\n      that.attachScript(certValidator);\n    });\n    return this;\n  }\n\n  attachWithdrawalValidator(withdrawalValidator: WithdrawalValidator): Tx {\n    this.earlyTasks.push((that) => {\n      that.attachScript(withdrawalValidator);\n    });\n    return this;\n  }\n\n  attachScript({\n    type,\n    script,\n  }:\n    | SpendingValidator\n    | MintingPolicy\n    | CertificateValidator\n    | WithdrawalValidator) {\n    if (type === \"Native\") {\n      let ns = C.NativeScript.from_bytes(fromHex(script));\n      this.native_scripts[ns.hash().to_hex()] = ns;\n    } else if (type === \"PlutusV1\" || type === \"PlutusV2\") {\n      let ps: CPlutusScript;\n      if (type === \"PlutusV1\") {\n        ps = C.PlutusScript.from_v1(\n          C.PlutusV1Script.from_bytes(fromHex(applyDoubleCborEncoding(script))),\n        );\n      } else {\n        ps = C.PlutusScript.from_v2(\n          C.PlutusV2Script.from_bytes(fromHex(applyDoubleCborEncoding(script))),\n        );\n      }\n      this.scripts[ps.hash().to_hex().toString()] = { inlineScript: ps };\n    } else {\n      throw new Error(\"No variant matched.\");\n    }\n  }\n\n  /** Compose transactions. */\n  compose(tx: Tx | null): Tx {\n    if (tx) this.tasks = this.tasks.concat(tx.tasks);\n    return this;\n  }\n\n  async complete(options?: {\n    change?: { address?: Address; outputData?: OutputData };\n    coinSelection?: boolean;\n    overEstimateMem?: number;\n    overEstimateSteps?: number;\n  }): Promise<TxComplete> {\n    if (\n      [\n        options?.change?.outputData?.hash,\n        options?.change?.outputData?.asHash,\n        options?.change?.outputData?.inline,\n      ].filter((b) => b).length > 1\n    ) {\n      throw new Error(\n        \"Not allowed to set hash, asHash and inline at the same time.\",\n      );\n    }\n\n    let task = this.earlyTasks.shift();\n    while (task) {\n      await task(this);\n      task = this.earlyTasks.shift();\n    }\n    task = this.tasks.shift();\n    while (task) {\n      await task(this);\n      task = this.tasks.shift();\n    }\n\n    // todo: get upper bound of scripts, get lower bound, if tx doesn't fit to the bounds of nativescripts, then fail.\n    // todo: check if other native script conditions are unverified in building.\n    // let upperboundTtl = Infinity\n    // let lowerboundTtl = 0\n    // for (const script of Object.values(this.native_scripts)) {\n    //   let thisUpper = script.\n    //   if (upperboundTtl) {\n\n    //   }\n    // }\n\n    const rawWalletUTxOs = await this.translucent.wallet.getUtxosCore();\n    let walletUTxOs: CTransactionUnspentOutput[] = [];\n    for (let i = 0; i < rawWalletUTxOs.len(); i++) {\n      walletUTxOs.push(rawWalletUTxOs.get(i));\n    }\n    let allUtxos = [...this.UTxOs, ...walletUTxOs, ...this.referencedUTxOs];\n\n    const changeAddress: CAddress = addressFromWithNetworkCheck(\n      options?.change?.address || (await this.translucent.wallet.address()),\n      this.translucent,\n    );\n    for (const utxo of walletUTxOs) {\n      this.txBuilder.add_utxo(\n        C.SingleInputBuilder.new(utxo.input(), utxo.output()).payment_key(),\n      );\n    }\n    this.txBuilder.select_utxos(2);\n\n    {\n      let foundUtxo = walletUTxOs.find(\n        (x) =>\n          BigInt(x.output().amount().coin().to_str()) >=\n          BigInt(Math.pow(10, 7)),\n      );\n      if (foundUtxo == undefined) {\n        throw \"Could not find a suitable collateral UTxO.\";\n      } else {\n        let collateralUTxO = C.SingleInputBuilder.new(\n          foundUtxo.input(),\n          foundUtxo.output(),\n        ).payment_key();\n        // todo: make user lose less ada\n\n        let minCollateralOutput = C.TransactionOutputBuilder.new();\n        minCollateralOutput = minCollateralOutput.with_address(\n          foundUtxo.output().address(),\n        );\n        let amtBuilder = minCollateralOutput.next();\n        let params = this.translucent.provider\n          ? await this.translucent.provider.getProtocolParameters()\n          : PROTOCOL_PARAMETERS_DEFAULT;\n        let multiAsset = foundUtxo.output().amount().multiasset();\n        amtBuilder = amtBuilder.with_asset_and_min_required_coin(\n          multiAsset || C.MultiAsset.new(),\n          C.BigNum.from_str(params.coinsPerUtxoByte.toString()),\n        );\n        const collateralReturn = amtBuilder.build().output();\n        this.txBuilder.add_collateral(collateralUTxO);\n        this.txBuilder.set_collateral_return(collateralReturn);\n      }\n    }\n    let txRedeemerBuilder = this.txBuilder.build_for_evaluation(\n      0,\n      changeAddress,\n    );\n    let protocolParameters: ProtocolParameters;\n    try {\n      protocolParameters =\n        await this.translucent.provider.getProtocolParameters();\n    } catch {\n      protocolParameters = PROTOCOL_PARAMETERS_DEFAULT;\n    }\n    const costMdls = createCostModels(protocolParameters.costModels);\n    const slotConfig: SlotConfig =\n      SLOT_CONFIG_NETWORK[this.translucent.network];\n    let draftTx = txRedeemerBuilder.draft_tx();\n    {\n      let redeemers = draftTx.witness_set().redeemers();\n\n      if (redeemers) {\n        let newRedeemers = C.Redeemers.new();\n        for (let i = 0; i < redeemers!.len(); i++) {\n          let redeemer = redeemers.get(i);\n          let new_redeemer = C.Redeemer.new(\n            redeemer.tag(),\n            redeemer.index(),\n            redeemer.data(),\n            C.ExUnits.new(C.BigNum.zero(), C.BigNum.zero()),\n          );\n          newRedeemers.add(new_redeemer);\n        }\n        let new_witnesses = draftTx.witness_set();\n        new_witnesses.set_redeemers(newRedeemers);\n        draftTx = C.Transaction.new(\n          draftTx.body(),\n          new_witnesses,\n          draftTx.auxiliary_data(),\n        );\n      }\n    }\n    let draftTxBytes = draftTx.to_bytes();\n    const uplcResults = U.eval_phase_two_raw(\n      draftTxBytes,\n      allUtxos.map((x) => x.input().to_bytes()),\n      allUtxos.map((x) => x.output().to_bytes()),\n      costMdls.to_bytes(),\n      BigInt(Math.floor(Number(protocolParameters.maxTxExSteps) / (options?.overEstimateSteps ?? 1))),\n      BigInt(Math.floor(Number(protocolParameters.maxTxExMem) / (options?.overEstimateMem ?? 1))),\n      BigInt(slotConfig.zeroTime),\n      BigInt(slotConfig.zeroSlot),\n      slotConfig.slotLength,\n    );\n    const redeemers = C.Redeemers.new();\n    for (const redeemerBytes of uplcResults) {\n      let redeemer: CRedeemer = C.Redeemer.from_bytes(redeemerBytes);\n      const exUnits = C.ExUnits.new(\n        C.BigNum.from_str(\n          Math.floor(\n            parseInt(redeemer.ex_units().mem().to_str()) *\n            (options?.overEstimateMem ?? 1),\n          ).toString(),\n        ),\n        C.BigNum.from_str(\n          Math.floor(\n            parseInt(redeemer.ex_units().steps().to_str()) *\n            (options?.overEstimateSteps ?? 1),\n          ).toString(),\n        ),\n      )\n      this.txBuilder.set_exunits(\n        C.RedeemerWitnessKey.new(redeemer.tag(), redeemer.index()),\n        exUnits,\n      )\n      redeemers.add(redeemer)\n    }\n    let builtTx = this.txBuilder.build(0, changeAddress).build_unchecked();\n    {\n      const datums = C.PlutusList.new();\n      const unhashedData = builtTx.witness_set().plutus_data();\n      let hashes = [];\n      if (unhashedData) {\n        for (let i = 0; i < unhashedData.len(), i++;) {\n          hashes.push(C.hash_plutus_data(unhashedData.get(i)).to_hex());\n        }\n      }\n      for (let i = 0; i < builtTx.body().inputs().len(), i++;) {\n        const input = builtTx.body().inputs().get(i);\n        const utxo = allUtxos.find(\n          (utxo) => utxo.input().to_bytes() == input.to_bytes(),\n        );\n        const datum = utxo?.output().datum();\n        if (datum) {\n          const inline = datum.as_inline_data();\n          if (inline) {\n            datums.add(inline);\n          } else {\n            const hash = datum.as_data_hash();\n            if (hash) {\n              const idx = hashes.indexOf(hash.to_hex());\n              const data = unhashedData?.get(idx)!;\n              datums.add(data);\n            }\n          }\n        }\n      }\n      const languages = C.Languages.new();\n      languages.add(C.Language.new_plutus_v2());\n      const sdh = C.calc_script_data_hash(\n        redeemers,\n        datums,\n        costMdls,\n        languages,\n      );\n      if (sdh) {\n        const bodyWithDataHash = builtTx.body();\n        bodyWithDataHash.set_script_data_hash(sdh);\n        builtTx = C.Transaction.new(\n          bodyWithDataHash,\n          builtTx.witness_set(),\n          builtTx.auxiliary_data(),\n        );\n      }\n    }\n    return new TxComplete(this.translucent, builtTx);\n  }\n\n  /** Return the current transaction body in Hex encoded Cbor. */\n  async toString(): Promise<string> {\n    let complete = await this.complete();\n    return complete.toString();\n  }\n}\n\nasync function createPoolRegistration(\n  poolParams: PoolParams,\n  translucent: Translucent,\n): Promise<CPoolRegistration> {\n  const poolOwners = C.Ed25519KeyHashes.new();\n  poolParams.owners.forEach((owner) => {\n    const { stakeCredential } = translucent.utils.getAddressDetails(owner);\n    if (stakeCredential?.type === \"Key\") {\n      poolOwners.add(C.Ed25519KeyHash.from_hex(stakeCredential.hash));\n    } else throw new Error(\"Only key hashes allowed for pool owners.\");\n  });\n\n  const metadata = poolParams.metadataUrl\n    ? await fetch(poolParams.metadataUrl).then((res) => res.arrayBuffer())\n    : null;\n\n  const metadataHash = metadata\n    ? C.PoolMetadata.from_bytes(\n      Buffer.from(new Uint8Array(metadata)),\n    ).pool_metadata_hash()\n    : null;\n\n  const relays = C.Relays.new();\n  poolParams.relays.forEach((relay) => {\n    switch (relay.type) {\n      case \"SingleHostIp\": {\n        const ipV4 = relay.ipV4\n          ? C.Ipv4.new(\n            new Uint8Array(relay.ipV4.split(\".\").map((b) => parseInt(b))),\n          )\n          : undefined;\n        const ipV6 = relay.ipV6\n          ? C.Ipv6.new(fromHex(relay.ipV6.replaceAll(\":\", \"\")))\n          : undefined;\n        relays.add(\n          C.Relay.new_single_host_addr(\n            C.SingleHostAddr.new(relay.port, ipV4, ipV6),\n          ),\n        );\n        break;\n      }\n      case \"SingleHostDomainName\": {\n        relays.add(\n          C.Relay.new_single_host_name(\n            C.SingleHostName.new(\n              relay.port,\n              C.DNSRecordAorAAAA.new(relay.domainName!),\n            ),\n          ),\n        );\n        break;\n      }\n      case \"MultiHost\": {\n        relays.add(\n          C.Relay.new_multi_host_name(\n            C.MultiHostName.new(C.DNSRecordSRV.new(relay.domainName!)),\n          ),\n        );\n        break;\n      }\n    }\n  });\n\n  return C.PoolRegistration.new(\n    C.PoolParams.new(\n      C.Ed25519KeyHash.from_bech32(poolParams.poolId),\n      C.VRFKeyHash.from_hex(poolParams.vrfKeyHash),\n      C.BigNum.from_str(poolParams.pledge.toString()),\n      C.BigNum.from_str(poolParams.cost.toString()),\n      C.UnitInterval.new(\n        C.BigNum.from_str(poolParams.margin[0].toString()),\n        C.BigNum.from_str(poolParams.margin[1].toString()),\n      ),\n      C.RewardAddress.from_address(\n        addressFromWithNetworkCheck(poolParams.rewardAddress, translucent),\n      )!,\n      poolOwners,\n      relays,\n      metadataHash\n        ? C.PoolMetadata.new(C.URL.new(poolParams.metadataUrl!), metadataHash)\n        : undefined,\n    ),\n  );\n}\n\nfunction addressFromWithNetworkCheck(\n  address: Address | RewardAddress,\n  translucent: Translucent,\n): CAddress {\n  const { type, networkId } = translucent.utils.getAddressDetails(address);\n\n  const actualNetworkId = networkToId(translucent.network);\n  if (networkId !== actualNetworkId) {\n    throw new Error(\n      `Invalid address: Expected address with network id ${actualNetworkId}, but got ${networkId}`,\n    );\n  }\n  return type === \"Byron\"\n    ? C.ByronAddress.from_base58(address).to_address()\n    : C.Address.from_bech32(address);\n}\n","import {\n  C,\n  fromHex,\n  KeyHash,\n  M,\n  Payload,\n  PrivateKey,\n  SignedMessage,\n  toHex,\n} from \"../mod.ts\";\n\nexport function signData(\n  addressHex: string,\n  payload: Payload,\n  privateKey: PrivateKey,\n): SignedMessage {\n  const protectedHeaders = M.HeaderMap.new();\n  protectedHeaders.set_algorithm_id(\n    M.Label.from_algorithm_id(M.AlgorithmId.EdDSA),\n  );\n  protectedHeaders.set_header(\n    M.Label.new_text(\"address\"),\n    M.CBORValue.new_bytes(fromHex(addressHex)),\n  );\n  const protectedSerialized = M.ProtectedHeaderMap.new(protectedHeaders);\n  const unprotectedHeaders = M.HeaderMap.new();\n  const headers = M.Headers.new(protectedSerialized, unprotectedHeaders);\n  const builder = M.COSESign1Builder.new(headers, fromHex(payload), false);\n  const toSign = builder.make_data_to_sign().to_bytes();\n\n  const priv = C.PrivateKey.from_bech32(privateKey);\n\n  const signedSigStruc = priv.sign(toSign).to_bytes();\n  const coseSign1 = builder.build(signedSigStruc);\n\n  const key = M.COSEKey.new(\n    M.Label.from_key_type(M.KeyType.OKP), //OKP\n  );\n  key.set_algorithm_id(M.Label.from_algorithm_id(M.AlgorithmId.EdDSA));\n  key.set_header(\n    M.Label.new_int(M.Int.new_negative(M.BigNum.from_str(\"1\"))),\n    M.CBORValue.new_int(\n      M.Int.new_i32(6), //M.CurveType.Ed25519\n    ),\n  ); // crv (-1) set to Ed25519 (6)\n  key.set_header(\n    M.Label.new_int(M.Int.new_negative(M.BigNum.from_str(\"2\"))),\n    M.CBORValue.new_bytes(priv.to_public().as_bytes()),\n  ); // x (-2) set to public key\n\n  return {\n    signature: toHex(coseSign1.to_bytes()),\n    key: toHex(key.to_bytes()),\n  };\n}\n\nexport function verifyData(\n  addressHex: string,\n  keyHash: KeyHash,\n  payload: Payload,\n  signedMessage: SignedMessage,\n): boolean {\n  const cose1 = M.COSESign1.from_bytes(fromHex(signedMessage.signature));\n  const key = M.COSEKey.from_bytes(fromHex(signedMessage.key));\n\n  const protectedHeaders = cose1.headers().protected().deserialized_headers();\n\n  const cose1Address = (() => {\n    try {\n      return toHex(\n        protectedHeaders.header(M.Label.new_text(\"address\"))?.as_bytes()!,\n      );\n    } catch (_e) {\n      throw new Error(\"No address found in signature.\");\n    }\n  })();\n\n  const cose1AlgorithmId = (() => {\n    try {\n      const int = protectedHeaders.algorithm_id()?.as_int();\n      if (int?.is_positive()) return parseInt(int.as_positive()?.to_str()!);\n      return parseInt(int?.as_negative()?.to_str()!);\n    } catch (_e) {\n      throw new Error(\"Failed to retrieve Algorithm Id.\");\n    }\n  })();\n\n  const keyAlgorithmId = (() => {\n    try {\n      const int = key.algorithm_id()?.as_int();\n      if (int?.is_positive()) return parseInt(int.as_positive()?.to_str()!);\n      return parseInt(int?.as_negative()?.to_str()!);\n    } catch (_e) {\n      throw new Error(\"Failed to retrieve Algorithm Id.\");\n    }\n  })();\n\n  const keyCurve = (() => {\n    try {\n      const int = key\n        .header(M.Label.new_int(M.Int.new_negative(M.BigNum.from_str(\"1\"))))\n        ?.as_int();\n      if (int?.is_positive()) return parseInt(int.as_positive()?.to_str()!);\n      return parseInt(int?.as_negative()?.to_str()!);\n    } catch (_e) {\n      throw new Error(\"Failed to retrieve Curve.\");\n    }\n  })();\n\n  const keyType = (() => {\n    try {\n      const int = key.key_type().as_int();\n      if (int?.is_positive()) return parseInt(int.as_positive()?.to_str()!);\n      return parseInt(int?.as_negative()?.to_str()!);\n    } catch (_e) {\n      throw new Error(\"Failed to retrieve Key Type.\");\n    }\n  })();\n\n  const publicKey = (() => {\n    try {\n      return C.PublicKey.from_bytes(\n        key\n          .header(M.Label.new_int(M.Int.new_negative(M.BigNum.from_str(\"2\"))))\n          ?.as_bytes()!,\n      );\n    } catch (_e) {\n      throw new Error(\"No public key found.\");\n    }\n  })();\n\n  const cose1Payload = (() => {\n    try {\n      return toHex(cose1.payload()!);\n    } catch (_e) {\n      throw new Error(\"No payload found.\");\n    }\n  })();\n\n  const signature = C.Ed25519Signature.from_bytes(cose1.signature());\n\n  const data = cose1.signed_data(undefined, undefined).to_bytes();\n\n  if (cose1Address !== addressHex) return false;\n\n  if (keyHash !== publicKey.hash().to_hex()) return false;\n\n  if (\n    cose1AlgorithmId !== keyAlgorithmId &&\n    cose1AlgorithmId !== M.AlgorithmId.EdDSA\n  ) {\n    return false;\n  }\n\n  if (keyCurve !== 6) return false;\n\n  if (keyType !== 1) return false;\n\n  if (cose1Payload !== payload) return false;\n\n  return publicKey.verify(data, signature);\n}\n","import { Translucent } from \"./mod\";\nimport type {\n  Address,\n  Payload,\n  PrivateKey,\n  RewardAddress,\n  SignedMessage,\n} from \"../types/mod.ts\";\nimport { signData } from \"../misc/sign_data\";\nimport { C } from \"../mod\";\n\nexport class Message {\n  translucent: Translucent;\n  address: Address | RewardAddress;\n  payload: Payload;\n\n  constructor(\n    translucent: Translucent,\n    address: Address | RewardAddress,\n    payload: Payload,\n  ) {\n    this.translucent = translucent;\n    this.address = address;\n    this.payload = payload;\n  }\n\n  /** Sign message with selected wallet. */\n  sign(): Promise<SignedMessage> {\n    return this.translucent.wallet.signMessage(this.address, this.payload);\n  }\n\n  /** Sign message with a separate private key. */\n  signWithPrivateKey(privateKey: PrivateKey): SignedMessage {\n    const {\n      paymentCredential,\n      stakeCredential,\n      address: { hex: hexAddress },\n    } = this.translucent.utils.getAddressDetails(this.address);\n\n    const keyHash = paymentCredential?.hash || stakeCredential?.hash;\n\n    const keyHashOriginal = C.PrivateKey.from_bech32(privateKey)\n      .to_public()\n      .hash()\n      .to_hex();\n\n    if (!keyHash || keyHash !== keyHashOriginal) {\n      throw new Error(`Cannot sign message for address: ${this.address}.`);\n    }\n\n    return signData(hexAddress, this.payload, privateKey);\n  }\n}\n","import { C, CBigNum, CEd25519KeyHashes, CNativeScript } from \"../core/core\";\nimport type {\n  Address,\n  Assets,\n  Credential,\n  Datum,\n  DatumHash,\n  Delegation,\n  Lovelace,\n  OutputData,\n  OutRef,\n  PoolId,\n  ProtocolParameters,\n  Provider,\n  RewardAddress,\n  ScriptHash,\n  Transaction,\n  TxHash,\n  Unit,\n  UnixTime,\n  UTxO,\n} from \"../types/types.ts\";\nimport { PROTOCOL_PARAMETERS_DEFAULT } from \"../utils/mod\";\nimport {\n  coreToUtxo,\n  fromHex,\n  getAddressDetails,\n  toHex,\n} from \"../utils/utils\";\n\n/** Concatentation of txHash + outputIndex */\ntype FlatOutRef = string;\n\nfunction verifyNativeScript(\n  ns: CNativeScript,\n  start?: CBigNum,\n  end?: CBigNum,\n  edKeyHashes?: CEd25519KeyHashes,\n) {\n  return true;\n}\n\nexport class Emulator implements Provider {\n  ledger: Record<FlatOutRef, { utxo: UTxO; spent: boolean }>;\n  mempool: Record<FlatOutRef, { utxo: UTxO; spent: boolean }> = {};\n  /**\n   * Only stake key registrations/delegations and rewards are tracked.\n   * Other certificates are not tracked.\n   */\n  chain: Record<\n    RewardAddress,\n    { registeredStake: boolean; delegation: Delegation }\n  > = {};\n  blockHeight: number;\n  slot: number;\n  time: UnixTime;\n  protocolParameters: ProtocolParameters;\n  datumTable: Record<DatumHash, Datum> = {};\n\n  constructor(\n    accounts: {\n      address: Address;\n      assets: Assets;\n      outputData?: OutputData;\n    }[],\n    protocolParameters: ProtocolParameters = PROTOCOL_PARAMETERS_DEFAULT,\n  ) {\n    const GENESIS_HASH = \"00\".repeat(32);\n    this.blockHeight = 0;\n    this.slot = 0;\n    this.time = Date.now();\n    this.ledger = {};\n    accounts.forEach(({ address, assets, outputData }, index) => {\n      if (\n        [outputData?.hash, outputData?.asHash, outputData?.inline].filter(\n          (b) => b,\n        ).length > 1\n      ) {\n        throw new Error(\n          \"Not allowed to set hash, asHash and inline at the same time.\",\n        );\n      }\n\n      this.ledger[GENESIS_HASH + index] = {\n        utxo: {\n          txHash: GENESIS_HASH,\n          outputIndex: index,\n          address,\n          assets,\n          datumHash: outputData?.asHash\n            ? C.hash_plutus_data(\n              C.PlutusData.from_bytes(fromHex(outputData.asHash)),\n            ).to_hex()\n            : outputData?.hash,\n          datum: outputData?.inline,\n          scriptRef: outputData?.scriptRef,\n        },\n        spent: false,\n      };\n    });\n    this.protocolParameters = protocolParameters;\n  }\n\n  now(): UnixTime {\n    return this.time;\n  }\n\n  awaitSlot(length = 1) {\n    this.slot += length;\n    this.time += length * 1000;\n    const currentHeight = this.blockHeight;\n    this.blockHeight = Math.floor(this.slot / 20);\n\n    if (this.blockHeight > currentHeight) {\n      for (const [outRef, { utxo, spent }] of Object.entries(this.mempool)) {\n        this.ledger[outRef] = { utxo, spent };\n      }\n\n      for (const [outRef, { spent }] of Object.entries(this.ledger)) {\n        if (spent) delete this.ledger[outRef];\n      }\n\n      this.mempool = {};\n    }\n  }\n\n  awaitBlock(height = 1) {\n    this.blockHeight += height;\n    this.slot += height * 20;\n    this.time += height * 20 * 1000;\n\n    for (const [outRef, { utxo, spent }] of Object.entries(this.mempool)) {\n      this.ledger[outRef] = { utxo, spent };\n    }\n\n    for (const [outRef, { spent }] of Object.entries(this.ledger)) {\n      if (spent) delete this.ledger[outRef];\n    }\n\n    this.mempool = {};\n  }\n\n  getUtxos(addressOrCredential: Address | Credential): Promise<UTxO[]> {\n    const utxos: UTxO[] = Object.values(this.ledger).flatMap(({ utxo }) => {\n      if (typeof addressOrCredential === \"string\") {\n        return addressOrCredential === utxo.address ? utxo : [];\n      } else {\n        const { paymentCredential } = getAddressDetails(utxo.address);\n        return paymentCredential?.hash === addressOrCredential.hash ? utxo : [];\n      }\n    });\n\n    return Promise.resolve(utxos);\n  }\n\n  getProtocolParameters(): Promise<ProtocolParameters> {\n    return Promise.resolve(this.protocolParameters);\n  }\n\n  getDatum(datumHash: DatumHash): Promise<Datum> {\n    return Promise.resolve(this.datumTable[datumHash]);\n  }\n\n  getUtxosWithUnit(\n    addressOrCredential: Address | Credential,\n    unit: Unit,\n  ): Promise<UTxO[]> {\n    const utxos: UTxO[] = Object.values(this.ledger).flatMap(({ utxo }) => {\n      if (typeof addressOrCredential === \"string\") {\n        return addressOrCredential === utxo.address && utxo.assets[unit] > 0n\n          ? utxo\n          : [];\n      } else {\n        const { paymentCredential } = getAddressDetails(utxo.address);\n        return paymentCredential?.hash === addressOrCredential.hash &&\n          utxo.assets[unit] > 0n\n          ? utxo\n          : [];\n      }\n    });\n\n    return Promise.resolve(utxos);\n  }\n\n  getUtxosByOutRef(outRefs: OutRef[]): Promise<UTxO[]> {\n    return Promise.resolve(\n      outRefs.flatMap(\n        (outRef) => this.ledger[outRef.txHash + outRef.outputIndex]?.utxo || [],\n      ),\n    );\n  }\n\n  getUtxoByUnit(unit: string): Promise<UTxO> {\n    const utxos: UTxO[] = Object.values(this.ledger).flatMap(({ utxo }) =>\n      utxo.assets[unit] > 0n ? utxo : [],\n    );\n\n    if (utxos.length > 1) {\n      throw new Error(\"Unit needs to be an NFT or only held by one address.\");\n    }\n\n    return Promise.resolve(utxos[0]);\n  }\n\n  getDelegation(rewardAddress: RewardAddress): Promise<Delegation> {\n    return Promise.resolve({\n      poolId: this.chain[rewardAddress]?.delegation?.poolId || null,\n      rewards: this.chain[rewardAddress]?.delegation?.rewards || 0n,\n    });\n  }\n\n  awaitTx(txHash: string): Promise<boolean> {\n    if (this.mempool[txHash + 0]) {\n      this.awaitBlock();\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(true);\n  }\n\n  /**\n   * Emulates the behaviour of the reward distribution at epoch boundaries.\n   * Stake keys need to be registered and delegated like on a real chain in order to receive rewards.\n   */\n  distributeRewards(rewards: Lovelace) {\n    for (const [\n      rewardAddress,\n      { registeredStake, delegation },\n    ] of Object.entries(this.chain)) {\n      if (registeredStake && delegation.poolId) {\n        this.chain[rewardAddress] = {\n          registeredStake,\n          delegation: {\n            poolId: delegation.poolId,\n            rewards: (delegation.rewards += rewards),\n          },\n        };\n      }\n    }\n    this.awaitBlock();\n  }\n\n  submitTx(tx: Transaction): Promise<TxHash> {\n    /*\n        Checks that are already handled by the transaction builder:\n          - Fee calculation\n          - Phase 2 evaluation\n          - Input value == Output value (including mint value)\n          - Min ada requirement\n          - Stake key registration deposit amount\n          - Collateral\n\n        Checks that need to be done:\n          - Verify witnesses\n          - Correct count of scripts and vkeys\n          - Stake key registration\n          - Withdrawals\n          - Validity interval\n     */\n\n    const desTx = C.Transaction.from_bytes(fromHex(tx));\n\n    const body = desTx.body();\n    const witnesses = desTx.witness_set();\n    const datums = witnesses.plutus_data();\n\n    const txHash = C.hash_transaction(body).to_hex();\n\n    // Validity interval\n    // Lower bound is inclusive?\n    // Upper bound is inclusive?\n    const lowerBound = body.validity_start_interval()\n      ? parseInt(body.validity_start_interval()!.to_str())\n      : null;\n    const upperBound = body.ttl() ? parseInt(body.ttl()!.to_str()) : null;\n\n    if (Number.isInteger(lowerBound) && this.slot < lowerBound!) {\n      throw new Error(\n        `Lower bound (${lowerBound}) not in slot range (${this.slot}).`,\n      );\n    }\n\n    if (Number.isInteger(upperBound) && this.slot > upperBound!) {\n      throw new Error(\n        `Upper bound (${upperBound}) not in slot range (${this.slot}).`,\n      );\n    }\n\n    // Datums in witness set\n    const datumTable = (() => {\n      const table: Record<DatumHash, Datum> = {};\n      for (let i = 0; i < (datums?.len() || 0); i++) {\n        const datum = datums!.get(i);\n        const datumHash = C.hash_plutus_data(datum).to_hex();\n        table[datumHash] = toHex(datum.to_bytes());\n      }\n      return table;\n    })();\n\n    const consumedHashes = new Set();\n\n    // Witness keys\n    const keyHashes = (() => {\n      const keyHashes = [];\n      for (let i = 0; i < (witnesses.vkeys()?.len() || 0); i++) {\n        const witness = witnesses.vkeys()!.get(i);\n        const publicKey = witness.vkey().public_key();\n        const keyHash = publicKey.hash().to_hex();\n\n        if (!publicKey.verify(fromHex(txHash), witness.signature())) {\n          throw new Error(`Invalid vkey witness. Key hash: ${keyHash}`);\n        }\n        keyHashes.push(keyHash);\n      }\n      return keyHashes;\n    })();\n\n    // We only need this to verify native scripts. The check happens in the CML.\n    const edKeyHashes = C.Ed25519KeyHashes.new();\n    keyHashes.forEach((keyHash) =>\n      edKeyHashes.add(C.Ed25519KeyHash.from_hex(keyHash)),\n    );\n\n    const nativeHashes = (() => {\n      const scriptHashes = [];\n\n      for (let i = 0; i < (witnesses.native_scripts()?.len() || 0); i++) {\n        const witness = witnesses.native_scripts()!.get(i);\n        const scriptHash = witness.hash().to_hex();\n\n        if (\n          !verifyNativeScript(\n            witness,\n            Number.isInteger(lowerBound)\n              ? C.BigNum.from_str(lowerBound!.toString())\n              : undefined,\n            Number.isInteger(upperBound)\n              ? C.BigNum.from_str(upperBound!.toString())\n              : undefined,\n            edKeyHashes,\n          )\n        ) {\n          throw new Error(\n            `Invalid native script witness. Script hash: ${scriptHash}`,\n          );\n        }\n        for (let i = 0; i < witness.get_required_signers().len(); i++) {\n          const keyHash = witness.get_required_signers().get(i).to_hex();\n          consumedHashes.add(keyHash);\n        }\n        scriptHashes.push(scriptHash);\n      }\n      return scriptHashes;\n    })();\n\n    const nativeHashesOptional: Record<ScriptHash, CNativeScript> = {};\n    const plutusHashesOptional: ScriptHash[] = [];\n\n    const plutusHashes = (() => {\n      const scriptHashes = [];\n      for (let i = 0; i < (witnesses.plutus_v1_scripts()?.len() || 0); i++) {\n        const script = witnesses.plutus_v1_scripts()!.get(i);\n        const scriptHash = script.hash().to_hex();\n\n        scriptHashes.push(scriptHash);\n      }\n      for (let i = 0; i < (witnesses.plutus_v2_scripts()?.len() || 0); i++) {\n        const script = witnesses.plutus_v2_scripts()!.get(i);\n        const scriptHash = script.hash().to_hex();\n\n        scriptHashes.push(scriptHash);\n      }\n      return scriptHashes;\n    })();\n\n    const inputs = body.inputs();\n    //inputs.sort();\n\n    type ResolvedInput = {\n      entry: { utxo: UTxO; spent: boolean };\n      type: \"Ledger\" | \"Mempool\";\n    };\n\n    const resolvedInputs: ResolvedInput[] = [];\n\n    // Check existence of inputs and look for script refs.\n    for (let i = 0; i < inputs.len(); i++) {\n      const input = inputs.get(i);\n\n      const outRef = input.transaction_id().to_hex() + input.index().to_str();\n\n      const entryLedger = this.ledger[outRef];\n\n      const { entry, type }: ResolvedInput = !entryLedger\n        ? { entry: this.mempool[outRef]!, type: \"Mempool\" }\n        : { entry: entryLedger, type: \"Ledger\" };\n\n      if (!entry || entry.spent) {\n        throw new Error(\n          `Could not spend UTxO: ${JSON.stringify({\n            txHash: entry?.utxo.txHash,\n            outputIndex: entry?.utxo.outputIndex,\n          })}\\nIt does not exist or was already spent.`,\n        );\n      }\n\n      const scriptRef = entry.utxo.scriptRef;\n      if (scriptRef) {\n        switch (scriptRef.type) {\n          case \"Native\": {\n            const script = C.NativeScript.from_bytes(fromHex(scriptRef.script));\n            nativeHashesOptional[script.hash().to_hex()] = script;\n            break;\n          }\n          case \"PlutusV1\": {\n            const script = C.PlutusV1Script.from_bytes(\n              fromHex(scriptRef.script),\n            );\n            plutusHashesOptional.push(script.hash().to_hex());\n            break;\n          }\n          case \"PlutusV2\": {\n            const script = C.PlutusV2Script.from_bytes(\n              fromHex(scriptRef.script),\n            );\n            plutusHashesOptional.push(script.hash().to_hex());\n            break;\n          }\n        }\n      }\n\n      if (entry.utxo.datumHash) consumedHashes.add(entry.utxo.datumHash);\n\n      resolvedInputs.push({ entry, type });\n    }\n\n    // Check existence of reference inputs and look for script refs.\n    for (let i = 0; i < (body.reference_inputs()?.len() || 0); i++) {\n      const input = body.reference_inputs()!.get(i);\n\n      const outRef = input.transaction_id().to_hex() + input.index().to_str();\n\n      const entry = this.ledger[outRef] || this.mempool[outRef];\n\n      if (!entry || entry.spent) {\n        throw new Error(\n          `Could not read UTxO: ${JSON.stringify({\n            txHash: entry?.utxo.txHash,\n            outputIndex: entry?.utxo.outputIndex,\n          })}\\nIt does not exist or was already spent.`,\n        );\n      }\n\n      const scriptRef = entry.utxo.scriptRef;\n      if (scriptRef) {\n        switch (scriptRef.type) {\n          case \"Native\": {\n            const script = C.NativeScript.from_bytes(fromHex(scriptRef.script));\n            nativeHashesOptional[script.hash().to_hex()] = script;\n            break;\n          }\n          case \"PlutusV1\": {\n            const script = C.PlutusV1Script.from_bytes(\n              fromHex(scriptRef.script),\n            );\n            plutusHashesOptional.push(script.hash().to_hex());\n            break;\n          }\n          case \"PlutusV2\": {\n            const script = C.PlutusV2Script.from_bytes(\n              fromHex(scriptRef.script),\n            );\n            plutusHashesOptional.push(script.hash().to_hex());\n            break;\n          }\n        }\n      }\n\n      if (entry.utxo.datumHash) consumedHashes.add(entry.utxo.datumHash);\n    }\n\n    type Tag = \"Spend\" | \"Mint\" | \"Cert\" | \"Reward\";\n\n    const redeemers = (() => {\n      const tagMap: Record<number, Tag> = {\n        0: \"Spend\",\n        1: \"Mint\",\n        2: \"Cert\",\n        3: \"Reward\",\n      };\n      const collected = [];\n      for (let i = 0; i < (witnesses.redeemers()?.len() || 0); i++) {\n        const redeemer = witnesses.redeemers()!.get(i);\n        collected.push({\n          tag: tagMap[redeemer.tag().kind()],\n          index: parseInt(redeemer.index().to_str()),\n        });\n      }\n      return collected;\n    })();\n\n    function checkAndConsumeHash(\n      credential: Credential,\n      tag: Tag | null,\n      index: number | null,\n    ) {\n      switch (credential.type) {\n        case \"Key\": {\n          if (!keyHashes.includes(credential.hash)) {\n            throw new Error(\n              `Missing vkey witness. Key hash: ${credential.hash}`,\n            );\n          }\n          consumedHashes.add(credential.hash);\n          break;\n        }\n        case \"Script\": {\n          if (nativeHashes.includes(credential.hash)) {\n            consumedHashes.add(credential.hash);\n            break;\n          } else if (nativeHashesOptional[credential.hash]) {\n            if (\n              !verifyNativeScript(\n                nativeHashesOptional[credential.hash],\n                Number.isInteger(lowerBound)\n                  ? C.BigNum.from_str(lowerBound!.toString())\n                  : undefined,\n                Number.isInteger(upperBound)\n                  ? C.BigNum.from_str(upperBound!.toString())\n                  : undefined,\n                edKeyHashes,\n              )\n            ) {\n              throw new Error(\n                `Invalid native script witness. Script hash: ${credential.hash}`,\n              );\n            }\n            break;\n          } else if (\n            plutusHashes.includes(credential.hash) ||\n            plutusHashesOptional.includes(credential.hash)\n          ) {\n            if (\n              redeemers.find(\n                (redeemer) => redeemer.tag === tag && redeemer.index === index,\n              )\n            ) {\n              consumedHashes.add(credential.hash);\n              break;\n            }\n          }\n          throw new Error(\n            `Missing script witness. Script hash: ${credential.hash}`,\n          );\n        }\n      }\n    }\n\n    // Check collateral inputs\n\n    for (let i = 0; i < (body.collateral()?.len() || 0); i++) {\n      const input = body.collateral()!.get(i);\n\n      const outRef = input.transaction_id().to_hex() + input.index().to_str();\n\n      const entry = this.ledger[outRef] || this.mempool[outRef];\n\n      if (!entry || entry.spent) {\n        throw new Error(\n          `Could not read UTxO: ${JSON.stringify({\n            txHash: entry?.utxo.txHash,\n            outputIndex: entry?.utxo.outputIndex,\n          })}\\nIt does not exist or was already spent.`,\n        );\n      }\n\n      const { paymentCredential } = getAddressDetails(entry.utxo.address);\n      if (paymentCredential?.type === \"Script\") {\n        throw new Error(\"Collateral inputs can only contain vkeys.\");\n      }\n      checkAndConsumeHash(paymentCredential!, null, null);\n    }\n\n    // Check required signers\n\n    for (let i = 0; i < (body.required_signers()?.len() || 0); i++) {\n      const signer = body.required_signers()!.get(i);\n      checkAndConsumeHash({ type: \"Key\", hash: signer.to_hex() }, null, null);\n    }\n\n    // Check mint witnesses\n\n    for (let index = 0; index < (body.mint()?.keys().len() || 0); index++) {\n      const policyId = body.mint()!.keys().get(index).to_hex();\n      checkAndConsumeHash({ type: \"Script\", hash: policyId }, \"Mint\", index);\n    }\n\n    // Check withdrawal witnesses\n\n    const withdrawalRequests: {\n      rewardAddress: RewardAddress;\n      withdrawal: Lovelace;\n    }[] = [];\n\n    for (\n      let index = 0;\n      index < (body.withdrawals()?.keys().len() || 0);\n      index++\n    ) {\n      const rawAddress = body.withdrawals()!.keys().get(index);\n      const withdrawal: Lovelace = BigInt(\n        body.withdrawals()!.get(rawAddress)!.to_str(),\n      );\n      const rewardAddress = rawAddress.to_address().to_bech32(undefined);\n      const { stakeCredential } = getAddressDetails(rewardAddress);\n      checkAndConsumeHash(stakeCredential!, \"Reward\", index);\n      if (this.chain[rewardAddress]?.delegation.rewards !== withdrawal) {\n        throw new Error(\n          \"Withdrawal amount doesn't match actual reward balance.\",\n        );\n      }\n      withdrawalRequests.push({ rewardAddress, withdrawal });\n    }\n\n    // Check cert witnesses\n\n    const certRequests: {\n      type: \"Registration\" | \"Deregistration\" | \"Delegation\";\n      rewardAddress: RewardAddress;\n      poolId?: PoolId;\n    }[] = [];\n\n    for (let index = 0; index < (body.certs()?.len() || 0); index++) {\n      /*\n        Checking only:\n        1. Stake registration\n        2. Stake deregistration\n        3. Stake delegation\n\n        All other certificate types are not checked and considered valid.\n      */\n      const cert = body.certs()!.get(index);\n      switch (cert.kind()) {\n        case 0: {\n          const registration = cert.as_stake_registration()!;\n          const rewardAddress = C.RewardAddress.new(\n            C.NetworkInfo.testnet().network_id(),\n            registration.stake_credential(),\n          )\n            .to_address()\n            .to_bech32(undefined);\n          if (this.chain[rewardAddress]?.registeredStake) {\n            throw new Error(\n              `Stake key is already registered. Reward address: ${rewardAddress}`,\n            );\n          }\n          certRequests.push({ type: \"Registration\", rewardAddress });\n          break;\n        }\n        case 1: {\n          const deregistration = cert.as_stake_deregistration()!;\n          const rewardAddress = C.RewardAddress.new(\n            C.NetworkInfo.testnet().network_id(),\n            deregistration.stake_credential(),\n          )\n            .to_address()\n            .to_bech32(undefined);\n\n          const { stakeCredential } = getAddressDetails(rewardAddress);\n          checkAndConsumeHash(stakeCredential!, \"Cert\", index);\n\n          if (!this.chain[rewardAddress]?.registeredStake) {\n            throw new Error(\n              `Stake key is already deregistered. Reward address: ${rewardAddress}`,\n            );\n          }\n          certRequests.push({ type: \"Deregistration\", rewardAddress });\n          break;\n        }\n        case 2: {\n          const delegation = cert.as_stake_delegation()!;\n          const rewardAddress = C.RewardAddress.new(\n            C.NetworkInfo.testnet().network_id(),\n            delegation.stake_credential(),\n          )\n            .to_address()\n            .to_bech32(undefined);\n          const poolId = delegation.pool_keyhash().to_bech32(\"pool\");\n\n          const { stakeCredential } = getAddressDetails(rewardAddress);\n          checkAndConsumeHash(stakeCredential!, \"Cert\", index);\n\n          if (\n            !this.chain[rewardAddress]?.registeredStake &&\n            !certRequests.find(\n              (request) =>\n                request.type === \"Registration\" &&\n                request.rewardAddress === rewardAddress,\n            )\n          ) {\n            throw new Error(\n              `Stake key is not registered. Reward address: ${rewardAddress}`,\n            );\n          }\n          certRequests.push({ type: \"Delegation\", rewardAddress, poolId });\n          break;\n        }\n      }\n    }\n\n    // Check input witnesses\n\n    resolvedInputs.forEach(({ entry: { utxo } }, index) => {\n      const { paymentCredential } = getAddressDetails(utxo.address);\n      checkAndConsumeHash(paymentCredential!, \"Spend\", index);\n    });\n\n    // Create outputs and consume datum hashes\n    const outputs = (() => {\n      const collected = [];\n      for (let i = 0; i < body.outputs().len(); i++) {\n        const output = body.outputs().get(i);\n        const unspentOutput = C.TransactionUnspentOutput.new(\n          C.TransactionInput.new(\n            C.TransactionHash.from_hex(txHash),\n            C.BigNum.from_str(i.toString()),\n          ),\n          output,\n        );\n\n        const utxo = coreToUtxo(unspentOutput);\n\n        if (utxo.datumHash) consumedHashes.add(utxo.datumHash);\n\n        collected.push({\n          utxo,\n          spent: false,\n        });\n      }\n      return collected;\n    })();\n\n    // Check consumed witnesses\n    const [extraKeyHash] = keyHashes.filter(\n      (keyHash) => !consumedHashes.has(keyHash),\n    );\n    if (extraKeyHash) {\n      throw new Error(`Extraneous vkey witness. Key hash: ${extraKeyHash}`);\n    }\n\n    const [extraNativeHash] = nativeHashes.filter(\n      (scriptHash) => !consumedHashes.has(scriptHash),\n    );\n    if (extraNativeHash) {\n      throw new Error(\n        `Extraneous native script. Script hash: ${extraNativeHash}`,\n      );\n    }\n\n    const [extraPlutusHash] = plutusHashes.filter(\n      (scriptHash) => !consumedHashes.has(scriptHash),\n    );\n    if (extraPlutusHash) {\n      throw new Error(\n        `Extraneous plutus script. Script hash: ${extraPlutusHash}`,\n      );\n    }\n\n    const [extraDatumHash] = Object.keys(datumTable).filter(\n      (datumHash) => !consumedHashes.has(datumHash),\n    );\n    if (extraDatumHash) {\n      throw new Error(`Extraneous plutus data. Datum hash: ${extraDatumHash}`);\n    }\n\n    // Apply transitions\n\n    resolvedInputs.forEach(({ entry, type }) => {\n      const outRef = entry.utxo.txHash + entry.utxo.outputIndex;\n      entry.spent = true;\n\n      if (type === \"Ledger\") this.ledger[outRef] = entry;\n      else if (type === \"Mempool\") this.mempool[outRef] = entry;\n    });\n\n    withdrawalRequests.forEach(({ rewardAddress, withdrawal }) => {\n      this.chain[rewardAddress].delegation.rewards -= withdrawal;\n    });\n\n    certRequests.forEach(({ type, rewardAddress, poolId }) => {\n      switch (type) {\n        case \"Registration\": {\n          if (this.chain[rewardAddress]) {\n            this.chain[rewardAddress].registeredStake = true;\n          } else {\n            this.chain[rewardAddress] = {\n              registeredStake: true,\n              delegation: { poolId: null, rewards: 0n },\n            };\n          }\n          break;\n        }\n        case \"Deregistration\": {\n          this.chain[rewardAddress].registeredStake = false;\n          this.chain[rewardAddress].delegation.poolId = null;\n          break;\n        }\n        case \"Delegation\": {\n          this.chain[rewardAddress].delegation.poolId = poolId!;\n        }\n      }\n    });\n\n    outputs.forEach(({ utxo, spent }) => {\n      this.mempool[utxo.txHash + utxo.outputIndex] = {\n        utxo,\n        spent,\n      };\n    });\n\n    for (const [datumHash, datum] of Object.entries(datumTable)) {\n      this.datumTable[datumHash] = datum;\n    }\n\n    return Promise.resolve(txHash);\n  }\n\n  log() {\n    function getRandomColor(unit: Unit) {\n      const seed = unit === \"lovelace\" ? \"1\" : unit;\n      // Convert the seed string to a number\n      let num = 0;\n      for (let i = 0; i < seed.length; i++) {\n        num += seed.charCodeAt(i);\n      }\n\n      // Generate a color based on the seed number\n      const r = (num * 123) % 256;\n      const g = (num * 321) % 256;\n      const b = (num * 213) % 256;\n\n      // Return the color as a hex string\n      return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n    }\n\n    const totalBalances: Assets = {};\n\n    const balances: Record<Address, Assets> = {};\n    for (const { utxo } of Object.values(this.ledger)) {\n      for (const [unit, quantity] of Object.entries(utxo.assets)) {\n        if (!balances[utxo.address]) {\n          balances[utxo.address] = { [unit]: quantity };\n        } else if (!balances[utxo.address]?.[unit]) {\n          balances[utxo.address][unit] = quantity;\n        } else {\n          balances[utxo.address][unit] += quantity;\n        }\n\n        if (!totalBalances[unit]) {\n          totalBalances[unit] = quantity;\n        } else {\n          totalBalances[unit] += quantity;\n        }\n      }\n    }\n\n    console.log(\"\\n%cBlockchain state\", \"color:purple\");\n    console.log(\n      `\n    Block height:   %c${this.blockHeight}%c\n    Slot:           %c${this.slot}%c\n    Unix time:      %c${this.time}\n  `,\n      \"color:yellow\",\n      \"color:white\",\n      \"color:yellow\",\n      \"color:white\",\n      \"color:yellow\",\n    );\n    console.log(\"\\n\");\n    for (const [address, assets] of Object.entries(balances)) {\n      console.log(`Address: %c${address}`, \"color:blue\", \"\\n\");\n      for (const [unit, quantity] of Object.entries(assets)) {\n        const barLength = Math.max(\n          Math.floor(60 * (Number(quantity) / Number(totalBalances[unit]))),\n          1,\n        );\n        console.log(\n          `%c${\"\\u2586\".repeat(barLength) + \" \".repeat(60 - barLength)}`,\n          `color: ${getRandomColor(unit)}`,\n          \"\",\n          `${unit}:`,\n          quantity,\n          \"\",\n        );\n      }\n      console.log(`\\n${\"\\u2581\".repeat(60)}\\n`);\n    }\n  }\n}\n","import {\n  type Address,\n  type Delegation,\n  type Payload,\n  type RewardAddress,\n  type SignedMessage,\n  type Transaction,\n  type TxHash,\n  type UTxO,\n  type WalletApi,\n  coreToUtxo,\n  fromHex,\n  toHex,\n  C,\n  Translucent,\n  CTransactionUnspentOutputs,\n  CTransaction,\n  CTransactionWitnessSet,\n} from \"../mod\";\nimport { AbstractWallet } from \"./abstract\";\n\nexport class WalletConnector implements AbstractWallet {\n  translucent: Translucent;\n  api: WalletApi;\n\n  constructor(translucent: Translucent, api: WalletApi) {\n    this.translucent = translucent;\n    this.api = api;\n  }\n\n  async getAddressHex() {\n    const [addressHex] = await this.api.getUsedAddresses();\n    if (addressHex) return addressHex;\n\n    const [unusedAddressHex] = await this.api.getUnusedAddresses();\n    return unusedAddressHex;\n  }\n\n  async address(): Promise<Address> {\n    return C.Address.from_bytes(fromHex(await this.getAddressHex())).to_bech32(\n      undefined,\n    );\n  }\n  async rewardAddress(): Promise<RewardAddress | null> {\n    const [rewardAddressHex] = await this.api.getRewardAddresses();\n    const rewardAddress = rewardAddressHex\n      ? C.RewardAddress.from_address(\n        C.Address.from_bytes(fromHex(rewardAddressHex)),\n      )!\n        .to_address()\n        .to_bech32(undefined)\n      : null;\n    return rewardAddress;\n  }\n  async getUtxos(): Promise<UTxO[]> {\n    const utxos = ((await this.api.getUtxos()) || []).map((utxo) => {\n      const parsedUtxo = C.TransactionUnspentOutput.from_bytes(fromHex(utxo));\n      return coreToUtxo(parsedUtxo);\n    });\n    return utxos;\n  }\n  async getUtxosCore(): Promise<CTransactionUnspentOutputs> {\n    const utxos = C.TransactionUnspentOutputs.new();\n    ((await this.api.getUtxos()) || []).forEach((utxo) => {\n      utxos.add(C.TransactionUnspentOutput.from_bytes(fromHex(utxo)));\n    });\n    return utxos;\n  }\n  async getDelegation(): Promise<Delegation> {\n    const rewardAddr = await this.rewardAddress();\n    return rewardAddr\n      ? await this.translucent.delegationAt(rewardAddr)\n      : { poolId: null, rewards: 0n };\n  }\n  async signTx(tx: CTransaction): Promise<CTransactionWitnessSet> {\n    const witnessSet = await this.api.signTx(toHex(tx.to_bytes()), true);\n    return C.TransactionWitnessSet.from_bytes(fromHex(witnessSet));\n  }\n  async signMessage(\n    address: Address | RewardAddress,\n    payload: Payload,\n  ): Promise<SignedMessage> {\n    const hexAddress = toHex(C.Address.from_bech32(address).to_bytes());\n    return await this.api.signData(hexAddress, payload);\n  }\n  async submitTx(tx: Transaction): Promise<TxHash> {\n    const txHash = await this.api.submitTx(tx);\n    return txHash;\n  }\n}\n","import { signData } from \"../misc/sign_data\";\nimport {\n  type SignedMessage,\n  type PrivateKey,\n  type Address,\n  type RewardAddress,\n  type Transaction,\n  Translucent,\n  C,\n  type UTxO,\n  paymentCredentialOf,\n  utxoToCore,\n  type Delegation,\n  type Payload,\n  type TxHash,\n  CTransactionUnspentOutputs,\n  CTransactionWitnessSet,\n  CTransaction,\n  CPrivateKey,\n  CEd25519KeyHash,\n} from \"../mod\";\nimport { AbstractWallet } from \"./abstract\";\n\n/**\n * Cardano Private key in bech32; not the BIP32 private key or any key that is not fully derived.\n * Only an Enteprise address (without stake credential) is derived.\n */\nexport class PrivateKeyWallet implements AbstractWallet {\n  translucent: Translucent;\n  private privateKey: PrivateKey;\n  private priv: CPrivateKey;\n  pubKeyHash: CEd25519KeyHash;\n\n  constructor(translucent: Translucent, privateKey: PrivateKey) {\n    this.translucent = translucent;\n    this.privateKey = privateKey;\n    this.priv = C.PrivateKey.from_bech32(privateKey);\n    this.pubKeyHash = this.priv.to_public().hash();\n  }\n\n  async address(): Promise<Address> {\n    return C.EnterpriseAddress.new(\n      this.translucent.network === \"Mainnet\" ? 1 : 0,\n      C.StakeCredential.from_keyhash(this.pubKeyHash),\n    )\n      .to_address()\n      .to_bech32(undefined);\n  }\n  // deno-lint-ignore require-await\n  async rewardAddress(): Promise<RewardAddress | null> {\n    return null;\n  }\n  async getUtxos(): Promise<UTxO[]> {\n    return await this.translucent.utxosAt(\n      paymentCredentialOf(await this.address()),\n    );\n  }\n  async getUtxosCore(): Promise<CTransactionUnspentOutputs> {\n    const utxos = await this.translucent.utxosAt(\n      paymentCredentialOf(await this.address()),\n    );\n    const coreUtxos = C.TransactionUnspentOutputs.new();\n    utxos.forEach((utxo) => {\n      coreUtxos.add(utxoToCore(utxo));\n    });\n    return coreUtxos;\n  }\n  // deno-lint-ignore require-await\n  async getDelegation(): Promise<Delegation> {\n    return { poolId: null, rewards: 0n };\n  }\n  // deno-lint-ignore require-await\n  async signTx(tx: CTransaction): Promise<CTransactionWitnessSet> {\n    const witness = C.make_vkey_witness(\n      C.hash_transaction(tx.body()),\n      this.priv,\n    );\n    const txWitnessSetBuilder = C.TransactionWitnessSetBuilder.new();\n    txWitnessSetBuilder.add_vkey(witness);\n    return txWitnessSetBuilder.build();\n  }\n  // deno-lint-ignore require-await\n  async signMessage(\n    address: Address | RewardAddress,\n    payload: Payload,\n  ): Promise<SignedMessage> {\n    const {\n      paymentCredential,\n      address: { hex: hexAddress },\n    } = this.translucent.utils.getAddressDetails(address);\n    const keyHash = paymentCredential?.hash;\n    const originalKeyHash = this.pubKeyHash.to_hex();\n    if (!keyHash || keyHash !== originalKeyHash) {\n      throw new Error(`Cannot sign message for address: ${address}.`);\n    }\n    return signData(hexAddress, payload, this.privateKey);\n  }\n  async submitTx(tx: Transaction): Promise<TxHash> {\n    return await this.translucent.provider.submitTx(tx);\n  }\n}\n","import {\n  Address,\n  C,\n  CTransaction,\n  fromHex,\n  getAddressDetails,\n  KeyHash,\n  Network,\n  PrivateKey,\n  RewardAddress,\n  toHex,\n  UTxO,\n} from \"../mod.ts\";\nimport { mnemonicToEntropy } from \"./bip39.ts\";\n\ntype FromSeed = {\n  address: Address;\n  rewardAddress: RewardAddress | null;\n  paymentKey: PrivateKey;\n  stakeKey: PrivateKey | null;\n};\n\nexport function walletFromSeed(\n  seed: string,\n  options: {\n    password?: string;\n    addressType?: \"Base\" | \"Enterprise\";\n    accountIndex?: number;\n    network?: Network;\n  } = { addressType: \"Base\", accountIndex: 0, network: \"Mainnet\" },\n): FromSeed {\n  function harden(num: number): number {\n    if (typeof num !== \"number\") throw new Error(\"Type number required here!\");\n    return 0x80000000 + num;\n  }\n\n  const entropy = mnemonicToEntropy(seed);\n  const rootKey = C.Bip32PrivateKey.from_bip39_entropy(\n    fromHex(entropy),\n    options.password\n      ? new TextEncoder().encode(options.password)\n      : new Uint8Array(),\n  );\n\n  const accountKey = rootKey\n    .derive(harden(1852))\n    .derive(harden(1815))\n    .derive(harden(options.accountIndex!));\n\n  const paymentKey = accountKey.derive(0).derive(0).to_raw_key();\n  const stakeKey = accountKey.derive(2).derive(0).to_raw_key();\n\n  const paymentKeyHash = paymentKey.to_public().hash();\n  const stakeKeyHash = stakeKey.to_public().hash();\n\n  const networkId = options.network === \"Mainnet\" ? 1 : 0;\n\n  const address =\n    options.addressType === \"Base\"\n      ? C.BaseAddress.new(\n        networkId,\n        C.StakeCredential.from_keyhash(paymentKeyHash),\n        C.StakeCredential.from_keyhash(stakeKeyHash),\n      )\n        .to_address()\n        .to_bech32(undefined)\n      : C.EnterpriseAddress.new(\n        networkId,\n        C.StakeCredential.from_keyhash(paymentKeyHash),\n      )\n        .to_address()\n        .to_bech32(undefined);\n\n  const rewardAddress =\n    options.addressType === \"Base\"\n      ? C.RewardAddress.new(\n        networkId,\n        C.StakeCredential.from_keyhash(stakeKeyHash),\n      )\n        .to_address()\n        .to_bech32(undefined)\n      : null;\n\n  return {\n    address,\n    rewardAddress,\n    paymentKey: paymentKey.to_bech32(),\n    stakeKey: options.addressType === \"Base\" ? stakeKey.to_bech32() : null,\n  };\n}\n\nexport function discoverOwnUsedTxKeyHashes(\n  tx: CTransaction,\n  ownKeyHashes: Array<KeyHash>,\n  ownUtxos: Array<UTxO>,\n): Array<KeyHash> {\n  const usedKeyHashes = [];\n\n  // key hashes from inputs\n  const inputs = tx.body().inputs();\n  for (let i = 0; i < inputs.len(); i++) {\n    const input = inputs.get(i);\n    const txHash = toHex(input.transaction_id().to_bytes());\n    const outputIndex = parseInt(input.index().to_str());\n    const utxo = ownUtxos.find(\n      (utxo) => utxo.txHash === txHash && utxo.outputIndex === outputIndex,\n    );\n    if (utxo) {\n      const { paymentCredential } = getAddressDetails(utxo.address);\n      usedKeyHashes.push(paymentCredential?.hash!);\n    }\n  }\n\n  const txBody = tx.body();\n\n  // key hashes from certificates\n  function keyHashFromCert(txBody: C.TransactionBody) {\n    const certs = txBody.certs();\n    if (!certs) return;\n    for (let i = 0; i < certs.len(); i++) {\n      const cert = certs.get(i);\n      if (cert.kind() === 0) {\n        const credential = cert.as_stake_registration()?.stake_credential();\n        if (credential?.kind() === 0) {\n          // Key hash not needed for registration\n        }\n      } else if (cert.kind() === 1) {\n        const credential = cert.as_stake_deregistration()?.stake_credential();\n        if (credential?.kind() === 0) {\n          const keyHash = toHex(credential.to_keyhash()!.to_bytes());\n          usedKeyHashes.push(keyHash);\n        }\n      } else if (cert.kind() === 2) {\n        const credential = cert.as_stake_delegation()?.stake_credential();\n        if (credential?.kind() === 0) {\n          const keyHash = toHex(credential.to_keyhash()!.to_bytes());\n          usedKeyHashes.push(keyHash);\n        }\n      } else if (cert.kind() === 3) {\n        const poolParams = cert.as_pool_registration()?.pool_params()!;\n        const owners = poolParams?.pool_owners();\n        if (!owners) break;\n        for (let i = 0; i < owners.len(); i++) {\n          const keyHash = toHex(owners.get(i).to_bytes());\n          usedKeyHashes.push(keyHash);\n        }\n        const operator = poolParams.operator().to_hex();\n        usedKeyHashes.push(operator);\n      } else if (cert.kind() === 4) {\n        const operator = cert.as_pool_retirement()!.pool_keyhash().to_hex();\n        usedKeyHashes.push(operator);\n      } else if (cert.kind() === 6) {\n        const instantRewards = cert\n          .as_move_instantaneous_rewards_cert()\n          ?.move_instantaneous_reward()\n          .as_to_stake_creds()\n          ?.keys();\n        if (!instantRewards) break;\n        for (let i = 0; i < instantRewards.len(); i++) {\n          const credential = instantRewards.get(i);\n\n          if (credential.kind() === 0) {\n            const keyHash = toHex(credential.to_keyhash()!.to_bytes());\n            usedKeyHashes.push(keyHash);\n          }\n        }\n      }\n    }\n  }\n  if (txBody.certs()) keyHashFromCert(txBody);\n\n  // key hashes from withdrawals\n\n  const withdrawals = txBody.withdrawals();\n  function keyHashFromWithdrawal(withdrawals: C.Withdrawals) {\n    const rewardAddresses = withdrawals.keys();\n    for (let i = 0; i < rewardAddresses.len(); i++) {\n      const credential = rewardAddresses.get(i).payment_cred();\n      if (credential.kind() === 0) {\n        usedKeyHashes.push(credential.to_keyhash()!.to_hex());\n      }\n    }\n  }\n  if (withdrawals) keyHashFromWithdrawal(withdrawals);\n\n  // key hashes from scripts\n  const scripts = tx.witness_set().native_scripts();\n  function keyHashFromScript(scripts: C.NativeScripts) {\n    for (let i = 0; i < scripts.len(); i++) {\n      const script = scripts.get(i);\n      if (script.kind() === 0) {\n        const keyHash = toHex(\n          script.as_script_pubkey()!.addr_keyhash().to_bytes(),\n        );\n        usedKeyHashes.push(keyHash);\n      }\n      if (script.kind() === 1) {\n        keyHashFromScript(script.as_script_all()!.native_scripts());\n        return;\n      }\n      if (script.kind() === 2) {\n        keyHashFromScript(script.as_script_any()!.native_scripts());\n        return;\n      }\n      if (script.kind() === 3) {\n        keyHashFromScript(script.as_script_n_of_k()!.native_scripts());\n        return;\n      }\n    }\n  }\n  if (scripts) keyHashFromScript(scripts);\n\n  // keyHashes from required signers\n  const requiredSigners = txBody.required_signers();\n  if (requiredSigners) {\n    for (let i = 0; i < requiredSigners.len(); i++) {\n      usedKeyHashes.push(toHex(requiredSigners.get(i).to_bytes()));\n    }\n  }\n\n  // keyHashes from collateral\n  const collateral = txBody.collateral();\n  if (collateral) {\n    for (let i = 0; i < collateral.len(); i++) {\n      const input = collateral.get(i);\n      const txHash = toHex(input.transaction_id().to_bytes());\n      const outputIndex = parseInt(input.index().to_str());\n      const utxo = ownUtxos.find(\n        (utxo) => utxo.txHash === txHash && utxo.outputIndex === outputIndex,\n      );\n      if (utxo) {\n        const { paymentCredential } = getAddressDetails(utxo.address);\n        usedKeyHashes.push(paymentCredential?.hash!);\n      }\n    }\n  }\n\n  return usedKeyHashes.filter((k) => ownKeyHashes.includes(k));\n}\n","import { signData } from \"../misc/sign_data\";\nimport { discoverOwnUsedTxKeyHashes, walletFromSeed } from \"../misc/wallet\";\nimport {\n  type Address,\n  C,\n  type Delegation,\n  type KeyHash,\n  type Payload,\n  type RewardAddress,\n  type SignedMessage,\n  type Transaction,\n  Translucent,\n  type TxHash,\n  type UTxO,\n  paymentCredentialOf,\n  utxoToCore,\n  CTransaction,\n  CTransactionWitnessSet,\n  CTransactionUnspentOutputs,\n} from \"../mod\";\nimport { AbstractWallet } from \"./abstract\";\n\n/**\n * Select wallet from a seed phrase (e.g. 15 or 24 words). You have the option to choose between a Base address (with stake credential)\n * and Enterprise address (without stake credential). You can also decide which account index to derive. By default account 0 is derived.\n */\nexport class SeedWallet implements AbstractWallet {\n  translucent: Translucent;\n  private address_: string;\n  private rewardAddress_: string | null;\n  private paymentKeyHash: string;\n  private stakeKeyHash: string;\n  private privKeyHashMap: Record<string, string | null>;\n  constructor(\n    translucent: Translucent,\n    seed: string,\n    options?: {\n      addressType?: \"Base\" | \"Enterprise\";\n      accountIndex?: number;\n      password?: string;\n    },\n  ) {\n    this.translucent = translucent;\n    const { address, rewardAddress, paymentKey, stakeKey } = walletFromSeed(\n      seed,\n      {\n        addressType: options?.addressType || \"Base\",\n        accountIndex: options?.accountIndex || 0,\n        password: options?.password,\n        network: this.translucent.network,\n      },\n    );\n    this.address_ = address;\n    this.rewardAddress_ = rewardAddress;\n    const paymentKeyHash = C.PrivateKey.from_bech32(paymentKey)\n      .to_public()\n      .hash()\n      .to_hex();\n    this.paymentKeyHash = paymentKeyHash;\n    const stakeKeyHash = stakeKey\n      ? C.PrivateKey.from_bech32(stakeKey).to_public().hash().to_hex()\n      : \"\";\n    this.stakeKeyHash = stakeKeyHash;\n    const privKeyHashMap = {\n      [paymentKeyHash]: paymentKey,\n      [stakeKeyHash]: stakeKey,\n    };\n    this.privKeyHashMap = privKeyHashMap;\n  }\n\n  // deno-lint-ignore require-await\n  async address(): Promise<Address> {\n    return this.address_;\n  }\n  // deno-lint-ignore require-await\n  async rewardAddress(): Promise<RewardAddress | null> {\n    return this.rewardAddress_ || null;\n  }\n  // deno-lint-ignore require-await\n  async getUtxos(): Promise<UTxO[]> {\n    return this.translucent.utxosAt(paymentCredentialOf(this.address_));\n  }\n  async getUtxosCore(): Promise<CTransactionUnspentOutputs> {\n    const coreUtxos = C.TransactionUnspentOutputs.new();\n    (\n      await this.translucent.utxosAt(paymentCredentialOf(this.address_))\n    ).forEach((utxo) => {\n      coreUtxos.add(utxoToCore(utxo));\n    });\n    return coreUtxos;\n  }\n  async getDelegation(): Promise<Delegation> {\n    const rewardAddr = await this.rewardAddress();\n    return rewardAddr\n      ? await this.translucent.delegationAt(rewardAddr)\n      : { poolId: null, rewards: 0n };\n  }\n  async signTx(tx: CTransaction): Promise<CTransactionWitnessSet> {\n    const utxos = await this.translucent.utxosAt(this.address_);\n    const ownKeyHashes: Array<KeyHash> = [\n      this.paymentKeyHash,\n      this.stakeKeyHash,\n    ];\n    const usedKeyHashes = discoverOwnUsedTxKeyHashes(tx, ownKeyHashes, utxos);\n    const txWitnessSetBuilder = C.TransactionWitnessSetBuilder.new();\n    usedKeyHashes.forEach((keyHash) => {\n      const witness = C.make_vkey_witness(\n        C.hash_transaction(tx.body()),\n        C.PrivateKey.from_bech32(this.privKeyHashMap[keyHash]!),\n      );\n      txWitnessSetBuilder.add_vkey(witness);\n    });\n    return txWitnessSetBuilder.build();\n  }\n  // deno-lint-ignore require-await\n  async signMessage(\n    address: Address | RewardAddress,\n    payload: Payload,\n  ): Promise<SignedMessage> {\n    const {\n      paymentCredential,\n      stakeCredential,\n      address: { hex: hexAddress },\n    } = this.translucent.utils.getAddressDetails(address);\n    const keyHash = paymentCredential?.hash || stakeCredential?.hash;\n    const privateKey = this.privKeyHashMap[keyHash!];\n    if (!privateKey) {\n      throw new Error(`Cannot sign message for address: ${address}.`);\n    }\n    return signData(hexAddress, payload, privateKey);\n  }\n  async submitTx(tx: Transaction): Promise<TxHash> {\n    return await this.translucent.provider.submitTx(tx);\n  }\n}\n","import {\n  C,\n  type UTxO,\n  paymentCredentialOf,\n  utxoToCore,\n  type Delegation,\n  type TxHash,\n  type Address,\n  type RewardAddress,\n  type Transaction,\n  type SignedMessage,\n  Translucent,\n  type AddressDetails,\n  CTransactionWitnessSet,\n  CTransactionUnspentOutputs,\n} from \"../mod\";\nimport { toCore } from \"../utils/to\";\nimport { AbstractWallet } from \"./abstract\";\n\n/**\n * A wallet that can be constructed from external data e.g utxos and an address.\n * It doesn't allow you to sign transactions/messages. This needs to be handled separately.\n */\nexport class ExternalWallet implements AbstractWallet {\n  translucent: Translucent;\n  walletDetails: {\n    address: Address;\n    utxos?: UTxO[];\n    rewardAddress?: RewardAddress;\n  };\n  addressDetails: AddressDetails;\n\n  constructor(\n    translucent: Translucent,\n    address: Address,\n    utxos?: UTxO[],\n    rewardAddress?: RewardAddress,\n  ) {\n    this.translucent = translucent;\n    this.walletDetails = {\n      address,\n      utxos,\n      rewardAddress,\n    };\n    const addressDetails = this.translucent.utils.getAddressDetails(address);\n    this.addressDetails = addressDetails;\n  }\n\n  async address(): Promise<Address> {\n    return this.walletDetails.address;\n  }\n  async rewardAddress(): Promise<RewardAddress | null> {\n    const rewardAddr =\n      !this.walletDetails.rewardAddress && this.addressDetails.stakeCredential\n        ? (() =>\n          C.RewardAddress.new(\n            this.translucent.network === \"Mainnet\" ? 1 : 0,\n            toCore.credential(this.addressDetails.stakeCredential),\n          )\n            .to_address()\n            .to_bech32(undefined))()\n        : this.walletDetails.rewardAddress;\n    return rewardAddr || null;\n  }\n  async getUtxos(): Promise<UTxO[]> {\n    return this.walletDetails.utxos\n      ? this.walletDetails.utxos\n      : await this.translucent.utxosAt(\n        paymentCredentialOf(this.walletDetails.address),\n      );\n  }\n  async getUtxosCore(): Promise<CTransactionUnspentOutputs> {\n    const coreUtxos = C.TransactionUnspentOutputs.new();\n    (this.walletDetails.utxos\n      ? this.walletDetails.utxos\n      : await this.translucent.utxosAt(\n        paymentCredentialOf(this.walletDetails.address),\n      )\n    ).forEach((utxo) => coreUtxos.add(utxoToCore(utxo)));\n    return coreUtxos;\n  }\n  async getDelegation(): Promise<Delegation> {\n    const rewardAddr = await this.rewardAddress();\n\n    return rewardAddr\n      ? await this.translucent.delegationAt(rewardAddr)\n      : { poolId: null, rewards: 0n };\n  }\n  async signTx(): Promise<CTransactionWitnessSet> {\n    throw new Error(\"Not implemented\");\n  }\n  async signMessage(): Promise<SignedMessage> {\n    throw new Error(\"Not implemented\");\n  }\n  async submitTx(tx: Transaction): Promise<TxHash> {\n    return await this.translucent.provider.submitTx(tx);\n  }\n}\n","import { C, CTransactionBuilderConfig } from \"../core/mod\";\nimport {\n  createCostModels,\n  fromHex,\n  fromUnit,\n  toUnit,\n  Utils,\n} from \"../utils/mod\";\nimport type {\n  Address,\n  Credential,\n  Delegation,\n  Json,\n  Network,\n  OutRef,\n  Payload,\n  PrivateKey,\n  Provider,\n  RewardAddress,\n  SignedMessage,\n  Slot,\n  Transaction,\n  TxHash,\n  Unit,\n  UTxO,\n  WalletApi,\n} from \"../types/mod\";\nimport { Tx } from \"./tx\";\nimport { TxComplete } from \"./tx_complete\";\nimport { verifyData } from \"../misc/sign_data\";\nimport { Message } from \"./message\";\nimport { SLOT_CONFIG_NETWORK } from \"../plutus/time\";\nimport { Constr, Data } from \"../plutus/data\";\nimport { Emulator } from \"../provider/emulator\";\nimport { WalletConnector } from \"../wallets/wallet_connector\";\nimport { AbstractWallet } from \"../wallets/abstract\";\nimport { PrivateKeyWallet } from \"../wallets/private_key\";\nimport { SeedWallet } from \"../wallets/seed\";\nimport { ExternalWallet } from \"../wallets/public_wallet\";\n\nexport class Translucent {\n  txBuilderConfig!: CTransactionBuilderConfig;\n  wallet!: AbstractWallet;\n  provider!: Provider;\n  network: Network = \"Mainnet\";\n  utils!: Utils;\n\n  static async new(\n    provider?: Provider,\n    network?: Network,\n  ): Promise<Translucent> {\n    const translucent = new this();\n    if (network) translucent.network = network;\n    if (provider) {\n      translucent.provider = provider;\n      const protocolParameters = await provider.getProtocolParameters();\n\n      if (translucent.provider instanceof Emulator) {\n        translucent.network = \"Custom\";\n        SLOT_CONFIG_NETWORK[translucent.network] = {\n          zeroTime: translucent.provider.now(),\n          zeroSlot: 0,\n          slotLength: 1000,\n        };\n      }\n\n      const slotConfig = SLOT_CONFIG_NETWORK[translucent.network];\n      translucent.txBuilderConfig = C.TransactionBuilderConfigBuilder.new()\n        .coins_per_utxo_byte(\n          C.BigNum.from_str(protocolParameters.coinsPerUtxoByte.toString()),\n        )\n        .fee_algo(\n          C.LinearFee.new(\n            C.BigNum.from_str(protocolParameters.minFeeA.toString()),\n            C.BigNum.from_str(protocolParameters.minFeeB.toString()),\n          ),\n        )\n        .key_deposit(\n          C.BigNum.from_str(protocolParameters.keyDeposit.toString()),\n        )\n        .pool_deposit(\n          C.BigNum.from_str(protocolParameters.poolDeposit.toString()),\n        )\n        .max_tx_size(protocolParameters.maxTxSize)\n        .max_value_size(protocolParameters.maxValSize)\n        .collateral_percentage(protocolParameters.collateralPercentage)\n        .max_collateral_inputs(protocolParameters.maxCollateralInputs)\n        .ex_unit_prices(\n          C.ExUnitPrices.new(\n            C.UnitInterval.new(\n              C.BigNum.from_str(protocolParameters.priceMem[0].toString()),\n              C.BigNum.from_str(protocolParameters.priceMem[1].toString()),\n            ),\n            C.UnitInterval.new(\n              C.BigNum.from_str(protocolParameters.priceStep[0].toString()),\n              C.BigNum.from_str(protocolParameters.priceStep[1].toString()),\n            ),\n          ),\n        )\n        .costmdls(createCostModels(protocolParameters.costModels))\n        .build();\n    }\n    translucent.utils = new Utils(translucent);\n    return translucent;\n  }\n\n  /**\n   * Switch provider and/or network.\n   * If provider or network unset, no overwriting happens. Provider or network from current instance are taken then.\n   */\n  async switchProvider(\n    provider?: Provider,\n    network?: Network,\n  ): Promise<Translucent> {\n    if (this.network === \"Custom\") {\n      throw new Error(\"Cannot switch when on custom network.\");\n    }\n    const translucent = await Translucent.new(provider, network);\n    this.txBuilderConfig = translucent.txBuilderConfig;\n    this.provider = provider || this.provider;\n    this.network = network || this.network;\n    this.wallet = translucent.wallet;\n    return this;\n  }\n\n  newTx(): Tx {\n    return new Tx(this);\n  }\n\n  fromTx(tx: Transaction): TxComplete {\n    return new TxComplete(this, C.Transaction.from_bytes(fromHex(tx)));\n  }\n\n  /** Signs a message. Expects the payload to be Hex encoded. */\n  newMessage(address: Address | RewardAddress, payload: Payload): Message {\n    return new Message(this, address, payload);\n  }\n\n  /** Verify a message. Expects the payload to be Hex encoded. */\n  verifyMessage(\n    address: Address | RewardAddress,\n    payload: Payload,\n    signedMessage: SignedMessage,\n  ): boolean {\n    const {\n      paymentCredential,\n      stakeCredential,\n      address: { hex: addressHex },\n    } = this.utils.getAddressDetails(address);\n    const keyHash = paymentCredential?.hash || stakeCredential?.hash;\n    if (!keyHash) throw new Error(\"Not a valid address provided.\");\n\n    return verifyData(addressHex, keyHash, payload, signedMessage);\n  }\n\n  currentSlot(): Slot {\n    return this.utils.unixTimeToSlot(Date.now());\n  }\n\n  utxosAt(addressOrCredential: Address | Credential): Promise<UTxO[]> {\n    return this.provider.getUtxos(addressOrCredential);\n  }\n\n  utxosAtWithUnit(\n    addressOrCredential: Address | Credential,\n    unit: Unit,\n  ): Promise<UTxO[]> {\n    return this.provider.getUtxosWithUnit(addressOrCredential, unit);\n  }\n\n  /** Unit needs to be an NFT (or optionally the entire supply in one UTxO). */\n  utxoByUnit(unit: Unit): Promise<UTxO> {\n    return this.provider.getUtxoByUnit(unit);\n  }\n\n  utxosByOutRef(outRefs: Array<OutRef>): Promise<UTxO[]> {\n    return this.provider.getUtxosByOutRef(outRefs);\n  }\n\n  delegationAt(rewardAddress: RewardAddress): Promise<Delegation> {\n    return this.provider.getDelegation(rewardAddress);\n  }\n\n  awaitTx(txHash: TxHash, checkInterval = 3000): Promise<boolean> {\n    return this.provider.awaitTx(txHash, checkInterval);\n  }\n\n  async datumOf<T = Data>(utxo: UTxO, type?: T): Promise<T> {\n    if (!utxo.datum) {\n      if (!utxo.datumHash) {\n        throw new Error(\"This UTxO does not have a datum hash.\");\n      }\n      utxo.datum = await this.provider.getDatum(utxo.datumHash);\n    }\n    return Data.from<T>(utxo.datum, type);\n  }\n\n  /** Query CIP-0068 metadata for a specifc asset. */\n  async metadataOf<T = Json>(unit: Unit): Promise<T> {\n    const { policyId, name, label } = fromUnit(unit);\n    switch (label) {\n      case 222:\n      case 333:\n      case 444: {\n        const utxo = await this.utxoByUnit(toUnit(policyId, name, 100));\n        const metadata = (await this.datumOf(utxo)) as Constr<Data>;\n        return Data.toJson(metadata.fields[0]);\n      }\n      default:\n        throw new Error(\"No variant matched.\");\n    }\n  }\n\n  selectWalletFromPrivateKey(privateKey: PrivateKey): Translucent {\n    return this.useWallet(new PrivateKeyWallet(this, privateKey));\n  }\n\n  selectWallet(api: WalletApi): Translucent {\n    return this.useWallet(new WalletConnector(this, api));\n  }\n\n  selectWalletFrom(\n    address: Address,\n    utxos?: UTxO[],\n    rewardAddress?: RewardAddress,\n  ): Translucent {\n    return this.useWallet(\n      new ExternalWallet(this, address, utxos, rewardAddress),\n    );\n  }\n\n  selectWalletFromSeed(\n    seed: string,\n    options?: {\n      addressType?: \"Base\" | \"Enterprise\";\n      accountIndex?: number;\n      password?: string;\n    },\n  ): Translucent {\n    return this.useWallet(new SeedWallet(this, seed, options));\n  }\n\n  useWallet(wallet: AbstractWallet) {\n    this.wallet = wallet;\n    return this;\n  }\n}\n","import type {\n  Address,\n  Assets,\n  CostModels,\n  Credential,\n  Datum,\n  DatumHash,\n  Delegation,\n  OutRef,\n  ProtocolParameters,\n  Provider,\n  RewardAddress,\n  Transaction,\n  TxHash,\n  Unit,\n  UTxO,\n} from \"../types/mod\";\nimport { C } from \"../core/mod\";\nimport { costModelKeys, fromUnit } from \"../utils/mod\";\nimport * as ogmios from \"@cardano-ogmios/schema\";\n\nfunction fromMaybeBuffer(x: string | Buffer) {\n  if (typeof x === \"string\") {\n    return x;\n  } else {\n    return x.toString();\n  }\n}\n\nfunction fromOgmiosValue(value: ogmios.Value): Assets {\n  const assets: Assets = {};\n  for (const policy_id of Object.keys(value)) {\n    if (policy_id == \"ada\") {\n      assets[\"lovelace\"] = value[policy_id].lovelace;\n    } else {\n      for (const token_name of Object.keys(value[policy_id])) {\n        assets[policy_id + token_name] = value[policy_id][token_name];\n      }\n    }\n  }\n  return assets;\n}\n\nexport class Kupmios implements Provider {\n  kupoUrl: string;\n  ogmiosUrl: string;\n  headers?: any; //TODO: fix this type not sure what the header should be\n\n  /**\n   * This provider is based on Kupo + Ogmios v6.\n   * This is a way to support both ogmios 5.6 and 6.0 until 6.0 is released as stable and the Conway hard-fork is done.\n   * @param kupoUrl: http(s)://localhost:1442\n   * @param ogmiosUrl: ws(s)://localhost:1337\n   */\n  constructor(kupoUrl: string, ogmiosUrl: string, headers?: any) {\n    this.kupoUrl = kupoUrl;\n    this.ogmiosUrl = ogmiosUrl;\n    this.headers = headers;\n  }\n\n  async getProtocolParameters(): Promise<ProtocolParameters> {\n    const client = await this.ogmiosWsp(\n      \"queryLedgerState/protocolParameters\",\n      {},\n    );\n\n    return new Promise((res, rej) => {\n      client.addEventListener(\n        \"message\",\n        (msg: MessageEvent<string | Buffer>): unknown => {\n          console.log(\"queryLedgerState/protocolParameters\", msg.data);\n          try {\n            const {\n              result,\n            }: ogmios.QueryLedgerStateProtocolParametersResponse = JSON.parse(\n              fromMaybeBuffer(msg.data),\n            );\n\n            // deno-lint-ignore no-explicit-any\n            const costModels: CostModels = {\n              PlutusV1: Object.fromEntries(\n                result.plutusCostModels![\"plutus:v1\"].map((val, idx) => [\n                  costModelKeys.PlutusV1[idx],\n                  val,\n                ]),\n              ),\n              PlutusV2: Object.fromEntries(\n                result.plutusCostModels![\"plutus:v2\"].map((val, idx) => [\n                  costModelKeys.PlutusV2[idx],\n                  val,\n                ]),\n              ),\n            };\n            const [memNum, memDenom] =\n              result.scriptExecutionPrices!.memory.split(\"/\");\n            const [stepsNum, stepsDenom] =\n              result.scriptExecutionPrices!.cpu.split(\"/\");\n            const protocolParams: ProtocolParameters = {\n              minFeeA: result.minFeeCoefficient,\n              minFeeB: Number(result.minFeeConstant.ada.lovelace),\n              maxTxSize: result.maxTransactionSize!.bytes,\n              maxValSize: result.maxValueSize!.bytes,\n              keyDeposit: BigInt(result.stakeCredentialDeposit.ada.lovelace),\n              poolDeposit: BigInt(result.stakePoolDeposit.ada.lovelace),\n              priceMem: [BigInt(memNum), BigInt(memDenom)],\n              priceStep: [BigInt(stepsNum), BigInt(stepsDenom)],\n              maxTxExMem: BigInt(\n                result.maxExecutionUnitsPerTransaction!.memory,\n              ),\n              maxTxExSteps: BigInt(result.maxExecutionUnitsPerTransaction!.cpu),\n              coinsPerUtxoByte: BigInt(result.minUtxoDepositCoefficient),\n              collateralPercentage: result.collateralPercentage!,\n              maxCollateralInputs: result.maxCollateralInputs!,\n              costModels,\n            };\n            res(protocolParams);\n            client.close();\n          } catch (e) {\n            rej(e);\n          }\n          return undefined as unknown;\n        },\n        { once: true },\n      );\n    });\n  }\n\n  async getUtxos(addressOrCredential: Address | Credential): Promise<UTxO[]> {\n    let addy =\n      typeof addressOrCredential == \"string\"\n        ? addressOrCredential\n        : C.EnterpriseAddress.new(\n          0,\n          C.StakeCredential.from_keyhash(\n            C.Ed25519KeyHash.from_hex(addressOrCredential.hash),\n          ),\n        )\n          .to_address()\n          .to_bech32(undefined);\n    let params: ogmios.UtxoByAddresses | ogmios.UtxoByOutputReferences = {\n      addresses: [addy],\n    };\n    const client = await this.ogmiosWsp(\"queryLedgerState/utxo\", params);\n    return new Promise((res, rej) => {\n      client.addEventListener(\n        \"message\",\n        (msg: MessageEvent<string | Buffer>) => {\n          try {\n            const response:\n              | ogmios.QueryLedgerStateUtxoResponse\n              | ogmios.QueryLedgerStateEraMismatch\n              | ogmios.QueryLedgerStateAcquiredExpired = JSON.parse(\n                fromMaybeBuffer(msg.data),\n              );\n            if (\"result\" in response) {\n              res(\n                response.result.map((utxo) => {\n                  return {\n                    txHash: utxo.transaction.id,\n                    outputIndex: utxo.index,\n                    assets: fromOgmiosValue(utxo.value),\n                    address: utxo.address,\n                    datumHash: utxo.datumHash,\n                    datum: utxo.datum,\n                    script: utxo.script,\n                  } as UTxO;\n                }),\n              );\n            } else {\n              console.error(\"UTXO Fetch error\", response.error);\n            }\n          } catch { }\n        },\n      );\n    });\n  }\n\n  async getUtxosWithUnit(\n    addressOrCredential: Address | Credential,\n    unit: Unit,\n  ): Promise<UTxO[]> {\n    const isAddress = typeof addressOrCredential === \"string\";\n    const queryPredicate = isAddress\n      ? addressOrCredential\n      : addressOrCredential.hash;\n    const { policyId, assetName } = fromUnit(unit);\n    const result = (await fetch(\n      `${this.kupoUrl}/matches/${queryPredicate}${isAddress ? \"\" : \"/*\"\n      }?unspent&policy_id=${policyId}${assetName ? `&asset_name=${assetName}` : \"\"\n      }`,\n      {\n        headers: this.headers,\n      },\n    ).then((res) => res.json())) as unknown as {\n      transaction_id: string;\n      output_index: number;\n    }[];\n    return await this.getUtxosByOutRef(\n      result.map((x) => {\n        return { txHash: x.transaction_id, outputIndex: x.output_index };\n      }),\n    );\n  }\n\n  async getUtxoByUnit(unit: Unit): Promise<UTxO> {\n    const { policyId, assetName } = fromUnit(unit);\n    const result = (await fetch(\n      `${this.kupoUrl}/matches/${policyId}.${assetName ? `${assetName}` : \"*\"\n      }?unspent`,\n      {\n        headers: this.headers,\n      },\n    ).then((res) => res.json())) as unknown as {\n      transaction_id: string;\n      output_index: number;\n    }[];\n\n    if (result.length > 1) {\n      throw new Error(\"Unit needs to be an NFT or only held by one address.\");\n    }\n    return (\n      await this.getUtxosByOutRef(\n        result.map((x) => {\n          return { txHash: x.transaction_id, outputIndex: x.output_index };\n        }),\n      )\n    )[0];\n  }\n\n  async getUtxosByOutRef(outRefs: Array<OutRef>): Promise<UTxO[]> {\n    let params: ogmios.UtxoByAddresses | ogmios.UtxoByOutputReferences = {\n      outputReferences: outRefs.map((x) => {\n        return { transaction: { id: x.txHash }, index: x.outputIndex };\n      }),\n    };\n    const client = await this.ogmiosWsp(\"queryLedgerState/utxo\", params);\n    return new Promise((res, rej) => {\n      client.addEventListener(\n        \"message\",\n        (msg: MessageEvent<string | Buffer>) => {\n          try {\n            const response:\n              | ogmios.QueryLedgerStateUtxoResponse\n              | ogmios.QueryLedgerStateEraMismatch\n              | ogmios.QueryLedgerStateAcquiredExpired = JSON.parse(\n                fromMaybeBuffer(msg.data),\n              );\n            if (\"result\" in response) {\n              res(\n                response.result.map((utxo) => {\n                  return {\n                    txHash: utxo.transaction.id,\n                    outputIndex: utxo.index,\n                    assets: fromOgmiosValue(utxo.value),\n                    address: utxo.address,\n                    datumHash: utxo.datumHash,\n                    datum: utxo.datum,\n                    script: utxo.script,\n                  } as UTxO;\n                }),\n              );\n            } else {\n              console.error(\"UTXO Fetch error\", response.error);\n            }\n          } catch { }\n        },\n      );\n    });\n  }\n\n  async getDelegation(rewardAddress: RewardAddress): Promise<Delegation> {\n    const client = await this.ogmiosWsp(\n      \"queryLedgerState/rewardAccountSummaries\",\n      {\n        keys: [rewardAddress],\n      },\n    );\n\n    return new Promise((res, rej) => {\n      client.addEventListener(\n        \"message\",\n        (msg: MessageEvent<string | Buffer>) => {\n          try {\n            const { result } = JSON.parse(fromMaybeBuffer(msg.data));\n            const delegation = (result ? Object.values(result)[0] : {}) as {\n              delegate: string;\n              rewards: number;\n            };\n            res({\n              poolId: delegation?.delegate || null,\n              rewards: BigInt(delegation?.rewards || 0),\n            });\n            client.close();\n          } catch (e) {\n            rej(e);\n          }\n        },\n        { once: true },\n      );\n    });\n  }\n\n  async getDatum(datumHash: DatumHash): Promise<Datum> {\n    const result: { datum: string } | undefined = (await fetch(\n      `${this.kupoUrl}/datums/${datumHash}`,\n      {\n        headers: this.headers,\n      },\n    ).then((res) => res.json())) as any;\n    if (!result || !result.datum) {\n      throw new Error(`No datum found for datum hash: ${datumHash}`);\n    }\n    return result.datum;\n  }\n\n  awaitTx(txHash: TxHash, checkInterval = 3000): Promise<boolean> {\n    return new Promise((res) => {\n      const confirmation = setInterval(async () => {\n        const isConfirmed = await fetch(\n          `${this.kupoUrl}/matches/*@${txHash}?unspent`,\n          {\n            headers: this.headers,\n          },\n        ).then((res) => res.json());\n        if (isConfirmed && Object.keys(isConfirmed).length > 0) {\n          clearInterval(confirmation);\n          await new Promise((res) => setTimeout(() => res(1), 1000));\n          return res(true);\n        }\n      }, checkInterval);\n    });\n  }\n\n  async submitTx(tx: Transaction): Promise<TxHash> {\n    const client = await this.ogmiosWsp(\"submitTransaction\", {\n      transaction: { cbor: tx },\n    });\n\n    return new Promise((res, rej) => {\n      client.addEventListener(\n        \"message\",\n        (msg: MessageEvent<string | Buffer>) => {\n          try {\n            const response = JSON.parse(fromMaybeBuffer(msg.data));\n            if (\"result\" in response) res(response.result.transaction.id);\n            else rej(response.error);\n            client.close();\n          } catch (e) {\n            rej(e);\n          }\n        },\n        { once: true },\n      );\n    });\n  }\n\n  private async ogmiosWsp(\n    method: string,\n    params = {},\n    id?: string,\n  ): Promise<WebSocket> {\n    const client = new WebSocket(this.ogmiosUrl);\n    await new Promise((res) => {\n      client.addEventListener(\"open\", () => res(1), { once: true });\n    });\n    client.send(\n      JSON.stringify({\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id,\n      }),\n    );\n    return client;\n  }\n}\n","import type {\n  Address,\n  Assets,\n  Credential,\n  Datum,\n  DatumHash,\n  Delegation,\n  OutRef,\n  ProtocolParameters,\n  Provider,\n  RewardAddress,\n  Transaction,\n  TxHash,\n  Unit,\n  UTxO,\n} from \"../types/mod\";\nimport { C } from \"../core/mod\";\nimport { fromHex, fromUnit, toHex } from \"../utils/mod\";\nexport class KupmiosV5 implements Provider {\n  kupoUrl: string;\n  ogmiosUrl: string;\n\n  /**\n   * This provider is based on Kupo + Ogmios v5.6.\n   * This is a way to support both ogmios 5.6 and 6.0 until 6.0 is released as stable and the Conway hard-fork is done.\n   * @param kupoUrl: http(s)://localhost:1442\n   * @param ogmiosUrl: ws(s)://localhost:1337\n   */\n  constructor(kupoUrl: string, ogmiosUrl: string) {\n    this.kupoUrl = kupoUrl;\n    this.ogmiosUrl = ogmiosUrl;\n  }\n\n  async getProtocolParameters(): Promise<ProtocolParameters> {\n    const client = await this.ogmiosWsp(\"Query\", {\n      query: \"currentProtocolParameters\",\n    });\n\n    return new Promise((res, rej) => {\n      client.addEventListener(\n        \"message\",\n        (msg: MessageEvent<string>) => {\n          try {\n            const { result } = JSON.parse(msg.data);\n\n            // deno-lint-ignore no-explicit-any\n            const costModels: any = {};\n            Object.keys(result.costModels).forEach((v) => {\n              const version = v.split(\":\")[1].toUpperCase();\n              const plutusVersion = \"Plutus\" + version;\n              costModels[plutusVersion] = result.costModels[v];\n            });\n            const [memNum, memDenom] = result.prices.memory.split(\"/\");\n            const [stepsNum, stepsDenom] = result.prices.steps.split(\"/\");\n\n            res({\n              minFeeA: parseInt(result.minFeeCoefficient),\n              minFeeB: parseInt(result.minFeeConstant),\n              maxTxSize: parseInt(result.maxTxSize),\n              maxValSize: parseInt(result.maxValueSize),\n              keyDeposit: BigInt(result.stakeKeyDeposit),\n              poolDeposit: BigInt(result.poolDeposit),\n              priceMem: [BigInt(memNum), BigInt(memDenom)],\n              priceStep: [BigInt(stepsNum), BigInt(stepsDenom)],\n              maxTxExMem: BigInt(result.maxExecutionUnitsPerTransaction.memory),\n              maxTxExSteps: BigInt(\n                result.maxExecutionUnitsPerTransaction.steps,\n              ),\n              coinsPerUtxoByte: BigInt(result.coinsPerUtxoByte),\n              collateralPercentage: parseInt(result.collateralPercentage),\n              maxCollateralInputs: parseInt(result.maxCollateralInputs),\n              costModels,\n            });\n            client.close();\n          } catch (e) {\n            rej(e);\n          }\n        },\n        { once: true },\n      );\n    });\n  }\n\n  async getUtxos(addressOrCredential: Address | Credential): Promise<UTxO[]> {\n    const isAddress = typeof addressOrCredential === \"string\";\n    const queryPredicate = isAddress\n      ? addressOrCredential\n      : addressOrCredential.hash;\n    const result = await fetch(\n      `${this.kupoUrl}/matches/${queryPredicate}${isAddress ? \"\" : \"/*\"\n      }?unspent`,\n    ).then((res) => res.json());\n    return this.kupmiosUtxosToUtxos(result);\n  }\n\n  async getUtxosWithUnit(\n    addressOrCredential: Address | Credential,\n    unit: Unit,\n  ): Promise<UTxO[]> {\n    const isAddress = typeof addressOrCredential === \"string\";\n    const queryPredicate = isAddress\n      ? addressOrCredential\n      : addressOrCredential.hash;\n    const { policyId, assetName } = fromUnit(unit);\n    const result = await fetch(\n      `${this.kupoUrl}/matches/${queryPredicate}${isAddress ? \"\" : \"/*\"\n      }?unspent&policy_id=${policyId}${assetName ? `&asset_name=${assetName}` : \"\"\n      }`,\n    ).then((res) => res.json());\n    return this.kupmiosUtxosToUtxos(result);\n  }\n\n  async getUtxoByUnit(unit: Unit): Promise<UTxO> {\n    const { policyId, assetName } = fromUnit(unit);\n    const result = await fetch(\n      `${this.kupoUrl}/matches/${policyId}.${assetName ? `${assetName}` : \"*\"\n      }?unspent`,\n    ).then((res) => res.json());\n\n    const utxos = await this.kupmiosUtxosToUtxos(result);\n\n    if (utxos.length > 1) {\n      throw new Error(\"Unit needs to be an NFT or only held by one address.\");\n    }\n\n    return utxos[0];\n  }\n\n  async getUtxosByOutRef(outRefs: Array<OutRef>): Promise<UTxO[]> {\n    const queryHashes = [...new Set(outRefs.map((outRef) => outRef.txHash))];\n\n    const utxos = await Promise.all(\n      queryHashes.map(async (txHash) => {\n        const result = await fetch(\n          `${this.kupoUrl}/matches/*@${txHash}?unspent`,\n        ).then((res) => res.json());\n        return this.kupmiosUtxosToUtxos(result);\n      }),\n    );\n\n    return utxos\n      .reduce((acc, utxos) => acc.concat(utxos), [])\n      .filter((utxo) =>\n        outRefs.some(\n          (outRef) =>\n            utxo.txHash === outRef.txHash &&\n            utxo.outputIndex === outRef.outputIndex,\n        ),\n      );\n  }\n\n  async getDelegation(rewardAddress: RewardAddress): Promise<Delegation> {\n    const client = await this.ogmiosWsp(\"Query\", {\n      query: { delegationsAndRewards: [rewardAddress] },\n    });\n\n    return new Promise((res, rej) => {\n      client.addEventListener(\n        \"message\",\n        (msg: MessageEvent<string>) => {\n          try {\n            const { result } = JSON.parse(msg.data);\n            const delegation = (result ? Object.values(result)[0] : {}) as {\n              delegate: string;\n              rewards: number;\n            };\n            res({\n              poolId: delegation?.delegate || null,\n              rewards: BigInt(delegation?.rewards || 0),\n            });\n            client.close();\n          } catch (e) {\n            rej(e);\n          }\n        },\n        { once: true },\n      );\n    });\n  }\n\n  async getDatum(datumHash: DatumHash): Promise<Datum> {\n    const result = await fetch(`${this.kupoUrl}/datums/${datumHash}`).then(\n      (res) => res.json(),\n    );\n    if (!result || !result.datum) {\n      throw new Error(`No datum found for datum hash: ${datumHash}`);\n    }\n    return result.datum;\n  }\n\n  awaitTx(txHash: TxHash, checkInterval = 3000): Promise<boolean> {\n    return new Promise((res) => {\n      const confirmation = setInterval(async () => {\n        const isConfirmed = await fetch(\n          `${this.kupoUrl}/matches/*@${txHash}?unspent`,\n        ).then((res) => res.json());\n        if (isConfirmed && isConfirmed.length > 0) {\n          clearInterval(confirmation);\n          await new Promise((res) => setTimeout(() => res(1), 1000));\n          return res(true);\n        }\n      }, checkInterval);\n    });\n  }\n\n  async submitTx(tx: Transaction): Promise<TxHash> {\n    const client = await this.ogmiosWsp(\"SubmitTx\", {\n      submit: tx,\n    });\n\n    return new Promise((res, rej) => {\n      client.addEventListener(\n        \"message\",\n        (msg: MessageEvent<string>) => {\n          try {\n            const { result } = JSON.parse(msg.data);\n\n            if (result.SubmitSuccess) res(result.SubmitSuccess.txId);\n            else rej(result.SubmitFail);\n            client.close();\n          } catch (e) {\n            rej(e);\n          }\n        },\n        { once: true },\n      );\n    });\n  }\n\n  private kupmiosUtxosToUtxos(utxos: unknown): Promise<UTxO[]> {\n    // deno-lint-ignore no-explicit-any\n    return Promise.all(\n      (utxos as any).map(async (utxo: any) => {\n        return {\n          txHash: utxo.transaction_id,\n          outputIndex: parseInt(utxo.output_index),\n          address: utxo.address,\n          assets: (() => {\n            const a: Assets = { lovelace: BigInt(utxo.value.coins) };\n            Object.keys(utxo.value.assets).forEach((unit) => {\n              a[unit.replace(\".\", \"\")] = BigInt(utxo.value.assets[unit]);\n            });\n            return a;\n          })(),\n          datumHash: utxo?.datum_type === \"hash\" ? utxo.datum_hash : null,\n          datum:\n            utxo?.datum_type === \"inline\"\n              ? await this.getDatum(utxo.datum_hash)\n              : null,\n          scriptRef:\n            utxo.script_hash &&\n            (await (async () => {\n              const { script, language } = await fetch(\n                `${this.kupoUrl}/scripts/${utxo.script_hash}`,\n              ).then((res) => res.json());\n\n              if (language === \"native\") {\n                return { type: \"Native\", script };\n              } else if (language === \"plutus:v1\") {\n                return {\n                  type: \"PlutusV1\",\n                  script: toHex(\n                    C.PlutusV1Script.new(fromHex(script)).to_bytes(),\n                  ),\n                };\n              } else if (language === \"plutus:v2\") {\n                return {\n                  type: \"PlutusV2\",\n                  script: toHex(\n                    C.PlutusV2Script.new(fromHex(script)).to_bytes(),\n                  ),\n                };\n              }\n            })()),\n        } as UTxO;\n      }),\n    );\n  }\n\n  private async ogmiosWsp(\n    methodname: string,\n    args: unknown,\n  ): Promise<WebSocket> {\n    const client = new WebSocket(this.ogmiosUrl);\n    await new Promise((res) => {\n      client.addEventListener(\"open\", () => res(1), { once: true });\n    });\n    client.send(\n      JSON.stringify({\n        type: \"jsonwsp/request\",\n        version: \"1.0\",\n        servicename: \"ogmios\",\n        methodname,\n        args,\n      }),\n    );\n    return client;\n  }\n}\n","import { C } from \"../core/mod\";\nimport { applyDoubleCborEncoding, fromHex } from \"../utils/mod\";\nimport type {\n  Address,\n  Assets,\n  Credential,\n  Datum,\n  DatumHash,\n  Delegation,\n  Json,\n  OutRef,\n  ProtocolParameters,\n  Provider,\n  RewardAddress,\n  Transaction,\n  TxHash,\n  Unit,\n  UTxO,\n} from \"../types/mod.ts\";\nimport packageJson from \"../../package.json\";\n\nexport type MaestroSupportedNetworks = \"Mainnet\" | \"Preprod\" | \"Preview\";\n\nexport interface MaestroConfig {\n  network: MaestroSupportedNetworks;\n  apiKey: string;\n  turboSubmit?: boolean; // Read about paid turbo transaction submission feature at https://docs-v1.gomaestro.org/docs/Dapp%20Platform/Turbo%20Transaction.\n}\n\nexport class Maestro implements Provider {\n  url: string;\n  apiKey: string;\n  turboSubmit: boolean;\n\n  constructor({ network, apiKey, turboSubmit = false }: MaestroConfig) {\n    this.url = `https://${network}.gomaestro-api.org/v1`;\n    this.apiKey = apiKey;\n    this.turboSubmit = turboSubmit;\n  }\n\n  async getProtocolParameters(): Promise<ProtocolParameters> {\n    const timestampedResult = await fetch(`${this.url}/protocol-params`, {\n      headers: this.commonHeaders(),\n    }).then((res) => res.json());\n    const result = timestampedResult.data;\n    // Decimal numbers in Maestro are given as ratio of two numbers represented by string of format \"firstNumber/secondNumber\".\n    const rationalFromRationalString = (str: string): [bigint, bigint] => {\n      const forwardSlashIndex = str.indexOf(\"/\");\n      return [\n        BigInt(str.slice(0, forwardSlashIndex)),\n        BigInt(str.slice(forwardSlashIndex + 1)),\n      ];\n    };\n    // To rename keys in an object by the given key-map.\n    // deno-lint-ignore no-explicit-any\n    const renameKeysAndSort = (obj: any, newKeys: any) => {\n      const entries = Object.keys(obj)\n        .sort()\n        .map((key) => {\n          const newKey = newKeys[key] || key;\n          return {\n            [newKey]: Object.fromEntries(\n              Object.entries(obj[key]).sort(([k, _v], [k2, _v2]) =>\n                k.localeCompare(k2),\n              ),\n            ),\n          };\n        });\n      return Object.assign({}, ...entries);\n    };\n    return {\n      minFeeA: parseInt(result.min_fee_coefficient),\n      minFeeB: parseInt(result.min_fee_constant),\n      maxTxSize: parseInt(result.max_tx_size),\n      maxValSize: parseInt(result.max_value_size),\n      keyDeposit: BigInt(result.stake_key_deposit),\n      poolDeposit: BigInt(result.pool_deposit),\n      priceMem: rationalFromRationalString(result.prices.memory),\n      priceStep: rationalFromRationalString(result.prices.steps),\n      maxTxExMem: BigInt(result.max_execution_units_per_transaction.memory),\n      maxTxExSteps: BigInt(result.max_execution_units_per_transaction.steps),\n      coinsPerUtxoByte: BigInt(result.coins_per_utxo_byte),\n      collateralPercentage: parseInt(result.collateral_percentage),\n      maxCollateralInputs: parseInt(result.max_collateral_inputs),\n      costModels: renameKeysAndSort(result.cost_models, {\n        \"plutus:v1\": \"PlutusV1\",\n        \"plutus:v2\": \"PlutusV2\",\n      }),\n    };\n  }\n\n  private async getUtxosInternal(\n    addressOrCredential: Address | Credential,\n    unit?: Unit,\n  ): Promise<UTxO[]> {\n    const queryPredicate = (() => {\n      if (typeof addressOrCredential === \"string\") {\n        return \"/addresses/\" + addressOrCredential;\n      }\n      let credentialBech32Query = \"/addresses/cred/\";\n      credentialBech32Query +=\n        addressOrCredential.type === \"Key\"\n          ? C.Ed25519KeyHash.from_hex(addressOrCredential.hash).to_bech32(\n            \"addr_vkh\",\n          )\n          : C.ScriptHash.from_hex(addressOrCredential.hash).to_bech32(\n            \"addr_shared_vkh\",\n          );\n      return credentialBech32Query;\n    })();\n    const qparams = new URLSearchParams({\n      count: \"100\",\n      ...(unit && { asset: unit }),\n    });\n    const result: MaestroUtxos = await this.getAllPagesData(\n      async (qry: string) =>\n        await fetch(qry, {\n          headers: this.requireAmountsAsStrings(this.commonHeaders()),\n        }),\n      `${this.url}${queryPredicate}/utxos`,\n      qparams,\n      \"Location: getUtxosInternal. Error: Could not fetch UTxOs from Maestro\",\n    );\n    return result.map(this.maestroUtxoToUtxo);\n  }\n\n  getUtxos(addressOrCredential: Address | Credential): Promise<UTxO[]> {\n    return this.getUtxosInternal(addressOrCredential);\n  }\n\n  getUtxosWithUnit(\n    addressOrCredential: Address | Credential,\n    unit: Unit,\n  ): Promise<UTxO[]> {\n    return this.getUtxosInternal(addressOrCredential, unit);\n  }\n\n  async getUtxoByUnit(unit: Unit): Promise<UTxO> {\n    const timestampedAddressesResponse = await fetch(\n      `${this.url}/assets/${unit}/addresses?count=2`,\n      { headers: this.commonHeaders() },\n    );\n    const timestampedAddresses = await timestampedAddressesResponse.json();\n    if (!timestampedAddressesResponse.ok) {\n      if (timestampedAddresses.message) {\n        throw new Error(timestampedAddresses.message);\n      }\n      throw new Error(\n        \"Location: getUtxoByUnit. Error: Couldn't perform query. Received status code: \" +\n        timestampedAddressesResponse.status,\n      );\n    }\n    const addressesWithAmount = timestampedAddresses.data;\n    if (addressesWithAmount.length === 0) {\n      throw new Error(\"Location: getUtxoByUnit. Error: Unit not found.\");\n    }\n    if (addressesWithAmount.length > 1) {\n      throw new Error(\n        \"Location: getUtxoByUnit. Error: Unit needs to be an NFT or only held by one address.\",\n      );\n    }\n\n    const address = addressesWithAmount[0].address;\n\n    const utxos = await this.getUtxosWithUnit(address, unit);\n\n    if (utxos.length > 1) {\n      throw new Error(\n        \"Location: getUtxoByUnit. Error: Unit needs to be an NFT or only held by one address.\",\n      );\n    }\n\n    return utxos[0];\n  }\n\n  async getUtxosByOutRef(outRefs: OutRef[]): Promise<UTxO[]> {\n    const qry = `${this.url}/transactions/outputs`;\n    const body = JSON.stringify(\n      outRefs.map(({ txHash, outputIndex }) => `${txHash}#${outputIndex}`),\n    );\n    const utxos = await this.getAllPagesData<MaestroUtxo>(\n      async (qry: string) =>\n        await fetch(qry, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...this.requireAmountsAsStrings(this.commonHeaders()),\n          },\n          body: body,\n        }),\n      qry,\n      new URLSearchParams({}),\n      \"Location: getUtxosByOutRef. Error: Could not fetch UTxOs by references from Maestro\",\n    );\n    return utxos.map(this.maestroUtxoToUtxo);\n  }\n\n  async getDelegation(rewardAddress: RewardAddress): Promise<Delegation> {\n    const timestampedResultResponse = await fetch(\n      `${this.url}/accounts/${rewardAddress}`,\n      { headers: this.commonHeaders() },\n    );\n    if (!timestampedResultResponse.ok) {\n      return { poolId: null, rewards: 0n };\n    }\n    const timestampedResult = await timestampedResultResponse.json();\n    const result = timestampedResult.data;\n    return {\n      poolId: result.delegated_pool || null,\n      rewards: BigInt(result.rewards_available),\n    };\n  }\n\n  async getDatum(datumHash: DatumHash): Promise<Datum> {\n    const timestampedResultResponse = await fetch(\n      `${this.url}/datums/${datumHash}`,\n      {\n        headers: this.commonHeaders(),\n      },\n    );\n    if (!timestampedResultResponse.ok) {\n      if (timestampedResultResponse.status === 404) {\n        throw new Error(`No datum found for datum hash: ${datumHash}`);\n      } else {\n        throw new Error(\n          \"Location: getDatum. Error: Couldn't successfully perform query. Received status code: \" +\n          timestampedResultResponse.status,\n        );\n      }\n    }\n    const timestampedResult = await timestampedResultResponse.json();\n    return timestampedResult.data.bytes;\n  }\n\n  awaitTx(txHash: TxHash, checkInterval = 3000): Promise<boolean> {\n    return new Promise((res) => {\n      const confirmation = setInterval(async () => {\n        const isConfirmedResponse = await fetch(\n          `${this.url}/transactions/${txHash}/cbor`,\n          {\n            headers: this.commonHeaders(),\n          },\n        );\n        if (isConfirmedResponse.ok) {\n          await isConfirmedResponse.json();\n          clearInterval(confirmation);\n          await new Promise((res) => setTimeout(() => res(1), 1000));\n          return res(true);\n        }\n      }, checkInterval);\n    });\n  }\n\n  async submitTx(tx: Transaction): Promise<TxHash> {\n    let queryUrl = `${this.url}/txmanager`;\n    queryUrl += this.turboSubmit ? \"/turbosubmit\" : \"\";\n    const response = await fetch(queryUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/cbor\",\n        Accept: \"text/plain\",\n        ...this.commonHeaders(),\n      },\n      body: fromHex(tx),\n    });\n    const result = await response.text();\n    if (!response.ok) {\n      if (response.status === 400) throw new Error(result);\n      else {\n        throw new Error(\n          \"Could not submit transaction. Received status code: \" +\n          response.status,\n        );\n      }\n    }\n    return result;\n  }\n\n  private commonHeaders() {\n    return { \"api-key\": this.apiKey, translucent: packageJson.version };\n  }\n\n  private requireAmountsAsStrings(obj: {\n    \"api-key\": string;\n    translucent: string;\n  }) {\n    return { ...obj, \"amounts-as-strings\": \"true\" };\n  }\n\n  private maestroUtxoToUtxo(result: MaestroUtxo): UTxO {\n    return {\n      txHash: result.tx_hash,\n      outputIndex: result.index,\n      assets: (() => {\n        const a: Assets = {};\n        result.assets.forEach((am) => {\n          a[am.unit] = BigInt(am.amount);\n        });\n        return a;\n      })(),\n      address: result.address,\n      datumHash: result.datum\n        ? result.datum.type == \"inline\"\n          ? undefined\n          : result.datum.hash\n        : undefined,\n      datum: result.datum?.bytes,\n      scriptRef: result.reference_script\n        ? result.reference_script.type == \"native\"\n          ? undefined\n          : {\n            type:\n              result.reference_script.type == \"plutusv1\"\n                ? \"PlutusV1\"\n                : \"PlutusV2\",\n            script: applyDoubleCborEncoding(result.reference_script.bytes!),\n          }\n        : undefined,\n    };\n  }\n  private async getAllPagesData<T>(\n    getResponse: (qry: string) => Promise<Response>,\n    qry: string,\n    paramsGiven: URLSearchParams,\n    errorMsg: string,\n  ): Promise<Array<T>> {\n    let nextCursor = null;\n    let result: Array<T> = [];\n    while (true) {\n      if (nextCursor !== null) {\n        paramsGiven.set(\"cursor\", nextCursor);\n      }\n      const response = await getResponse(`${qry}?` + paramsGiven);\n      const pageResult = await response.json();\n      if (!response.ok) {\n        throw new Error(\n          `${errorMsg}. Received status code: ${response.status}`,\n        );\n      }\n      nextCursor = pageResult.next_cursor;\n      result = result.concat(pageResult.data as Array<T>);\n      if (nextCursor == null) break;\n    }\n    return result;\n  }\n}\n\ntype MaestroDatumOptionType = \"hash\" | \"inline\";\n\ntype MaestroDatumOption = {\n  type: MaestroDatumOptionType;\n  hash: string;\n  bytes?: string; // Hex encoded datum CBOR bytes (`null` if datum type is `hash` and corresponding datum bytes have not been seen on-chain).\n  json?: Json;\n};\n\ntype MaestroScriptType = \"native\" | \"plutusv1\" | \"plutusv2\";\n\ntype MaestroScript = {\n  hash: string;\n  type: MaestroScriptType;\n  bytes?: string; // Script bytes (`null` if `native` script).\n  json?: Json;\n};\n\ntype MaestroAsset = {\n  unit: string;\n  amount: string;\n};\n\ntype MaestroUtxo = {\n  tx_hash: TxHash;\n  index: number;\n  assets: Array<MaestroAsset>;\n  address: Address;\n  datum?: MaestroDatumOption;\n  reference_script?: MaestroScript;\n  // Other fields such as `slot` & `txout_cbor` are ignored.\n};\n\ntype MaestroUtxos = Array<MaestroUtxo>;\n","import type {\n  UTxO,\n  Delegation,\n  Payload,\n  TxHash,\n  Address,\n  RewardAddress,\n  Transaction,\n  SignedMessage,\n  CTransactionWitnessSet,\n  CTransactionUnspentOutputs,\n  CTransaction,\n} from \"../mod\";\n\nexport abstract class AbstractWallet {\n  abstract address(): Promise<Address>;\n  abstract rewardAddress(): Promise<RewardAddress | null>;\n  abstract getUtxos(): Promise<UTxO[]>;\n  abstract getUtxosCore(): Promise<CTransactionUnspentOutputs>;\n  abstract getDelegation(): Promise<Delegation>;\n  abstract signTx(tx: CTransaction): Promise<CTransactionWitnessSet>;\n  abstract signMessage(\n    address: Address | RewardAddress,\n    payload: Payload,\n  ): Promise<SignedMessage>;\n  abstract submitTx(signedTx: Transaction): Promise<TxHash>;\n}\n","import {\n  type UTxO,\n  C,\n  type Delegation,\n  type Payload,\n  type TxHash,\n  type SignedMessage,\n  type Address,\n  type RewardAddress,\n  type Transaction,\n  Translucent,\n  utxoToCore,\n  fromHex,\n  coreToUtxo,\n  CTransaction,\n  CTransactionWitnessSet,\n  CTransactionUnspentOutputs,\n} from \"../mod\";\nimport { AbstractWallet } from \"./abstract\";\n\nexport class ChainedWallet implements AbstractWallet {\n  translucent: Translucent;\n  wallet: AbstractWallet;\n  utxos: UTxO[] = [];\n\n  constructor(translucent: Translucent, wallet: AbstractWallet) {\n    this.translucent = translucent;\n    this.wallet = wallet;\n    wallet.getUtxos().then((utxos) => (this.utxos = utxos));\n  }\n\n  async refreshUtxos() {\n    this.utxos = await this.wallet.getUtxos();\n  }\n\n  async chain(tx: Transaction, predicate: (utxo: UTxO) => boolean) {\n    const txCore = C.Transaction.from_bytes(fromHex(tx));\n    const hash = C.hash_transaction(txCore.body());\n    const inputs = txCore.body().inputs();\n    const outputs = txCore.body().outputs();\n    const toConsume: Record<string, boolean> = {};\n    for (let i = 0; i < inputs.len(); i++) {\n      const input = inputs.get(i);\n      toConsume[input.transaction_id().to_hex() + input.index()] = true;\n    }\n    this.utxos = this.utxos.filter(\n      (utxo) => toConsume[utxo.txHash + utxo.outputIndex.toString()] == true,\n    );\n    for (let i = 0; i < outputs.len(); i++) {\n      const output = C.TransactionUnspentOutput.new(\n        C.TransactionInput.new(hash, C.BigNum.from_str(i.toString())),\n        outputs.get(i),\n      );\n      const utxo = coreToUtxo(output);\n      if (predicate(utxo)) {\n        this.utxos.push(utxo);\n      }\n    }\n  }\n\n  address(): Promise<Address> {\n    return this.wallet.address();\n  }\n\n  rewardAddress(): Promise<RewardAddress | null> {\n    return this.wallet.rewardAddress();\n  }\n\n  getUtxos(): Promise<UTxO[]> {\n    return Promise.resolve(this.utxos);\n  }\n\n  getUtxosCore(): Promise<CTransactionUnspentOutputs> {\n    const outputs = C.TransactionUnspentOutputs.new();\n    const utxos = this.utxos.map(utxoToCore);\n    for (const utxo of utxos) {\n      outputs.add(utxo);\n    }\n    return Promise.resolve(outputs);\n  }\n\n  getDelegation(): Promise<Delegation> {\n    return this.wallet.getDelegation();\n  }\n\n  signTx(tx: CTransaction): Promise<CTransactionWitnessSet> {\n    return this.wallet.signTx(tx);\n  }\n\n  signMessage(\n    address: Address | RewardAddress,\n    payload: Payload,\n  ): Promise<SignedMessage> {\n    return this.wallet.signMessage(address, payload);\n  }\n\n  submitTx(signedTx: Transaction): Promise<TxHash> {\n    return this.wallet.submitTx(signedTx);\n  }\n}\n"],"names":["__publicField","data","json","C","_e","address","paymentCredential","output","redeemers","utxo","keyHashes","i","txBody","withdrawals","scripts","res","utxos","qry"],"mappings":";;;;AAII,IAAA,EAAA;AACA,IAAA,EAAA;AACA,IAAA,EAAA;AAEJ,eAAe,UAAa,GAAA;AAC1B,EAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,IAAI,CAAA,GAAA,MAAM,OAAO,4CAA4C,CAAA,CAAA;AAC7D,IAAI,CAAA,GAAA,MAAM,OAAO,UAAU,CAAA,CAAA;AAC3B,IAAI,CAAA,GAAA,MAAM,OAAO,yCAAyC,CAAA,CAAA;AAAA,GACrD,MAAA;AACL,IAAI,CAAA,GAAA,MAAM,OAAO,2CAA2C,CAAA,CAAA;AAC5D,IAAI,CAAA,GAAA,MAAM,OAAO,WAAW,CAAA,CAAA;AAC5B,IAAI,CAAA,GAAA,MAAM,OAAO,wCAAwC,CAAA,CAAA;AAAA,GAC3D;AACF;;ACdO,SAAS,iBAAiB,UAAwB,EAAA;AACvD,EAAM,MAAA,QAAA,GAAW,CAAE,CAAA,QAAA,CAAS,GAAI,EAAA,CAAA;AAGhC,EAAA,MAAM,YAAY,CAAE,CAAA,SAAA,CAAU,YAAY,CAAE,CAAA,QAAA,CAAS,eAAe,CAAA,CAAA;AACpE,EAAA,MAAA,CAAO,OAAO,UAAW,CAAA,QAAQ,EAAE,OAAQ,CAAA,CAAC,MAAM,KAAU,KAAA;AAC1D,IAAA,SAAA,CAAU,GAAI,CAAA,KAAA,EAAO,CAAE,CAAA,GAAA,CAAI,GAAI,CAAA,CAAA,CAAE,MAAO,CAAA,QAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAC,CAAC,CAAA,CAAA;AAAA,GACnE,CAAA,CAAA;AACD,EAAA,QAAA,CAAS,OAAO,SAAS,CAAA,CAAA;AAGzB,EAAA,MAAM,YAAY,CAAE,CAAA,SAAA,CAAU,YAAY,CAAE,CAAA,QAAA,CAAS,eAAe,CAAA,CAAA;AACpE,EAAO,MAAA,CAAA,MAAA,CAAO,WAAW,QAAY,IAAA,EAAE,CAAE,CAAA,OAAA,CAAQ,CAAC,IAAA,EAAM,KAAU,KAAA;AAChE,IAAA,SAAA,CAAU,GAAI,CAAA,KAAA,EAAO,CAAE,CAAA,GAAA,CAAI,GAAI,CAAA,CAAA,CAAE,MAAO,CAAA,QAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAC,CAAC,CAAA,CAAA;AAAA,GACnE,CAAA,CAAA;AACD,EAAA,QAAA,CAAS,OAAO,SAAS,CAAA,CAAA;AAEzB,EAAO,OAAA,QAAA,CAAA;AACT,CAAA;AAEO,MAAM,2BAAkD,GAAA;AAAA,EAC7D,OAAS,EAAA,EAAA;AAAA,EACT,OAAS,EAAA,MAAA;AAAA,EACT,SAAW,EAAA,KAAA;AAAA,EACX,UAAY,EAAA,GAAA;AAAA,EACZ,UAAY,EAAA,QAAA;AAAA,EACZ,WAAa,EAAA,UAAA;AAAA,EACb,QAAA,EAAU,CAAC,IAAA,EAAM,MAAM,CAAA;AAAA,EACvB,SAAA,EAAW,CAAC,IAAA,EAAM,SAAW,CAAA;AAAA,EAC7B,UAAY,EAAA,SAAA;AAAA,EACZ,YAAc,EAAA,YAAA;AAAA,EACd,gBAAkB,EAAA,KAAA;AAAA,EAClB,oBAAsB,EAAA,GAAA;AAAA,EACtB,mBAAqB,EAAA,CAAA;AAAA,EACrB,UAAY,EAAA;AAAA,IACV,QAAU,EAAA;AAAA,MACR,oCAAsC,EAAA,MAAA;AAAA,MACtC,gCAAkC,EAAA,GAAA;AAAA,MAClC,uCAAyC,EAAA,CAAA;AAAA,MACzC,mCAAqC,EAAA,CAAA;AAAA,MACrC,0CAA4C,EAAA,GAAA;AAAA,MAC5C,sCAAwC,EAAA,GAAA;AAAA,MACxC,6CAA+C,EAAA,CAAA;AAAA,MAC/C,yCAA2C,EAAA,CAAA;AAAA,MAC3C,sCAAwC,EAAA,GAAA;AAAA,MACxC,kCAAoC,EAAA,KAAA;AAAA,MACpC,yCAA2C,EAAA,CAAA;AAAA,MAC3C,qCAAuC,EAAA,CAAA;AAAA,MACvC,qBAAuB,EAAA,GAAA;AAAA,MACvB,wBAA0B,EAAA,EAAA;AAAA,MAC1B,qCAAuC,EAAA,MAAA;AAAA,MACvC,iCAAmC,EAAA,KAAA;AAAA,MACnC,8BAAgC,EAAA,CAAA;AAAA,MAChC,0BAA4B,EAAA,IAAA;AAAA,MAC5B,6BAA+B,EAAA,GAAA;AAAA,MAC/B,4BAA8B,EAAA,IAAA;AAAA,MAC9B,+BAAiC,EAAA,GAAA;AAAA,MACjC,0BAA4B,EAAA,IAAA;AAAA,MAC5B,6BAA+B,EAAA,GAAA;AAAA,MAC/B,0BAA4B,EAAA,IAAA;AAAA,MAC5B,6BAA+B,EAAA,GAAA;AAAA,MAC/B,0BAA4B,EAAA,IAAA;AAAA,MAC5B,6BAA+B,EAAA,GAAA;AAAA,MAC/B,wBAA0B,EAAA,IAAA;AAAA,MAC1B,2BAA6B,EAAA,GAAA;AAAA,MAC7B,4BAA8B,EAAA,GAAA;AAAA,MAC9B,+BAAiC,EAAA,GAAA;AAAA,MACjC,wBAA0B,EAAA,IAAA;AAAA,MAC1B,2BAA6B,EAAA,GAAA;AAAA,MAC7B,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,0BAA4B,EAAA,MAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,CAAA;AAAA,MAC/B,wCAA0C,EAAA,MAAA;AAAA,MAC1C,oCAAsC,EAAA,GAAA;AAAA,MACtC,2CAA6C,EAAA,CAAA;AAAA,MAC7C,uCAAyC,EAAA,CAAA;AAAA,MACzC,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,oCAAsC,EAAA,MAAA;AAAA,MACtC,gCAAkC,EAAA,KAAA;AAAA,MAClC,uCAAyC,EAAA,CAAA;AAAA,MACzC,mCAAqC,EAAA,CAAA;AAAA,MACrC,sCAAwC,EAAA,MAAA;AAAA,MACxC,uDAAyD,EAAA,MAAA;AAAA,MACzD,mDAAqD,EAAA,GAAA;AAAA,MACrD,0CAA4C,EAAA,CAAA;AAAA,MAC5C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,sCAAwC,EAAA,CAAA;AAAA,MACxC,oCAAsC,EAAA,GAAA;AAAA,MACtC,gCAAkC,EAAA,KAAA;AAAA,MAClC,uCAAyC,EAAA,CAAA;AAAA,MACzC,mCAAqC,EAAA,CAAA;AAAA,MACrC,yCAA2C,EAAA,KAAA;AAAA,MAC3C,0CAA4C,EAAA,MAAA;AAAA,MAC5C,sCAAwC,EAAA,EAAA;AAAA,MACxC,mCAAqC,EAAA,CAAA;AAAA,MACrC,oCAAsC,EAAA,OAAA;AAAA,MACtC,gCAAkC,EAAA,KAAA;AAAA,MAClC,6BAA+B,EAAA,CAAA;AAAA,MAC/B,uCAAyC,EAAA,MAAA;AAAA,MACzC,mCAAqC,EAAA,GAAA;AAAA,MACrC,gCAAkC,EAAA,CAAA;AAAA,MAClC,qCAAuC,EAAA,KAAA;AAAA,MACvC,sCAAwC,EAAA,GAAA;AAAA,MACxC,kCAAoC,EAAA,KAAA;AAAA,MACpC,+BAAiC,EAAA,CAAA;AAAA,MACjC,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,wBAA0B,EAAA,KAAA;AAAA,MAC1B,2BAA6B,EAAA,EAAA;AAAA,MAC7B,qBAAuB,EAAA,GAAA;AAAA,MACvB,wBAA0B,EAAA,EAAA;AAAA,MAC1B,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,CAAA;AAAA,MAC/B,+BAAiC,EAAA,KAAA;AAAA,MACjC,kCAAoC,EAAA,CAAA;AAAA,MACpC,kCAAoC,EAAA,GAAA;AAAA,MACpC,qCAAuC,EAAA,EAAA;AAAA,MACvC,4CAA8C,EAAA,MAAA;AAAA,MAC9C,wCAA0C,EAAA,GAAA;AAAA,MAC1C,qCAAuC,EAAA,CAAA;AAAA,MACvC,kDAAoD,EAAA,MAAA;AAAA,MACpD,8CAAgD,EAAA,GAAA;AAAA,MAChD,2CAA6C,EAAA,CAAA;AAAA,MAC7C,+CAAiD,EAAA,MAAA;AAAA,MACjD,2CAA6C,EAAA,GAAA;AAAA,MAC7C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,yCAA2C,EAAA,MAAA;AAAA,MAC3C,qCAAuC,EAAA,GAAA;AAAA,MACvC,kCAAoC,EAAA,CAAA;AAAA,MACpC,wBAA0B,EAAA,KAAA;AAAA,MAC1B,2BAA6B,EAAA,EAAA;AAAA,MAC7B,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,sBAAwB,EAAA,KAAA;AAAA,MACxB,yBAA2B,EAAA,EAAA;AAAA,MAC3B,yBAA2B,EAAA,KAAA;AAAA,MAC3B,4BAA8B,EAAA,EAAA;AAAA,MAC9B,6BAA+B,EAAA,KAAA;AAAA,MAC/B,gCAAkC,EAAA,EAAA;AAAA,MAClC,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,mCAAqC,EAAA,MAAA;AAAA,MACrC,oDAAsD,EAAA,MAAA;AAAA,MACtD,gDAAkD,EAAA,GAAA;AAAA,MAClD,uCAAyC,EAAA,CAAA;AAAA,MACzC,qCAAuC,EAAA,CAAA;AAAA,MACvC,mCAAqC,EAAA,CAAA;AAAA,MACrC,yCAA2C,EAAA,KAAA;AAAA,MAC3C,qCAAuC,EAAA,KAAA;AAAA,MACvC,4CAA8C,EAAA,CAAA;AAAA,MAC9C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,wBAA0B,EAAA,KAAA;AAAA,MAC1B,2BAA6B,EAAA,EAAA;AAAA,MAC7B,wCAA0C,EAAA,MAAA;AAAA,MAC1C,yDAA2D,EAAA,MAAA;AAAA,MAC3D,qDAAuD,EAAA,GAAA;AAAA,MACvD,4CAA8C,EAAA,CAAA;AAAA,MAC9C,0CAA4C,EAAA,CAAA;AAAA,MAC5C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,yCAA2C,EAAA,MAAA;AAAA,MAC3C,0DAA4D,EAAA,MAAA;AAAA,MAC5D,sDAAwD,EAAA,GAAA;AAAA,MACxD,6CAA+C,EAAA,CAAA;AAAA,MAC/C,2CAA6C,EAAA,CAAA;AAAA,MAC7C,yCAA2C,EAAA,CAAA;AAAA,MAC3C,kCAAoC,EAAA,MAAA;AAAA,MACpC,8BAAgC,EAAA,KAAA;AAAA,MAChC,2BAA6B,EAAA,CAAA;AAAA,MAC7B,kCAAoC,EAAA,OAAA;AAAA,MACpC,8BAAgC,EAAA,KAAA;AAAA,MAChC,2BAA6B,EAAA,CAAA;AAAA,MAC7B,yCAA2C,EAAA,MAAA;AAAA,MAC3C,qCAAuC,EAAA,CAAA;AAAA,MACvC,4CAA8C,EAAA,CAAA;AAAA,MAC9C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,yCAA2C,EAAA,MAAA;AAAA,MAC3C,qCAAuC,EAAA,GAAA;AAAA,MACvC,4CAA8C,EAAA,CAAA;AAAA,MAC9C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,wBAA0B,EAAA,KAAA;AAAA,MAC1B,2BAA6B,EAAA,EAAA;AAAA,MAC7B,qBAAuB,EAAA,MAAA;AAAA,MACvB,wBAA0B,EAAA,EAAA;AAAA,MAC1B,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,4BAA8B,EAAA,KAAA;AAAA,MAC9B,+BAAiC,EAAA,EAAA;AAAA,MACjC,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,yBAA2B,EAAA,KAAA;AAAA,MAC3B,4BAA8B,EAAA,EAAA;AAAA,MAC9B,gDAAkD,EAAA,OAAA;AAAA,MAClD,4CAA8C,EAAA,IAAA;AAAA,MAC9C,yCAA2C,EAAA,EAAA;AAAA,KAC7C;AAAA,IACA,QAAU,EAAA;AAAA,MACR,oCAAsC,EAAA,MAAA;AAAA,MACtC,gCAAkC,EAAA,GAAA;AAAA,MAClC,uCAAyC,EAAA,CAAA;AAAA,MACzC,mCAAqC,EAAA,CAAA;AAAA,MACrC,0CAA4C,EAAA,GAAA;AAAA,MAC5C,sCAAwC,EAAA,GAAA;AAAA,MACxC,6CAA+C,EAAA,CAAA;AAAA,MAC/C,yCAA2C,EAAA,CAAA;AAAA,MAC3C,sCAAwC,EAAA,GAAA;AAAA,MACxC,kCAAoC,EAAA,KAAA;AAAA,MACpC,yCAA2C,EAAA,CAAA;AAAA,MAC3C,qCAAuC,EAAA,CAAA;AAAA,MACvC,qBAAuB,EAAA,GAAA;AAAA,MACvB,wBAA0B,EAAA,EAAA;AAAA,MAC1B,qCAAuC,EAAA,MAAA;AAAA,MACvC,iCAAmC,EAAA,KAAA;AAAA,MACnC,8BAAgC,EAAA,CAAA;AAAA,MAChC,0BAA4B,EAAA,IAAA;AAAA,MAC5B,6BAA+B,EAAA,GAAA;AAAA,MAC/B,4BAA8B,EAAA,IAAA;AAAA,MAC9B,+BAAiC,EAAA,GAAA;AAAA,MACjC,0BAA4B,EAAA,IAAA;AAAA,MAC5B,6BAA+B,EAAA,GAAA;AAAA,MAC/B,0BAA4B,EAAA,IAAA;AAAA,MAC5B,6BAA+B,EAAA,GAAA;AAAA,MAC/B,0BAA4B,EAAA,IAAA;AAAA,MAC5B,6BAA+B,EAAA,GAAA;AAAA,MAC/B,wBAA0B,EAAA,IAAA;AAAA,MAC1B,2BAA6B,EAAA,GAAA;AAAA,MAC7B,4BAA8B,EAAA,GAAA;AAAA,MAC9B,+BAAiC,EAAA,GAAA;AAAA,MACjC,wBAA0B,EAAA,IAAA;AAAA,MAC1B,2BAA6B,EAAA,GAAA;AAAA,MAC7B,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,0BAA4B,EAAA,MAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,CAAA;AAAA,MAC/B,wCAA0C,EAAA,MAAA;AAAA,MAC1C,oCAAsC,EAAA,GAAA;AAAA,MACtC,2CAA6C,EAAA,CAAA;AAAA,MAC7C,uCAAyC,EAAA,CAAA;AAAA,MACzC,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,oCAAsC,EAAA,MAAA;AAAA,MACtC,gCAAkC,EAAA,KAAA;AAAA,MAClC,uCAAyC,EAAA,CAAA;AAAA,MACzC,mCAAqC,EAAA,CAAA;AAAA,MACrC,sCAAwC,EAAA,MAAA;AAAA,MACxC,uDAAyD,EAAA,MAAA;AAAA,MACzD,mDAAqD,EAAA,GAAA;AAAA,MACrD,0CAA4C,EAAA,CAAA;AAAA,MAC5C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,sCAAwC,EAAA,CAAA;AAAA,MACxC,oCAAsC,EAAA,GAAA;AAAA,MACtC,gCAAkC,EAAA,KAAA;AAAA,MAClC,uCAAyC,EAAA,CAAA;AAAA,MACzC,mCAAqC,EAAA,CAAA;AAAA,MACrC,yCAA2C,EAAA,KAAA;AAAA,MAC3C,0CAA4C,EAAA,MAAA;AAAA,MAC5C,sCAAwC,EAAA,EAAA;AAAA,MACxC,mCAAqC,EAAA,CAAA;AAAA,MACrC,oCAAsC,EAAA,OAAA;AAAA,MACtC,gCAAkC,EAAA,KAAA;AAAA,MAClC,6BAA+B,EAAA,CAAA;AAAA,MAC/B,uCAAyC,EAAA,MAAA;AAAA,MACzC,mCAAqC,EAAA,GAAA;AAAA,MACrC,gCAAkC,EAAA,CAAA;AAAA,MAClC,qCAAuC,EAAA,KAAA;AAAA,MACvC,sCAAwC,EAAA,GAAA;AAAA,MACxC,kCAAoC,EAAA,KAAA;AAAA,MACpC,+BAAiC,EAAA,CAAA;AAAA,MACjC,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,wBAA0B,EAAA,KAAA;AAAA,MAC1B,2BAA6B,EAAA,EAAA;AAAA,MAC7B,qBAAuB,EAAA,GAAA;AAAA,MACvB,wBAA0B,EAAA,EAAA;AAAA,MAC1B,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,CAAA;AAAA,MAC/B,+BAAiC,EAAA,KAAA;AAAA,MACjC,kCAAoC,EAAA,CAAA;AAAA,MACpC,kCAAoC,EAAA,GAAA;AAAA,MACpC,qCAAuC,EAAA,EAAA;AAAA,MACvC,4CAA8C,EAAA,MAAA;AAAA,MAC9C,wCAA0C,EAAA,GAAA;AAAA,MAC1C,qCAAuC,EAAA,CAAA;AAAA,MACvC,kDAAoD,EAAA,MAAA;AAAA,MACpD,8CAAgD,EAAA,GAAA;AAAA,MAChD,2CAA6C,EAAA,CAAA;AAAA,MAC7C,+CAAiD,EAAA,MAAA;AAAA,MACjD,2CAA6C,EAAA,GAAA;AAAA,MAC7C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,yCAA2C,EAAA,MAAA;AAAA,MAC3C,qCAAuC,EAAA,GAAA;AAAA,MACvC,kCAAoC,EAAA,CAAA;AAAA,MACpC,wBAA0B,EAAA,KAAA;AAAA,MAC1B,2BAA6B,EAAA,EAAA;AAAA,MAC7B,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,sBAAwB,EAAA,KAAA;AAAA,MACxB,yBAA2B,EAAA,EAAA;AAAA,MAC3B,yBAA2B,EAAA,KAAA;AAAA,MAC3B,4BAA8B,EAAA,EAAA;AAAA,MAC9B,6BAA+B,EAAA,KAAA;AAAA,MAC/B,gCAAkC,EAAA,EAAA;AAAA,MAClC,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,mCAAqC,EAAA,MAAA;AAAA,MACrC,oDAAsD,EAAA,MAAA;AAAA,MACtD,gDAAkD,EAAA,GAAA;AAAA,MAClD,uCAAyC,EAAA,CAAA;AAAA,MACzC,qCAAuC,EAAA,CAAA;AAAA,MACvC,mCAAqC,EAAA,CAAA;AAAA,MACrC,yCAA2C,EAAA,KAAA;AAAA,MAC3C,qCAAuC,EAAA,KAAA;AAAA,MACvC,4CAA8C,EAAA,CAAA;AAAA,MAC9C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,wBAA0B,EAAA,KAAA;AAAA,MAC1B,2BAA6B,EAAA,EAAA;AAAA,MAC7B,wCAA0C,EAAA,MAAA;AAAA,MAC1C,yDAA2D,EAAA,MAAA;AAAA,MAC3D,qDAAuD,EAAA,GAAA;AAAA,MACvD,4CAA8C,EAAA,CAAA;AAAA,MAC9C,0CAA4C,EAAA,CAAA;AAAA,MAC5C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,yCAA2C,EAAA,MAAA;AAAA,MAC3C,0DAA4D,EAAA,MAAA;AAAA,MAC5D,sDAAwD,EAAA,GAAA;AAAA,MACxD,6CAA+C,EAAA,CAAA;AAAA,MAC/C,2CAA6C,EAAA,CAAA;AAAA,MAC7C,yCAA2C,EAAA,CAAA;AAAA,MAC3C,uCAAyC,EAAA,OAAA;AAAA,MACzC,mCAAqC,EAAA,MAAA;AAAA,MACrC,0CAA4C,EAAA,CAAA;AAAA,MAC5C,sCAAwC,EAAA,CAAA;AAAA,MACxC,kCAAoC,EAAA,MAAA;AAAA,MACpC,8BAAgC,EAAA,KAAA;AAAA,MAChC,2BAA6B,EAAA,CAAA;AAAA,MAC7B,kCAAoC,EAAA,OAAA;AAAA,MACpC,8BAAgC,EAAA,KAAA;AAAA,MAChC,2BAA6B,EAAA,CAAA;AAAA,MAC7B,yCAA2C,EAAA,MAAA;AAAA,MAC3C,qCAAuC,EAAA,CAAA;AAAA,MACvC,4CAA8C,EAAA,CAAA;AAAA,MAC9C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,yCAA2C,EAAA,MAAA;AAAA,MAC3C,qCAAuC,EAAA,GAAA;AAAA,MACvC,4CAA8C,EAAA,CAAA;AAAA,MAC9C,wCAA0C,EAAA,CAAA;AAAA,MAC1C,wBAA0B,EAAA,KAAA;AAAA,MAC1B,2BAA6B,EAAA,EAAA;AAAA,MAC7B,qBAAuB,EAAA,MAAA;AAAA,MACvB,wBAA0B,EAAA,EAAA;AAAA,MAC1B,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,4BAA8B,EAAA,KAAA;AAAA,MAC9B,+BAAiC,EAAA,EAAA;AAAA,MACjC,uBAAyB,EAAA,KAAA;AAAA,MACzB,0BAA4B,EAAA,EAAA;AAAA,MAC5B,0BAA4B,EAAA,KAAA;AAAA,MAC5B,6BAA+B,EAAA,EAAA;AAAA,MAC/B,yBAA2B,EAAA,KAAA;AAAA,MAC3B,4BAA8B,EAAA,EAAA;AAAA,MAC9B,6CAA+C,EAAA,QAAA;AAAA,MAC/C,gDAAkD,EAAA,EAAA;AAAA,MAClD,gDAAkD,EAAA,QAAA;AAAA,MAClD,4CAA8C,EAAA,KAAA;AAAA,MAC9C,yCAA2C,EAAA,EAAA;AAAA,MAC3C,yDAA2D,EAAA,QAAA;AAAA,MAC3D,qDAAuD,EAAA,KAAA;AAAA,MACvD,kDAAoD,EAAA,EAAA;AAAA,KACtD;AAAA,GACF;AACF,EAAA;AAEO,MAAM,aAAgB,GAAA;AAAA,EAC3B,QAAU,EAAA;AAAA,IACR,oCAAA;AAAA,IACA,gCAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,0CAAA;AAAA,IACA,sCAAA;AAAA,IACA,6CAAA;AAAA,IACA,yCAAA;AAAA,IACA,sCAAA;AAAA,IACA,kCAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,qBAAA;AAAA,IACA,wBAAA;AAAA,IACA,qCAAA;AAAA,IACA,iCAAA;AAAA,IACA,8BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,4BAAA;AAAA,IACA,+BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,4BAAA;AAAA,IACA,+BAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,wCAAA;AAAA,IACA,oCAAA;AAAA,IACA,2CAAA;AAAA,IACA,uCAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,oCAAA;AAAA,IACA,gCAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,sCAAA;AAAA,IACA,uDAAA;AAAA,IACA,mDAAA;AAAA,IACA,0CAAA;AAAA,IACA,wCAAA;AAAA,IACA,sCAAA;AAAA,IACA,oCAAA;AAAA,IACA,gCAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,yCAAA;AAAA,IACA,0CAAA;AAAA,IACA,sCAAA;AAAA,IACA,mCAAA;AAAA,IACA,oCAAA;AAAA,IACA,gCAAA;AAAA,IACA,6BAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,gCAAA;AAAA,IACA,qCAAA;AAAA,IACA,sCAAA;AAAA,IACA,kCAAA;AAAA,IACA,+BAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,qBAAA;AAAA,IACA,wBAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,+BAAA;AAAA,IACA,kCAAA;AAAA,IACA,kCAAA;AAAA,IACA,qCAAA;AAAA,IACA,4CAAA;AAAA,IACA,wCAAA;AAAA,IACA,qCAAA;AAAA,IACA,kDAAA;AAAA,IACA,8CAAA;AAAA,IACA,2CAAA;AAAA,IACA,+CAAA;AAAA,IACA,2CAAA;AAAA,IACA,wCAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,kCAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,sBAAA;AAAA,IACA,yBAAA;AAAA,IACA,yBAAA;AAAA,IACA,4BAAA;AAAA,IACA,6BAAA;AAAA,IACA,gCAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,mCAAA;AAAA,IACA,oDAAA;AAAA,IACA,gDAAA;AAAA,IACA,uCAAA;AAAA,IACA,qCAAA;AAAA,IACA,mCAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,4CAAA;AAAA,IACA,wCAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,wCAAA;AAAA,IACA,yDAAA;AAAA,IACA,qDAAA;AAAA,IACA,4CAAA;AAAA,IACA,0CAAA;AAAA,IACA,wCAAA;AAAA,IACA,yCAAA;AAAA,IACA,0DAAA;AAAA,IACA,sDAAA;AAAA,IACA,6CAAA;AAAA,IACA,2CAAA;AAAA,IACA,yCAAA;AAAA,IACA,kCAAA;AAAA,IACA,8BAAA;AAAA,IACA,2BAAA;AAAA,IACA,kCAAA;AAAA,IACA,8BAAA;AAAA,IACA,2BAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,4CAAA;AAAA,IACA,wCAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,4CAAA;AAAA,IACA,wCAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,qBAAA;AAAA,IACA,wBAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,4BAAA;AAAA,IACA,+BAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,yBAAA;AAAA,IACA,4BAAA;AAAA,IACA,gDAAA;AAAA,IACA,4CAAA;AAAA,IACA,yCAAA;AAAA,GACF;AAAA,EACA,QAAU,EAAA;AAAA,IACR,oCAAA;AAAA,IACA,gCAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,0CAAA;AAAA,IACA,sCAAA;AAAA,IACA,6CAAA;AAAA,IACA,yCAAA;AAAA,IACA,sCAAA;AAAA,IACA,kCAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,qBAAA;AAAA,IACA,wBAAA;AAAA,IACA,qCAAA;AAAA,IACA,iCAAA;AAAA,IACA,8BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,4BAAA;AAAA,IACA,+BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,4BAAA;AAAA,IACA,+BAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,wCAAA;AAAA,IACA,oCAAA;AAAA,IACA,2CAAA;AAAA,IACA,uCAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,oCAAA;AAAA,IACA,gCAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,sCAAA;AAAA,IACA,uDAAA;AAAA,IACA,mDAAA;AAAA,IACA,0CAAA;AAAA,IACA,wCAAA;AAAA,IACA,sCAAA;AAAA,IACA,oCAAA;AAAA,IACA,gCAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,yCAAA;AAAA,IACA,0CAAA;AAAA,IACA,sCAAA;AAAA,IACA,mCAAA;AAAA,IACA,oCAAA;AAAA,IACA,gCAAA;AAAA,IACA,6BAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,gCAAA;AAAA,IACA,qCAAA;AAAA,IACA,sCAAA;AAAA,IACA,kCAAA;AAAA,IACA,+BAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,qBAAA;AAAA,IACA,wBAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,+BAAA;AAAA,IACA,kCAAA;AAAA,IACA,kCAAA;AAAA,IACA,qCAAA;AAAA,IACA,4CAAA;AAAA,IACA,wCAAA;AAAA,IACA,qCAAA;AAAA,IACA,kDAAA;AAAA,IACA,8CAAA;AAAA,IACA,2CAAA;AAAA,IACA,+CAAA;AAAA,IACA,2CAAA;AAAA,IACA,wCAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,kCAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,sBAAA;AAAA,IACA,yBAAA;AAAA,IACA,yBAAA;AAAA,IACA,4BAAA;AAAA,IACA,6BAAA;AAAA,IACA,gCAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,mCAAA;AAAA,IACA,oDAAA;AAAA,IACA,gDAAA;AAAA,IACA,uCAAA;AAAA,IACA,qCAAA;AAAA,IACA,mCAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,4CAAA;AAAA,IACA,wCAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,wCAAA;AAAA,IACA,yDAAA;AAAA,IACA,qDAAA;AAAA,IACA,4CAAA;AAAA,IACA,0CAAA;AAAA,IACA,wCAAA;AAAA,IACA,yCAAA;AAAA,IACA,0DAAA;AAAA,IACA,sDAAA;AAAA,IACA,6CAAA;AAAA,IACA,2CAAA;AAAA,IACA,yCAAA;AAAA,IACA,uCAAA;AAAA,IACA,mCAAA;AAAA,IACA,0CAAA;AAAA,IACA,sCAAA;AAAA,IACA,kCAAA;AAAA,IACA,8BAAA;AAAA,IACA,2BAAA;AAAA,IACA,kCAAA;AAAA,IACA,8BAAA;AAAA,IACA,2BAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,4CAAA;AAAA,IACA,wCAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,yCAAA;AAAA,IACA,qCAAA;AAAA,IACA,4CAAA;AAAA,IACA,wCAAA;AAAA,IACA,wBAAA;AAAA,IACA,2BAAA;AAAA,IACA,qBAAA;AAAA,IACA,wBAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,4BAAA;AAAA,IACA,+BAAA;AAAA,IACA,uBAAA;AAAA,IACA,0BAAA;AAAA,IACA,0BAAA;AAAA,IACA,6BAAA;AAAA,IACA,yBAAA;AAAA,IACA,4BAAA;AAAA,IACA,6CAAA;AAAA,IACA,gDAAA;AAAA,IACA,gDAAA;AAAA,IACA,4CAAA;AAAA,IACA,yCAAA;AAAA,IACA,yDAAA;AAAA,IACA,qDAAA;AAAA,IACA,kDAAA;AAAA,GACF;AACF;;ACxtBA,MAAM,gBAAmB,GAAA,kBAAA,CAAA;AACzB,MAAM,eAAkB,GAAA,iBAAA,CAAA;AACxB,MAAM,gBAAmB,GAAA,2BAAA,CAAA;AACzB,MAAM,iBACJ,GAAA,qGAAA,CAAA;AAGc,SAAA,iBAAA,CACd,UACA,QACQ,EAAA;AACR,EAAA,QAAA,GAAW,QAAY,IAAA,gBAAA,CAAA;AACvB,EAAA,IAAI,CAAC,QAAU,EAAA;AACb,IAAM,MAAA,IAAI,MAAM,iBAAiB,CAAA,CAAA;AAAA,GACnC;AACA,EAAA,MAAM,KAAQ,GAAA,SAAA,CAAU,QAAQ,CAAA,CAAE,MAAM,GAAG,CAAA,CAAA;AAC3C,EAAI,IAAA,KAAA,CAAM,MAAS,GAAA,CAAA,KAAM,CAAG,EAAA;AAC1B,IAAM,MAAA,IAAI,MAAM,gBAAgB,CAAA,CAAA;AAAA,GAClC;AAEA,EAAA,MAAM,IAAO,GAAA,KAAA,CACV,GAAI,CAAA,CAAC,IAAS,KAAA;AACb,IAAM,MAAA,KAAA,GAAQ,QAAU,CAAA,OAAA,CAAQ,IAAI,CAAA,CAAA;AACpC,IAAA,IAAI,UAAU,CAAI,CAAA,EAAA;AAChB,MAAM,MAAA,IAAI,MAAM,gBAAgB,CAAA,CAAA;AAAA,KAClC;AACA,IAAA,OAAO,KAAK,KAAM,CAAA,QAAA,CAAS,CAAC,CAAA,EAAG,KAAK,EAAE,CAAA,CAAA;AAAA,GACvC,CACA,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAEV,EAAA,MAAM,eAAe,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,MAAA,GAAS,EAAE,CAAI,GAAA,EAAA,CAAA;AACpD,EAAA,MAAM,WAAc,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,EAAG,YAAY,CAAA,CAAA;AAC9C,EAAM,MAAA,YAAA,GAAe,IAAK,CAAA,KAAA,CAAM,YAAY,CAAA,CAAA;AAE5C,EAAA,MAAM,eAAe,WAAY,CAAA,KAAA,CAAM,WAAW,CAAA,CAAG,IAAI,YAAY,CAAA,CAAA;AACrE,EAAI,IAAA,YAAA,CAAa,SAAS,EAAI,EAAA;AAC5B,IAAM,MAAA,IAAI,MAAM,eAAe,CAAA,CAAA;AAAA,GACjC;AACA,EAAI,IAAA,YAAA,CAAa,SAAS,EAAI,EAAA;AAC5B,IAAM,MAAA,IAAI,MAAM,eAAe,CAAA,CAAA;AAAA,GACjC;AACA,EAAI,IAAA,YAAA,CAAa,MAAS,GAAA,CAAA,KAAM,CAAG,EAAA;AACjC,IAAM,MAAA,IAAI,MAAM,eAAe,CAAA,CAAA;AAAA,GACjC;AACA,EAAM,MAAA,OAAA,GAAU,IAAI,UAAA,CAAW,YAAY,CAAA,CAAA;AAC3C,EAAM,MAAA,WAAA,GAAc,mBAAmB,OAAO,CAAA,CAAA;AAC9C,EAAA,IAAI,gBAAgB,YAAc,EAAA;AAChC,IAAM,MAAA,IAAI,MAAM,gBAAgB,CAAA,CAAA;AAAA,GAClC;AACA,EAAA,OAAO,MAAM,OAAO,CAAA,CAAA;AACtB,CAAA;AAEA,SAAS,YAAY,IAA0B,EAAA;AAE7C,EAAA,MAAM,UAAa,GAAA,UAAA,CAAA;AACnB,EAAA,MAAM,SAAY,GAAA,KAAA,CAAA;AAClB,EAAM,MAAA,KAAA,GAAQ,IAAI,UAAA,CAAW,IAAI,CAAA,CAAA;AAEjC,EAAA,IAAI,OAAO,UAAY,EAAA;AACrB,IAAM,MAAA,IAAI,WAAW,iCAAiC,CAAA,CAAA;AAAA,GACxD;AAEA,EAAA,IAAI,OAAO,CAAG,EAAA;AAEZ,IAAA,IAAI,OAAO,SAAW,EAAA;AAGpB,MAAA,KAAA,IAAS,SAAY,GAAA,CAAA,EAAG,SAAY,GAAA,IAAA,EAAM,aAAa,SAAW,EAAA;AAGhE,QAAA,MAAA,CAAO,gBAAgB,KAAM,CAAA,KAAA,CAAM,SAAW,EAAA,SAAA,GAAY,SAAS,CAAC,CAAA,CAAA;AAAA,OACtE;AAAA,KACK,MAAA;AACL,MAAA,MAAA,CAAO,gBAAgB,KAAK,CAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAEA,EAAO,OAAA,KAAA,CAAA;AACT,CAAA;AAEgB,SAAA,gBAAA,CACd,QACA,EAAA,GAAA,EACA,QACQ,EAAA;AACR,EAAA,QAAA,GAAW,QAAY,IAAA,GAAA,CAAA;AACvB,EAAI,IAAA,QAAA,GAAW,OAAO,CAAG,EAAA;AACvB,IAAM,MAAA,IAAI,UAAU,eAAe,CAAA,CAAA;AAAA,GACrC;AAEA,EAAA,GAAA,GAAM,GAAO,IAAA,WAAA,CAAA;AACb,EAAA,OAAO,iBAAkB,CAAA,GAAA,CAAI,QAAW,GAAA,CAAC,GAAG,QAAQ,CAAA,CAAA;AACtD,CAAA;AAEA,SAAS,iBAAA,CACP,SACA,QACQ,EAAA;AACR,EAAA,QAAA,GAAW,QAAY,IAAA,gBAAA,CAAA;AACvB,EAAA,IAAI,CAAC,QAAU,EAAA;AACb,IAAM,MAAA,IAAI,MAAM,iBAAiB,CAAA,CAAA;AAAA,GACnC;AAEA,EAAI,IAAA,OAAA,CAAQ,SAAS,EAAI,EAAA;AACvB,IAAM,MAAA,IAAI,UAAU,eAAe,CAAA,CAAA;AAAA,GACrC;AACA,EAAI,IAAA,OAAA,CAAQ,SAAS,EAAI,EAAA;AACvB,IAAM,MAAA,IAAI,UAAU,eAAe,CAAA,CAAA;AAAA,GACrC;AACA,EAAI,IAAA,OAAA,CAAQ,MAAS,GAAA,CAAA,KAAM,CAAG,EAAA;AAC5B,IAAM,MAAA,IAAI,UAAU,eAAe,CAAA,CAAA;AAAA,GACrC;AACA,EAAA,MAAM,WAAc,GAAA,aAAA,CAAc,KAAM,CAAA,IAAA,CAAK,OAAO,CAAC,CAAA,CAAA;AACrD,EAAM,MAAA,YAAA,GAAe,mBAAmB,OAAO,CAAA,CAAA;AAC/C,EAAA,MAAM,OAAO,WAAc,GAAA,YAAA,CAAA;AAC3B,EAAM,MAAA,MAAA,GAAS,IAAK,CAAA,KAAA,CAAM,YAAY,CAAA,CAAA;AACtC,EAAA,MAAM,KAAQ,GAAA,MAAA,CAAQ,GAAI,CAAA,CAAC,MAAW,KAAA;AACpC,IAAM,MAAA,KAAA,GAAQ,aAAa,MAAM,CAAA,CAAA;AACjC,IAAA,OAAO,SAAU,KAAK,CAAA,CAAA;AAAA,GACvB,CAAA,CAAA;AACD,EAAO,OAAA,QAAA,CAAS,CAAC,CAAA,KAAM,sCACnB,GAAA,KAAA,CAAM,KAAK,QAAQ,CAAA,GACnB,KAAM,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AACpB,CAAA;AAEA,SAAS,mBAAmB,aAAmC,EAAA;AAC7D,EAAM,MAAA,GAAA,GAAM,cAAc,MAAS,GAAA,CAAA,CAAA;AACnC,EAAA,MAAM,KAAK,GAAM,GAAA,EAAA,CAAA;AACjB,EAAM,MAAA,IAAA,GAAO,OAAO,KAAM,CAAA,IAAA,CAAK,aAAa,CAAG,EAAA,EAAE,OAAS,EAAA,IAAA,EAAM,CAAA,CAAA;AAChE,EAAO,OAAA,aAAA,CAAc,MAAM,IAAK,CAAA,IAAI,CAAC,CAAE,CAAA,KAAA,CAAM,GAAG,EAAE,CAAA,CAAA;AACpD,CAAA;AAEA,SAAS,IAAA,CAAK,GAAa,EAAA,SAAA,EAAmB,MAAwB,EAAA;AACpE,EAAO,OAAA,GAAA,CAAI,SAAS,MAAQ,EAAA;AAC1B,IAAA,GAAA,GAAM,SAAY,GAAA,GAAA,CAAA;AAAA,GACpB;AACA,EAAO,OAAA,GAAA,CAAA;AACT,CAAA;AAEA,SAAS,cAAc,KAA8B,EAAA;AACnD,EAAA,OAAO,KAAM,CAAA,GAAA,CAAI,CAAC,CAAA,KAAM,KAAK,CAAE,CAAA,QAAA,CAAS,CAAC,CAAA,EAAG,GAAK,EAAA,CAAC,CAAC,CAAA,CAAE,KAAK,EAAE,CAAA,CAAA;AAC9D,CAAA;AAEA,SAAS,UAAU,GAAqB,EAAA;AACtC,EAAQ,OAAA,CAAA,GAAA,IAAO,EAAI,EAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AACrC,CAAA;AAEA,SAAS,aAAa,GAAqB,EAAA;AACzC,EAAO,OAAA,QAAA,CAAS,KAAK,CAAC,CAAA,CAAA;AACxB,CAAA;AAEA,MAAM,gBAAmB,GAAA;AAAA,EACvpEA,IAAI,KAAoC,GAAA;AAAA,EACtC,CAAA;AAAA,EAAM,CAAA;AAAA,EAAM,EAAA;AAAA,EAAM,CAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EACxE,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,EAAA;AAAA,EAAM,GAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EACxE,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EACxE,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EACxE,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EACxE,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EACxE,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EACxE,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EACxE,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,CAAA;AAAA,EAAM,CAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EACxE,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,EAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EACxE,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EACxE,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EACxE,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,EAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,GAAA;AAAA,EAAM,EAAA;AAAA,EACxE,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,EAAM,EAAA;AAAA,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"}